// This mod belongs to IcyMelon Studios.
// You can't use or copy this code or textures without our permission.



/*
*
*
* Mod Constants Below.....
*
*
*/






const VERSION = "v1_0_0";
const BUILD = "DEVELOPMENT";






/* variables and stuff is down
*
*
*
*/



//Resource Variables Begin



var inventoryDrawable = null;
var frameDrawable = null;
var saveDrawable = null;




//Resource Variables End


var ctx = com.mojang.minecraftpe.MainActivity.currentMainActivity.get();
var metrics = new android.util.DisplayMetrics();
ctx.getWindowManager().getDefaultDisplay().getMetrics(metrics);
var displayHeight = metrics.heightPixels;
var displayWidth = metrics.widthPixels;

var path = android.os.Environment.getExternalStorageDirectory().getAbsolutePath() + "/PokeDroidPE/versions/"+VERSION+"/";
var sdcard = new android.os.Environment.getExternalStorageDirectory();
var starterUIWindows = [];
var invUIWindows = [];
var toggled = false;

var emptyDrawable = null;


var pokemonNames = ["Empty"];
var pokemonModels = [0];
var pokemonTextures = [0];
var pokemonDescs = [0];
var pokemonMove1 = [0];
var pokemonMove2 = [0];
var pokemonMove3 = [0];
var pokemonMove4 = [0];
var pokemonSpawnRates = [0];
var pokemonCatchRates = [0];
var pokemonIcons = [emptyDrawable];
var pokemonSounds = ["Empty"];


var pokeballStrength = []; pokeballStrength[716] = 0; pokeballStrength[717] = 5; pokeballStrength[718] = 10; pokeballStrength[719] = 100;
var pokeballTextures = []; pokeballTextures[716] = "pokeballs/pokeball-normal.png"; pokeballTextures[717] = "pokeballs/pokeball-great.png"; pokeballTextures[718] = "pokeballs/pokeball-ultra.png"; pokeballTextures[719] = "pokeballs/pokeball-master.png"; 

var bugFixed = false;
var pokeBtn = false;
var pokemonHolder;
var idHolder = 0;
var lvlHolder = 0;
var loader;
var spawningTime = 0;
var lengthOfSpawnRates = 0;
var spawnRatesForRandom = [];
var idOfPokemonThatWillSpawn = 0;
var countSpawnPokemon = [1, 1, 2, 2, 3];
var spawnRadiusX = [];
var spawnRadiusZ = [];
var positionOfNewTwoVariables = 0;
var radiusFailed = 0;
var xSideToSpawn = 0, zSideToSpawn = 0;
var dominatingSide = 0;
var pokemonRadius50x100 = 40, pokemonRadius100x100 = 80;
var apricornRadius50x100 = 10, apricornRadius100x100 = 20;
var gameStarted = 0;
var currentHeight = 0;
var bedrockHeight = 0;
var xSpawn = 0, ySpawn = 0, zSpawn = 0;
var anvilX = 0, anvilY = 0, anvilZ = 0;
var anvilPartDestroyed = 0;
var Pokeball;
var Caught = 100;
var recentlyCatched = false;
var previousItem = 0;
var previousEntity;

var ID_holder = 0;
var LVL_holder = 0;
var AXIS_holder = [0, 0, 0];

//variables that need saving

var starterSelected = false;
var pokemonSelected = 0;
var pokeId1 = 0, pokeId2 = 0, pokeId3 = 0, pokeId4 = 0, pokeId5 = 0, pokeId6 = 0;
var pokeHP1 = 0, pokeHP2 = 0, pokeHP3 = 0, pokeHP4 = 0, pokeHP5 = 0, pokeHP6 = 0;
var pokeExp1 = 0, pokeExp2 = 0, pokeExp3 = 0, pokeExp4 = 0, pokeExp5 = 0, pokeExp6 = 0;
var pokeLvl1 = 0, pokeLvl2 = 0, pokeLvl3 = 0, pokeLvl4 = 0, pokeLvl5 = 0, pokeLvl6 = 0;

//variables that need saving

var pokeMaxHP = [0, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42, 44, 46, 49, 52, 55, 58, 61, 64, 67, 70, 73, 76, 79, 82, 85, 88, 92, 96, 100, 104, 108, 112, 116, 120, 124, 128, 132, 136, 140, 144, 148, 152, 156, 160, 164, 168, 172, 176, 180, 184, 188, 192, 196, 200, 204, 208, 212, 216, 220, 224, 228, 232, 236, 240];
var pokeMaxExp = [0, 1, 8, 27, 64, 125, 216, 343, 512, 729, 1000, 1331, 1728, 2197, 2744, 3375, 4096, 4913, 5832, 6859, 8000, 9261, 10648, 12167, 13824, 15625, 17576, 19683, 21952, 24389, 27000, 29791, 32768, 35937, 39304, 42875, 46656, 50653, 54872, 59319, 64000, 68921, 74088, 79507, 85184, 91125, 97336, 103823, 110592, 117649, 125000, 132651, 140608, 148877, 157464, 166375, 175616, 185193, 195112, 205379, 216000, 226981, 238328, 250047, 262144, 274625, 287496, 300763, 314432, 328509, 343000];

var PokemonDatabase = null;

var MediaPlayer = android.media.MediaPlayer();


var PokemonType = {
	NORMAL: 0,
	FIGHTING: 1,
	FLYING: 2,
	POISON: 3,
	GROUND: 4,
	ROCK: 5,
	BUG: 6,
	GHOST: 7,
	STEEL: 8,
	FIRE: 9,
	WATER: 10,
	GRASS: 11,
	ELECTRIC: 12,
	PSYCHIC: 13,
	ICE: 14,
	DRAGON: 15,
	DARK: 16,
	FAIRY: 17
}



if(!java.io.File(path).exists()) { 	
try { 		
java.io.File(path).mkdirs();
}
catch(err) 	{
ctx.runOnUiThread(new java.lang.Runnable(){
run: function(){ 
android.widget.Toast.makeText(ctx, err, 0).show(); 		
}})}
} 
else if(java.io.File(path).exists())
{ 
}

var starterbg_base = "  ";
Base64Decode(android.util.Base64.decode(starterbg_base,0),sdcard+"/starterbg.png");
var starterBgImg = new android.graphics.BitmapFactory.decodeFile(sdcard+"/starterbg.png");
var starterDrawable = new android.graphics.drawable.BitmapDrawable(starterBgImg);


// Apricorn
Block.defineBlock(25, "Apricorn Leaves", [["apricorn_leaves", 0]],0,false,0);
Block.defineBlock(28, "Apricorn Leaves", [["apricorn_leaves", 0]],0,false,0);
Block.defineBlock(29, "Apricorn Leaves", [["apricorn_leaves", 0]],0,false,0);
Block.defineBlock(33, "Apricorn Leaves", [["apricorn_leaves", 0]],0,false,0);
Block.defineBlock(34, "Apricorn Leaves", [["apricorn_leaves", 0]],0,false,0);
Block.defineBlock(36, "Apricorn Leaves", [["apricorn_leaves", 0]],0,false,0);
Block.defineBlock(69, "Apricorn Log", [["apricorn_log", 0]],0,false,0);
Block.defineBlock(144, "Apricorn Black", [["stained_clay", 15]],0,false,0);
Block.defineBlock(146, "Apricorn White", [["stained_clay", 0]],0,false,0);
Block.defineBlock(147, "Apricorn Red", [["stained_clay", 14]],0,false,0);
Block.defineBlock(148, "Apricorn Blue", [["stained_clay", 11]],0,false,0);
Block.defineBlock(149, "Apricorn Yellow", [["stained_clay", 4]],0,false,0);
Block.defineBlock(150, "Apricorn Green", [["stained_clay", 5]],0,false,0);
Block.defineBlock(151, "Apricorn Pink", [["stained_clay", 6]],0,false,0);

Block.setDestroyTime(25, 0.5);
Block.setDestroyTime(28, 0.5);
Block.setDestroyTime(29, 0.5);
Block.setDestroyTime(33, 0.5);
Block.setDestroyTime(34, 0.5);
Block.setDestroyTime(36, 1.2);
Block.setDestroyTime(69, 0.5);

Block.setShape(25, 14/16, 0, 0, 1, 1, 1);
Block.setShape(28, 0, 0, 14/16, 1, 1, 1);
Block.setShape(29, 0, 0, 0, 2/16, 1, 1);
Block.setShape(33, 0, 0, 0, 1, 1, 2/16);
Block.setShape(34, 0, -18/16, 0, 1, 2/16, 1);
Block.setShape(36, 6/16, 0, 6/16, 10/16, 1, 10/16);
Block.setShape(144, 5/16, 0, 5/16, 11/16, 20/16, 11/16);
Block.setShape(146, 5/16, 0, 5/16, 11/16, 20/16, 11/16);
Block.setShape(147, 5/16, 0, 5/16, 11/16, 20/16, 11/16);
Block.setShape(148, 5/16, 0, 5/16, 11/16, 20/16, 11/16);
Block.setShape(149, 5/16, 0, 5/16, 11/16, 20/16, 11/16);
Block.setShape(150, 5/16, 0, 5/16, 11/16, 20/16, 11/16);
Block.setShape(151, 5/16, 0, 5/16, 11/16, 20/16, 11/16);

Block.setLightLevel(144,15);
Block.setLightLevel(146,15);
Block.setLightLevel(147,15);
Block.setLightLevel(148,15);
Block.setLightLevel(149,15);
Block.setLightLevel(150,15);
Block.setLightLevel(151,15);

// Anvil

Block.defineBlock(115, "Anvil", [["disc_on_anvil", 0]],0,false,0);
Block.defineBlock(116, "Anvil", [["disc_on_anvil", 1]],0,false,0);
Block.defineBlock(117, "Anvil", [["disc_on_anvil", 2]],0,false,0);
Block.defineBlock(118, "Anvil", [["disc_on_anvil", 3]],0,false,0);
Block.defineBlock(119, "Anvil", [["irondisc_on_anvil", 0]],0,false,0);

Block.setDestroyTime(115, 2);
Block.setDestroyTime(116, 2);
Block.setDestroyTime(117, 2);
Block.setDestroyTime(118, 2);
Block.setDestroyTime(119, 2);


Block.setShape(115, 6/16, 0/16, 6/16, 10/16, 1/16, 10/16);
Block.setShape(116, 6/16, 0/16, 6/16, 10/16, 1/16, 10/16);
Block.setShape(117, 6/16, 0/16, 6/16, 10/16, 1/16, 10/16);
Block.setShape(118, 6/16, 0/16, 6/16, 10/16, 1/16, 10/16);
Block.setShape(119, 6/16, 0/16, 6/16, 10/16, 1/16, 10/16);


Block.setLightLevel(115,0);
Block.setLightLevel(116,0);
Block.setLightLevel(117,0);
Block.setLightLevel(118,0);
Block.setLightLevel(119,0);

Block.defineBlock(93,"Healer Block",[["stained_clay",0],["healer",0],["healer",1],["healer",1],["healer",1],["healer",1]],0,false,0);
Block.defineBlock(94,"PC Block",[["pcblock",1],["pcblock",1],["pcblock",1],["pcblock",0],["pcblock",1],["pcblock",1]],0,false,0);
Block.setShape(93,0,0,0,1,0.7,1);
Block.setDestroyTime(93, 3);
Block.setLightLevel(93, 10);
Block.setDestroyTime(94, 3);
Block.setLightLevel(94, 1);





var freeBlockIds = [25,28,29,33,34,36,69,70,72,75,76,77,84,88,90,93,94,97,113,115,116,117,118,119,122,123,124,125,126,130,131,132,137,138,140,143,144,145,146,147,148,149,150,151,153,154,160,161,162,165,166,167,168,169,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241];

ModPE.setItem(700, "apricorn", 0, "Black Apricorn");
ModPE.setItem(701, "apricorn", 1, "White Apricorn");
ModPE.setItem(702, "apricorn", 2, "Red Apricorn");
ModPE.setItem(703, "apricorn", 3, "Blue Apricorn");
ModPE.setItem(704, "apricorn", 4, "Yellow Apricorn");
ModPE.setItem(705, "apricorn", 5, "Green Apricorn");
ModPE.setItem(706, "apricorn", 6, "Pink Apricorn");
ModPE.setItem(707, "cooked_apricorn", 0, "Cooked Black Apricorn");
ModPE.setItem(708, "cooked_apricorn", 1, "Cooked White Apricorn");
ModPE.setItem(709, "cooked_apricorn", 2, "Cooked Red Apricorn");
ModPE.setItem(710, "cooked_apricorn", 3, "Cooked Blue Apricorn");
ModPE.setItem(711, "cooked_apricorn", 4, "Cooked Yellow Apricorn");
ModPE.setItem(712, "cooked_apricorn", 5, "Cooked Green Apricorn");
ModPE.setItem(713, "cooked_apricorn", 6, "Cooked Pink Apricorn");
ModPE.setItem(714, "healeritem", 0, "Healer");
ModPE.setItem(715, "pcitem", 0, "PC");
ModPE.setItem(716, "pokeball", 0, "Poke Ball");
ModPE.setItem(717, "pokeball", 1, "Great Ball");
ModPE.setItem(718, "pokeball", 2, "Ultra Ball");
ModPE.setItem(719, "pokeball", 3, "Master Ball");
ModPE.setItem(721, "lid", 0, "Poke Ball Lid");
ModPE.setItem(722, "lid", 1, "Great Ball Lid");
ModPE.setItem(723, "lid", 2, "Ultra Ball Lid");
ModPE.setItem(724, "lid", 3, "Master Ball Lid");
ModPE.setItem(725, "ironbase", 0, "Iron Base");

ModPE.setItem(729, "pokedex", 0, "Pokedex", 1);


ModPE.setItem(736, "hammer", 0, "Wood Hammer", 1);
ModPE.setItem(737, "hammer", 1, "Stone Hammer", 1);
ModPE.setItem(738, "hammer", 2, "Iron Hammer", 1);
ModPE.setItem(739, "hammer", 3, "Gold Hammer", 1);
ModPE.setItem(740, "hammer", 4, "Diamond Hammer", 1);
ModPE.setItem(742, "disc", 0, "Poke Ball Disc");
ModPE.setItem(743, "disc", 1, "Great Ball Disc");
ModPE.setItem(744, "disc", 2, "Ultra Ball Disc");
ModPE.setItem(745, "disc", 3, "Master Ball Disc");
ModPE.setItem(746, "irondisc", 0, "Iron Disc");


/*
ModPE.setItem(713, "badge", 0, "Basic Badge");
ModPE.setItem(714, "badge", 1, "Toxic Badge");
ModPE.setItem(715, "badge", 2, "Insect Badge");
ModPE.setItem(716, "badge", 3, "Bolt Badge");
ModPE.setItem(717, "badge", 4, "Quake Badge");
ModPE.setItem(718, "badge", 5, "Jet Badge");
ModPE.setItem(719, "badge", 6, "Freeze Badge");
ModPE.setItem(720, "badge", 7, "Legend Badge");
*/

Item.addFurnaceRecipe(700, 707);
Item.addFurnaceRecipe(701, 708);
Item.addFurnaceRecipe(702, 709);
Item.addFurnaceRecipe(703, 710);
Item.addFurnaceRecipe(704, 711);
Item.addFurnaceRecipe(705, 712);
Item.addFurnaceRecipe(706, 713);


Item.addShapedRecipe(714, 1, 0, [
"iii",
"idi",
"iii"
],
["i", 265, 0, "d", 264,0]);

Item.addShapedRecipe(715, 1, 0, [
"igi",
"iri",
"iri"
],
["g", 102, 0, "i", 265, 0, "r", 331,0]);

Item.addShapedRecipe(716, 1, 0, [
" l ",
" b ",
" i "
],
["l", 721, 0, "b", 77, 0, "i", 725,0]);

Item.addShapedRecipe(717, 1, 0, [
" l ",
" b ",
" i "
],
["l", 722, 0, "b", 77, 0, "i", 725,0]);

Item.addShapedRecipe(718, 1, 0, [
" l ",
" b ",
" i "
],
["l", 723, 0, "b", 77, 0, "i", 725,0]);

Item.addShapedRecipe(719, 1, 0, [
" l ",
" b ",
" i "
],
["l", 724, 0, "b", 77, 0, "i", 725,0]);

Item.addShapedRecipe(729, 1, 0, [
"igi",
"drd",
"iri"
],
["r", 331, 0, "g", 102, 0, "i", 265, 0, "d", 351, 1]);

Item.addShapedRecipe(736, 1, 0, [
"iii",
"isi",
" s "
],
["i", 5, 0, "s", 280, 0]);

Item.addShapedRecipe(737, 1, 0, [
"iii",
"isi",
" s "
],
["i", 4, 0, "s", 280, 0]);

Item.addShapedRecipe(738, 1, 0, [
"iii",
"isi",
" s "
],
["i", 265, 0, "s", 280, 0]);

Item.addShapedRecipe(739, 1, 0, [
"iii",
"isi",
" s "
],
["i", 266, 0, "s", 280, 0]);

Item.addShapedRecipe(740, 1, 0, [
"iii",
"isi",
" s "
],
["i", 264, 0, "s", 280, 0]);


Item.addShapedRecipe(742, 1, 0, [
"   ",
"rrr",
"   "
],
["r", 709, 0]);

Item.addShapedRecipe(743, 1, 0, [
"   ",
"brb",
"   "
],
["r", 709, 0, "b", 710, 0]);

Item.addShapedRecipe(744, 1, 0, [
"   ",
"byb",
"   "
],
["b", 707, 0, "y", 711, 0]);

Item.addShapedRecipe(746, 1, 0, [
"   ",
"iii",
"   "
],
["i", 265, 0]);


Player.addItemCreativeInv(700,1,0);
Player.addItemCreativeInv(701,1,0);
Player.addItemCreativeInv(702,1,0);
Player.addItemCreativeInv(703,1,0);
Player.addItemCreativeInv(704,1,0);
Player.addItemCreativeInv(705,1,0);
Player.addItemCreativeInv(706,1,0);
Player.addItemCreativeInv(707,1,0);
Player.addItemCreativeInv(708,1,0);
Player.addItemCreativeInv(709,1,0);
Player.addItemCreativeInv(710,1,0);
Player.addItemCreativeInv(711,1,0);
Player.addItemCreativeInv(712,1,0);
Player.addItemCreativeInv(713,1,0);
Player.addItemCreativeInv(714,1,0);
Player.addItemCreativeInv(715,1,0);
Player.addItemCreativeInv(716,1,0);
Player.addItemCreativeInv(717,1,0);
Player.addItemCreativeInv(718,1,0);
Player.addItemCreativeInv(719,1,0);
Player.addItemCreativeInv(721,1,0);
Player.addItemCreativeInv(722,1,0);
Player.addItemCreativeInv(723,1,0);
Player.addItemCreativeInv(724,1,0);
Player.addItemCreativeInv(725,1,0);

Player.addItemCreativeInv(729,1,0);
Player.addItemCreativeInv(730,1,0);
Player.addItemCreativeInv(731,1,0);
Player.addItemCreativeInv(732,1,0);
Player.addItemCreativeInv(733,1,0);


Player.addItemCreativeInv(736,1,0);
Player.addItemCreativeInv(737,1,0);
Player.addItemCreativeInv(738,1,0);
Player.addItemCreativeInv(739,1,0);
Player.addItemCreativeInv(740,1,0);
Player.addItemCreativeInv(742,1,0);
Player.addItemCreativeInv(743,1,0);
Player.addItemCreativeInv(744,1,0);
Player.addItemCreativeInv(745,1,0);
Player.addItemCreativeInv(746,1,0);




Item.setMaxDamage(736, 19);
Item.setMaxDamage(737, 43);
Item.setMaxDamage(738, 83);
Item.setMaxDamage(739, 10);
Item.setMaxDamage(740, 173);

ModPE.setItem(752,"chisel",0,"PokeChisel");

Item.setMaxDamage(752,1000);

Block.defineBlock(191,"Pikachu Stone Brick","pikabrick",1,false,0);
Block.defineBlock(192,"Pokeball Stone Brick","pokebrick",1,false,0);

Block.setLightLevel(191,1);
Block.setLightLevel(192,1);

Block.setDestroyTime(191,2);
Block.setDestroyTime(192,2);



/*variables is up
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*/
// code is below

loadAllPokemon();





function newLevel(){
registerPokemon("Weepinbell", WeepinbellRenderer, "Weepinbell.png", "The leafy parts act as cutters for slashing foes. It spits a fluid that dissolves everything.", 75, 77, 79, 33, 19, 16, "070.png","pokemon/weepinbell.wav");
registerPokemon("Squirtle", SquirtleRenderer, "Squirtle.png", "It shelters itself in its shell, then strikes back with spouts of water at every opportunity.", 10, 55, 145, 56, 7, 6, "007.png","pokemon/squirtle.wav");
registerPokemon("Krabby", KrabbyRenderer, "Krabby.png", "If it senses danger approaching, it cloaks itself with bubbles from its mouth so it will look bigger.", 145, 43, 55, 61, 35, 29, "098.png","pokemon/krabby.wav");
registerPokemon("Voltorb", VoltorbRenderer, "Voltorb.png", "It was discovered when Poke Balls were introduced. It is said that there is some connection.", 33, 86, 85, 120, 30, 25, "100.png","pokemon/voltorb.wav");
registerPokemon("Diglett", DiglettRenderer, "Diglett.png", "Lives about one yard underground where it feeds on plant roots. It sometimes appears aboveground.", 33, 88, 91, 28, 40, 33, "050.png","pokemon/diglett.wav");
registerPokemon("Mareep", MareepRenderer, "Mareep.png", "Its fluffy coat swells to double when static electricity builds up. Touching it can be shocking.", 33, 84, 85, 1, 37, 31, "179.png","pokemon/mareep.wav");
registerPokemon("Rattata", RattataRenderer, "Rattata.png", "Living wherever there is food available, it ceaselessly scavenges for edibles the entire day.", 33, 39, 98, 44, 40, 33, "019.png","pokemon/rattata.wav");
registerPokemon("Doduo", DoduoRenderer, "Doduo.png", "A two-headed Pokemon that was discovered as a sudden mutation. It runs at a pace of over 60 miles per hour.", 64, 98, 34, 136, 30, 25, "084.png","pokemon/doduo.wav");
registerPokemon("Caterpie", CaterpieRenderer, "Caterpie.png", "For protection, it releases a horrible stench from the antennae on its head to drive away enemies.", 33, 98, 184, 81, 40, 33, "010.png","pokemon/caterpie.wav");
registerPokemon("Bulbasaur", BulbasaurRenderer, "Bulbasaur.png", "A strange seed was planted on its back at birth. The plant sprouts and grows with this Pokemon.", 22, 71, 75, 73, 7, 6, "001.png","pokemon/bulbasaur.wav");
registerPokemon("Charmander", CharmanderRenderer, "Charmander.png", "The flame on its tail indicates Charmander's life force. If it is healthy, the flame burns brightly.", 10, 43, 52, 53, 7, 6, "004.png","pokemon/charmander.wav");
registerPokemon("Pikachu", PikachuRenderer, "Pikachu.png", "It raises its tail to check its surroundings. The tail is sometimes struck by lightning in this pose.", 10, 84, 85, 86, 30, 25, "025.png","pokemon/pikachu.wav");
registerPokemon("Piplup", PiplupRenderer, "Piplup.png", "It doesn't like to be taken care of. It's difficult to bond with since it won't listen to its Trainer.", 33, 55, 61, 10, 7, 6, "393.png","pokemon/piplup.wav");
registerPokemon("Chimchar", ChimcharRenderer, "Chimchar.png", "Its fiery rear end is fueled by gas made in its belly. Even rain can't extinguish the fire.", 33, 43, 52, 53, 7, 6, "390.png","pokemon/chimchar.wav");
registerPokemon("Turtwig", TurtwigRenderer, "Turtwig.png", "Photosynthesis occurs across its body under the sun. The shell on its back is actually hardened soil.", 22, 71, 72, 75, 7, 6, "387.png","pokemon/turtwig.wav");
registerPokemon("Pichu", PichuRenderer, "Pichu.png", "It plays with others by touching tails and setting off sparks. This appears to be a test of courage.", 33, 85, 86, 98, 30, 25, "172.png","pokemon/pichu.wav");
registerPokemon("Gastly", GastlyRenderer, "Gastly.png", "Its body is made of gas. Despite lacking substance, it can envelop an opponent of any size and cause suffocation.", 43, 50, 122, 184, 30, 25, "092.png","pokemon/gastly.wav");
registerPokemon("Totodile", TotodileRenderer, "Totodile.png", "It is small but rough and tough. It won't hesitate to take a bite out of anything that moves.", 10, 43, 61, 10, 7, 6, "158.png","pokemon/totodile.wav");
registerPokemon("Chikorita", ChikoritaRenderer, "Chikorita.png", "A sweet aroma gently wafts from the leaf on its head. It is docile and loves to soak up sun rays.", 22, 71, 72, 75, 7, 6, "152.png","pokemon/chikorita.wav");
registerPokemon("Cyndaquil", CyndaquilRenderer, "Cyndaquil.png", "It is timid and always curls itself up in a ball. If attacked, it flares up its back for protection.", 33, 98, 52, 53, 7, 6, "155.png","pokemon/cyndaquil.wav");
registerPokemon("Butterfree", ButterfreeRenderer, "Butterfree.png", "It loves the honey of flowers and can locate flower patches that have even tiny amounts of pollen.", 17, 16, 78, 79, 7, 6, "012.png","pokemon/butterfree.wav");
registerPokemon("Victreebel", VictreebelRenderer, "Victreebel.png", "Said to live in huge colonies deep in jungles, although no one has ever returned from there.", 22, 72, 75, 77, 7, 6, "071.png","pokemon/victreebel.wav");
registerPokemon("Raichu", RaichuRenderer, "Raichu.png", "When it's electricity builds, it's muscles are stimulated, and it becomes more aggressive than usual.", 1, 85, 86, 84, 12, 10, "026.png","pokemon/raichu.wav");
registerPokemon("Magnemite", MagnemiteRenderer, "Magnemite.png", "The units at the sides of its body generate antigravity energy to keep it aloft in the air.", 33, 48, 85, 86, 30, 25, "081.png","pokemon/magnemite.wav");
registerPokemon("Trapinch", TrapinchRenderer, "Trapinch.png", "It lives in arid deserts. It makes a sloping pit trap in sand where it patiently awaits prey.", 33, 44, 222, 89, 40, 33, "328.png","pokemon/trapinch.wav");
registerPokemon("Bonsly", BonslyRenderer, "Bonsly.png", "It prefers arid environments. It leaks water from its eyes to adjust its body's fluid levels.", 33, 24, 68, 88, 40, 33, "438.png","pokemon/bonsly.wav");
registerPokemon("Shellder", ShellderRenderer, "Shellder.png", "It's hard shell repels any kind of attack. It is vulnerable only when its shell is open.", 33, 43, 48, 58, 30, 25, "090.png","pokemon/shellder.wav");
registerPokemon("Psyduck", PsyduckRenderer, "Psyduck.png", "It is constantly wracked by a headache. When the headache turns intense, it begins using mysterious powers.", 55, 60, 93, 94, 30, 25, "054.png","pokemon/psyduck.wav");
registerPokemon("Cubone", CuboneRenderer, "Cubone.png", "It wears the skull of its dead mother on its head. When it becomes lonesome, it is said to cry loudly.", 33, 98, 130, 10, 30, 25, "104.png","pokemon/cubone.wav");
registerPokemon("Poliwhirl", PoliwhirlRenderer, "Poliwhirl.png", "It can live in or out of water. When out of water, it constantly sweats to keep its body slimy.", 1, 145, 55, 56, 19, 16, "061.png","pokemon/poliwhirl.wav");
registerPokemon("Seel", SeelRenderer, "Seel.png", "A Pokemon that lives on icebergs. It swims in the sea using the point on its head to break up ice.", 45, 58, 62, 64, 30, 25, "086.png","pokemon/seel.wav");
registerPokemon("Growlithe", GrowlitheRenderer, "Growlithe.png", "Very friendly and faithful to people. It will try to repel enemies by barking and biting.", 33, 43, 45, 52, 30, 25, "058.png","pokemon/growlithe.wav");
registerPokemon("Latias", LatiasRenderer, "Latias.png", "It communicates using telepathy. Its body is covered in down that refracts light to make it invisible.", 94, 54, 82, 60, 1, 1, "380.png","pokemon/latias.wav");
registerPokemon("Latios", LatiosRenderer, "Latios.png", "A highly intelligent Pokemon. By folding back its wings in flight, it can overtake jet planes.", 94, 54, 82, 60, 1, 1, "381.png","pokemon/latios.wav");
registerPokemon("Ivysaur", IvysaurRenderer, "Ivysaur.png", "There is a plant bulb on its back. When it absorbs nutrients, the bulb is said to blossom into a large flower.", 33, 79, 73, 75, 7, 6, "002.png","pokemon/ivysaur.wav");
registerPokemon("Venusaur", VenusaurRenderer, "Venusaur.png", "By spreading the broad petals of its flower and catching the sun’s rays, it fills its body with power.", 77, 75, 235, 76, 7, 6, "003.png","pokemon/venusaur.wav");
registerPokemon("Charizard", CharizardRenderer, "Charizard.png", "When expelling a blast of superhot fire, the red flame at the tip of its tail burns more intensely.", 82, 172, 17, 83, 7, 6, "006.png","pokemon/charizard.wav");
registerPokemon("Wartortle", WartortleRenderer, "Wartortle.png", "When tapped, this Pokemon will pull in its head, but its tail will still stick out a little bit.", 55, 39, 145, 44, 7, 6, "008.png","pokemon/wartortle.wav");
registerPokemon("Blastoise", BlastoiseRenderer, "Blastoise.png", "It crushes its foe under its heavy body to cause fainting. In a pinch, it will withdraw inside its shell.", 229, 44, 130, 56, 7, 6, "009.png","pokemon/blastoise.wav");
registerPokemon("Pidgey", PidgeyRenderer, "Pidgey.png", "A common sight in forests and woods. It flaps its wings at ground level to kick up blinding sand.", 33, 28, 16, 98, 40, 33, "016.png","pokemon/pidgey.wav");
registerPokemon("Azurill", AzurillRenderer, "Azurill.png", "A Pok�mon that lives by water. It moves quickly on land by bouncing on its big tail.", 33, 39, 55, 145, 24, 20, "298.png", "pokemon/azurill.wav");
registerPokemon("Bellsprout", BellsproutRenderer, "Bellsprout.png", "Even though its body is extremely skinny, it is blindingly fast when catching its prey.", 22, 78, 79, 73, 40, 33, "069.png", "pokemon/bellsprout.wav");
registerPokemon("Electrode", ElectrodeRenderer, "Electrode.png", "It explodes in response to even minor stimuli. It is feared, with the nickname of 'The Bomb Ball.'", 120, 84, 153, 86, 10, 8, "101.png", "pokemon/electrode.wav");
registerPokemon("Geodude", GeodudeRenderer, "Geodude.png", "Found in fields and mountains. Mistaking them for boulders, people often step or trip on them.", 33, 157, 205, 88, 40, 33, "074.png", "pokemon/geodude.wav");
registerPokemon("Igglybuff", IgglybuffRenderer, "Igglybuff.png", "Instead of walking with its short legs, it moves around by bouncing on its soft, tender body.", 33, 3, 10, 230, 26, 22, "174.png", "pokemon/igglybuff.wav");
registerPokemon("Magikarp", MagikarpRenderer, "Magikarp.png", "It is virtually worthless in terms of both power and speed. It is the most weak and pathetic Pokemon in the world.", 33, 29, 55, 56, 40, 33, "129.png", "pokemon/magikarp.wav");
registerPokemon("Marill", MarillRenderer, "Marill.png", "The fur on its body naturally repels water. It can stay dry, even when it plays in the water.", 33, 39, 55, 56, 30, 25, "183.png", "pokemon/marill.wav");
registerPokemon("Zubat", ZubatRenderer, "Zubat.png", "Even though it has no eyes, it can sense obstacles using ultrasonic waves it emits from its mouth.", 43, 98, 17, 141, 40, 33, "041.png", "pokemon/zubat.wav");
registerPokemon("Sudowoodo", SudowoodoRenderer, "Sudowoodo.png", "Although it always pretends to be a tree, its composition appears more similar to rock than to vegetation.", 1, 3, 24, 21, 11, 9, "185.png", "pokemon/sudowoodo.wav");



lengthOfSpawnRates = PokemonDatabase.pokemon.length - 1;
calculateSpawningPossibility();


loadResources();


showPokeInv();
showSaveBtn();

		
loadTextFile("starterSelected.txt");
if(loader != null)
starterSelected = loader;
loadTextFile("pokemonSelected.txt");
if(loader != null)
pokemonSelected = loader;
loadTextFile("pokeId1.txt");
if(loader != null)
pokeId1 = loader;
if(pokeId1 == 0)
pokeId1 = 0;
loadTextFile("pokeId2.txt");
if(loader != null)
pokeId2 = loader;
if(pokeId2 == 0)
pokeId2 = 0;
loadTextFile("pokeId3.txt");
if(loader != null)
pokeId3 = loader;
if(pokeId3 == 0)
pokeId3 = 0;
loadTextFile("pokeId4.txt");
if(loader != null)
pokeId4 = loader;
if(pokeId4 == 0)
pokeId4 = 0;
loadTextFile("pokeId5.txt");
if(loader != null)
pokeId5 = loader;
if(pokeId5 == 0)
pokeId5 = 0;
loadTextFile("pokeId6.txt");
if(loader != null)
pokeId6 = loader;
if(pokeId6 == 0)
pokeId6 = 0;
loadTextFile("pokeHP1.txt");
if(loader != null)
pokeHP1 = loader;
loadTextFile("pokeHP2.txt");
if(loader != null)
pokeHP2 = loader;
loadTextFile("pokeHP3.txt");
if(loader != null)
pokeHP3 = loader;
loadTextFile("pokeHP4.txt");
if(loader != null)
pokeHP4 = loader;
loadTextFile("pokeHP5.txt");
if(loader != null)
pokeHP5 = loader;
loadTextFile("pokeHP6.txt");
if(loader != null)
pokeHP6 = loader;
loadTextFile("pokeExp1.txt");
if(loader != null)
pokeExp1 = loader;
loadTextFile("pokeExp2.txt");
if(loader != null)
pokeExp2 = loader;
loadTextFile("pokeExp3.txt");
if(loader != null)
pokeExp3 = loader;
loadTextFile("pokeExp4.txt");
if(loader != null)
pokeExp4 = loader;
loadTextFile("pokeExp5.txt");
if(loader != null)
pokeExp5 = loader;
loadTextFile("pokeExp6.txt");
if(loader != null)
pokeExp6 = loader;
loadTextFile("pokeLvl1.txt");
if(loader != null)
pokeLvl1 = loader;
loadTextFile("pokeLvl2.txt");
if(loader != null)
pokeLvl2 = loader;
loadTextFile("pokeLvl3.txt");
if(loader != null)
pokeLvl3 = loader;
loadTextFile("pokeLvl4.txt");
if(loader != null)
pokeLvl4 = loader;
loadTextFile("pokeLvl5.txt");
if(loader != null)
pokeLvl5 = loader;
loadTextFile("pokeLvl6.txt");
if(loader != null)
pokeLvl6 = loader;

loader = null;
}



function leaveGame()
{
	dismissSaveBtn();
	dismissPokeInv();
	dismissPokeBtn();
}







function modTick() 
{
    if(gameStarted == 0) 
    {
        if(getTile(getPlayerX(), getPlayerY() - 2, getPlayerZ()) != 0 || Player.isFlying())
        {
        gameStarted = 1;
		showPokeBtn();
		
		sendOutPokemon(2, 5);
		killMob(pokemonHolder);
		bugFix = sendOutPokemon(11, 5);
		killMob(pokemonHolder);
		bugFix = sendOutPokemon(10, 5);
		killMob(pokemonHolder);
		
		bugFixed = true;
		
        }
    }
	
	if(previousItem!=getCarriedItem()){
	itemChangedHook(previousItem,getCarriedItem());
	}
	
	previousItem = getCarriedItem();
	
	if(previousEntity!=Player.getPointedEntity()){
	var currEntity = Player.getPointedEntity();


    if(currEntity!=null){
	playSound(PokemonDatabase.pokemon[getIdFromNameTag(currEntity)].sound);
	}
	
	
	

	}
	
	
	previousEntity = Player.getPointedEntity();
	
	
    if(spawningTime == 0 && gameStarted == 1)
    {
		if(!starterSelected) 
		{
			Player.addItemInventory(729, 1);
			Player.addItemInventory(714, 1);
			Player.addItemInventory(715, 1);
			Player.addItemInventory(716, 10);
			Player.addItemInventory(717, 6);
			Player.addItemInventory(718, 4);
			
            showStarterUI();
			
			for(spawningTime = 0; spawningTime < apricornRadius100x100; spawningTime++){
    	    xSpawn = getPlayerX() + getRandom(-100, 100);
            zSpawn = getPlayerZ() + getRandom(-100, 100);
            ySpawn = searchForGround(xSpawn, zSpawn);
          	spawnApricornTree(xSpawn, ySpawn, zSpawn);
            }
        }

    	
        for(spawningTime = 0; spawningTime < pokemonRadius100x100; spawningTime++){
        xSpawn = getPlayerX() + getRandom(-100, 100);
        zSpawn = getPlayerZ() + getRandom(-100, 100);
        ySpawn = searchForGround(xSpawn, zSpawn);
        spawnPokemon(spawnRatesForRandom[Math.floor((Math.random()*spawnRatesForRandom.length))], xSpawn, ySpawn, zSpawn);
    }
}

    if(spawningTime == pokemonRadius100x100)
    {
        spawnRadiusX.push(getPlayerX());
        spawnRadiusZ.push(getPlayerZ());
        spawningTime = 100;
    }
    
    
    
    
    
    if(spawningTime == 100)
    {
    	ifRadiusPassed();
    	if(radiusFailed == 0)
    	{
    	
    	
    	
    	
    	
    	
   //apricorns spawning

    for(var i = 0; i < apricornRadius50x100; i ++){
    	if(dominatingSide == 0)
    	{
    		if(xSideToSpawn > 0)
    		{
        xSpawn = getPlayerX() + getRandom(-50, 100);
        zSpawn = getPlayerZ() + getRandom(-100, 100);
        ySpawn = searchForGround(xSpawn, zSpawn);
        spawnApricornTree(xSpawn, ySpawn, zSpawn);
    		}
    		if(xSideToSpawn < 0)
    		{
    	xSpawn = getPlayerX() + getRandom(-100, 50);
        zSpawn = getPlayerZ() + getRandom(-100, 100);
        ySpawn = searchForGround(xSpawn, zSpawn);
        spawnApricornTree(xSpawn, ySpawn, zSpawn);
    		}
    	}
    	if(dominatingSide == 1)
    	{
    		if(zSideToSpawn > 0)
    		{
        xSpawn = getPlayerX() + getRandom(-100, 100);
        zSpawn = getPlayerZ() + getRandom(-50, 100);
        ySpawn = searchForGround(xSpawn, zSpawn);
        spawnApricornTree(xSpawn, ySpawn, zSpawn);
    		}
    		if(zSideToSpawn < 0)
    		{
    	xSpawn = getPlayerX() + getRandom(-100, 100);
        zSpawn = getPlayerZ() + getRandom(-100, 50);
        ySpawn = searchForGround(xSpawn, zSpawn);
        spawnApricornTree(xSpawn, ySpawn, zSpawn);
    		}}
    	}
       
      	
    	
    	
    	
    	
    	
    	
    	
    	
    	
    	
    	
    	
    	
    	
//pokecenter spawning
    if(getRandom(1, 4) == 4)
    {	
    	if(dominatingSide == 0)
    	{
    		if(xSideToSpawn > 0)
    		{
        xSpawn = getPlayerX() + getRandom(-100, 100);
        zSpawn = getPlayerZ() + getRandom(-100, 100);
        ySpawn = searchForGround(xSpawn, zSpawn);
        spawnPokecenter(xSpawn, ySpawn + 1, zSpawn + 8);
    		}
    		if(xSideToSpawn < 0)
    		{
    	xSpawn = getPlayerX() + getRandom(-100, 100);
        zSpawn = getPlayerZ() + getRandom(-100, 100);
        ySpawn = searchForGround(xSpawn, zSpawn);
        spawnPokecenter(xSpawn, ySpawn + 1, zSpawn + 8);
    		}
    	}
    	if(dominatingSide == 1)
    	{
    		if(zSideToSpawn > 0)
    		{
        xSpawn = getPlayerX() + getRandom(-100, 100);
        zSpawn = getPlayerZ() + getRandom(-100, 100);
        ySpawn = searchForGround(xSpawn, zSpawn);
        spawnPokecenter(xSpawn, ySpawn + 1, zSpawn + 8);
    		}
    		if(zSideToSpawn < 0)
    		{
    	xSpawn = getPlayerX() + getRandom(-100, 100);
        zSpawn = getPlayerZ() + getRandom(-100, 100);
        ySpawn = searchForGround(xSpawn, zSpawn);
        spawnPokecenter(xSpawn, ySpawn + 1, zSpawn + 8);
    		}}
    }		
    		
    		
    		
    	
        
        
        
        
        
        
        
        
       
// pokemons spawning 	
    
    	for(var i = 0; i < pokemonRadius50x100; i ++){
    	if(dominatingSide == 0)
    	{
    		if(xSideToSpawn > 0)
    		{
        		xSpawn = getPlayerX() + getRandom(-50, 100);
        		zSpawn = getPlayerZ() + getRandom(-100, 100);
        		ySpawn = searchForGround(xSpawn, zSpawn);
        		spawnPokemon(spawnRatesForRandom[Math.floor((Math.random()*spawnRatesForRandom.length))], xSpawn, ySpawn, zSpawn);
    		}
    		if(xSideToSpawn < 0)
    		{
    			xSpawn = getPlayerX() + getRandom(-100, 50);
        		zSpawn = getPlayerZ() + getRandom(-100, 100);
        		ySpawn = searchForGround(xSpawn, zSpawn);
        		spawnPokemon(spawnRatesForRandom[Math.floor((Math.random()*spawnRatesForRandom.length))], xSpawn, ySpawn, zSpawn);
    		}
    	}
    	if(dominatingSide == 1)
    	{
    		if(zSideToSpawn > 0)
    		{
        		xSpawn = getPlayerX() + getRandom(-100, 100);
        		zSpawn = getPlayerZ() + getRandom(-50, 100);
        		ySpawn = searchForGround(xSpawn, zSpawn);
        		spawnPokemon(spawnRatesForRandom[Math.floor((Math.random()*spawnRatesForRandom.length))], xSpawn, ySpawn, zSpawn);
    		}
    		if(zSideToSpawn < 0)
    		{
       			xSpawn = getPlayerX() + getRandom(-100, 100);
       			zSpawn = getPlayerZ() + getRandom(-100, 50);
        		ySpawn = searchForGround(xSpawn, zSpawn);
        		spawnPokemon(spawnRatesForRandom[Math.floor((Math.random()*spawnRatesForRandom.length))], xSpawn, ySpawn, zSpawn);
    		}}
    	}
    	spawnRadiusX.push(getPlayerX());
    	spawnRadiusZ.push(getPlayerZ());
    	if(spawnRadiusX.length > 2)
    	positionOfNewTwoVariables++;
    	}
    	else
    	radiusFailed = 0;
    }
	
	
	if(anvilPartDestroyed == 145 && Level.getTile(anvilX, anvilY, anvilZ) == 0)
	{
	setTile(anvilX, anvilY, anvilZ, 145);
	anvilPartDestroyed = 0;
	}
	
if(Caught < 36)
{
Caught++;
Entity.setVelX(Pokeball, 0);
Entity.setVelZ(Pokeball, 0);
Entity.setRot(Pokeball, getYaw() - 180);
}
if(Caught < 100 && Caught > 35)
{
Caught++;
Entity.setVelY(Pokeball, 0.01);
Entity.setVelY(Pokeball, 0);
Entity.setVelX(Pokeball, 0);
Entity.setVelZ(Pokeball, 0);
Entity.setRot(Pokeball, getYaw() - 180);
if(Caught == 100) 
{
	if(recentlyCatched)
	{
	clientMessage("     You caught it, tap send out to send it");
	playSound("pokeball/pokeball_caught.mp3");
	recentlyCatched = false;
	}
else if(!recentlyCatched)
{
clientMessage("     Oh, no! The Pokemon broke free!");

		if(ID_holder == 17 || ID_holder == 21 || ID_holder == 33 || ID_holder == 34 || ID_holder == 48)
		var sPokemon = Level.spawnMob(AXIS_holder[0], AXIS_holder[1], AXIS_holder[2], 19, "pokemon-textures/"+PokemonDatabase.pokemon[ID_holder].texture);
		else
		var sPokemon = Level.spawnMob(AXIS_holder[0], AXIS_holder[1], AXIS_holder[2], 11, "pokemon-textures/"+PokemonDatabase.pokemon[ID_holder].texture);
		Entity.setHealth(sPokemon, 9999999999999);
		Entity.setRenderer(sPokemon, eval(PokemonDatabase.pokemon[ID_holder].model).renderType);
		Entity.setNameTag(sPokemon, "Wild " + PokemonDatabase.pokemon[ID_holder].name + " Lv." + LVL_holder);
		Entity.setCollisionSize(sPokemon,1,2);
		if(ID_holder == 33 || ID_holder == 34)
		{
			Entity.setNameTag(sPokemon, "Wild " + PokemonDatabase.pokemon[ID_holder].name + " Lv. 50");
		}
		
ID_holder = 0;
LVL_holder = 0;
AXIS_holder[0] = 0;
AXIS_holder[1] = 0;
AXIS_holder[2] = 0;
}
killMob(Pokeball);
Caught = 100;
}
}
}



function useItem(x, y, z, item, block, side) {


   
if (item == 752 && block == 98){

Level.playSound(x,y,z,"random.anvil_use",5,15);
setTile(x,y,z,192)

}
if(item == 752 && block == 192){

Level.playSound(x,y,z,"random.anvil_use",5,15);
setTile(x,y,z,191);
}
if(item == 752 && block == 191){

Level.playSound(x,y,z,"random.anvil_use",5,15);
setTile(x,y,z,98);
}



	if(block == 34)
	{
		preventDefault();
		if(Level.getTile(x, y - 1, z) != 0)
		{
		Level.dropItem(x, y - 1, z, 1, Level.getTile(x, y - 1, z) + 555, 1);
        setTile(x, y - 1, z, 0);
		}
	}
	if(block == 29)
	{
		preventDefault();
		if(Level.getTile(x - 1, y, z) != 0)
		{
		Level.dropItem(x - 1, y, z, 1, Level.getTile(x - 1, y, z) + 557, 1);
        setTile(x - 1, y, z, 0);
		}
	}
	if(block == 25)
	{
		preventDefault();
		if(Level.getTile(x + 1, y, z) != 0)
		{
		Level.dropItem(x + 1, y, z, 1, Level.getTile(x + 1, y, z) + 555, 1);
        setTile(x + 1, y, z, 0);
		}
	}
	if(block == 33)
	{
		preventDefault();
		if(Level.getTile(x, y, z - 1) != 0)
		{
		Level.dropItem(x, y, z - 1, 1, Level.getTile(x, y, z - 1) + 555, 1);
        setTile(x, y, z - 1, 0);
		}
	}
	if(block == 28)
	{
		preventDefault();
		if(Level.getTile(x, y, z + 1) != 0)
		{
		Level.dropItem(x, y, z + 1, 1, Level.getTile(x, y, z + 1) + 555, 1);
        setTile(x, y, z + 1, 0);
		}
	}
	if(block == 93)
	{
		preventDefault();
		playSound("random/healer_ring.mp3");
	}
	if(block == 94)
	{
		preventDefault();
		playSound("random/pc_boot.wav");
	}
	if(block == 146)
	{
		preventDefault();
		Level.dropItem(x, y, z, 1, Level.getTile(x, y, z) + 555, 1);
        setTile(x, y, z, 0);
	}
	if(block == 147)
	{
		preventDefault();
		Level.dropItem(x, y, z, 1, Level.getTile(x, y, z) + 555, 1);
        setTile(x, y, z, 0);
	}
	if(block == 148)
	{
		preventDefault();
		Level.dropItem(x, y, z, 1, Level.getTile(x, y, z) + 555, 1);
        setTile(x, y, z, 0);
	}
	if(block == 149)
	{
		preventDefault();
		Level.dropItem(x, y, z, 1, Level.getTile(x, y, z) + 555, 1);
        setTile(x, y, z, 0);
	}
	if(block == 150)
	{
		preventDefault();
		Level.dropItem(x, y, z, 1, Level.getTile(x, y, z) + 555, 1);
        setTile(x, y, z, 0);
	}
	if(block == 151)
	{
		preventDefault();
		Level.dropItem(x, y, z, 1, Level.getTile(x, y, z) + 555, 1);
        setTile(x, y, z, 0);
	}

	
	
	
	if(item >= 742 && item <= 746)
	{
	if(block == 145)
	{
	setTile(x, y + 1, z, item - 627);
	removeItem(item);
	preventDefault();
	}
	}
	
	if(item == 714)
	{
	setTile(x, y + 1, z, 93);
	removeItem(item);
	preventDefault();
	}
	if(item == 715)
	{
	setTile(x, y + 1, z, 94);
	removeItem(item);
	preventDefault();
	}
	
}











function destroyBlock(x, y, z, side)
{
if(getTile(x, y, z) == 36)
{
setTile(x, y + 2, z, 0);
setTile(x + 1, y + 1, z, 0);
setTile(x - 1, y + 1, z, 0);
setTile(x, y + 1, z + 1, 0);
setTile(x, y + 1, z - 1, 0);
setTile(x, y + 1, z, 0);
}
if(getTile(x, y, z) == 34)
{
setTile(x, y - 2, z, 0);
setTile(x + 1, y - 1, z, 0);
setTile(x - 1, y - 1, z, 0);
setTile(x, y - 1, z + 1, 0);
setTile(x, y - 1, z - 1, 0);
setTile(x, y - 1, z, 0);
}
if(getTile(x, y, z) == 29)
{
setTile(x - 1, y - 1, z, 0);
setTile(x - 1, y + 1, z, 0);
setTile(x - 2, y, z, 0);
setTile(x - 1, y, z + 1, 0);
setTile(x - 1, y, z - 1, 0);
setTile(x - 1, y, z, 0);
}
if(getTile(x, y, z) == 25)
{
setTile(x + 1, y - 1, z, 0);
setTile(x + 1, y + 1, z, 0);
setTile(x + 2, y, z, 0);
setTile(x + 1, y, z + 1, 0);
setTile(x + 1, y, z - 1, 0);
setTile(x + 1, y, z, 0);
}
if(getTile(x, y, z) == 33)
{
setTile(x, y - 1, z - 1, 0);
setTile(x, y + 1, z - 1, 0);
setTile(x + 1, y, z - 1, 0);
setTile(x - 1, y, z - 1, 0);
setTile(x, y, z - 2, 0);
setTile(x, y, z - 1, 0);
}
if(getTile(x, y, z) == 28)
{
setTile(x, y - 1, z + 1, 0);
setTile(x, y + 1, z + 1, 0);
setTile(x + 1, y, z + 1, 0);
setTile(x - 1, y, z + 1, 0);
setTile(x, y, z + 2, 0);
setTile(x, y, z + 1, 0);
}
if(getTile(x, y, z) == 146 || getTile(x, y, z) == 147 || getTile(x, y, z) == 148 || getTile(x, y, z) == 149 || getTile(x, y, z) == 150 || getTile(x, y, z) == 151)
{
setTile(x, y - 1, z, 0);
setTile(x, y + 1, z, 0);
setTile(x + 1, y, z, 0);
setTile(x - 1, y, z, 0);
setTile(x, y, z + 1, 0);
setTile(x, y, z - 1, 0);
}
if(getTile(x, y, z) == 115 || getTile(x, y, z) == 116 || getTile(x, y, z) == 117 || getTile(x, y, z) == 118 || getTile(x, y, z) == 119)
{
if(Player.getCarriedItem() != 736 && Player.getCarriedItem() != 737 && Player.getCarriedItem() != 738 && Player.getCarriedItem() != 739 && Player.getCarriedItem() != 740)
{
Level.dropItem(x, y, z, 1, Level.getTile(x, y, z) + 627, 1);
setTile(x, y - 1, z + 1, 0);
setTile(x, y, z + 1, 0);
setTile(x, y - 1, z, 0);
}
}


if(Player.getCarriedItem() >= 736 && Player.getCarriedItem() <= 740)
{
if(getTile(x, y, z) == 145)
{
Level.dropItem(x, y, z, 1, Level.getTile(x, y + 1, z - 1) + 606, 1);
setTile(x, y + 1, z - 1, 0);
anvilX = x;
anvilY = y;
anvilZ = z;
anvilPartDestroyed = 145;
}
if(getTile(x, y, z) == 145)
{
Level.dropItem(x, y, z, 1, Level.getTile(x, y, z - 1) + 606, 1);
setTile(x, y, z - 1, 0);
anvilX = x;
anvilY = y;
anvilZ = z;
anvilPartDestroyed = 145;
}
if(getTile(x, y, z) == 145)
{
Level.dropItem(x, y, z, 1, Level.getTile(x, y + 1, z) + 606, 1);
setTile(x, y + 1, z, 0);
anvilX = x;
anvilY = y;
anvilZ = z;
anvilPartDestroyed = 145;
}
if(getTile(x, y, z) == 115 || getTile(x, y, z) == 116 || getTile(x, y, z) == 117 || getTile(x, y, z) == 118 || getTile(x, y, z) == 119)
{
Level.dropItem(x, y, z, 1, Level.getTile(x, y, z) + 606, 1);
}
}


if(Player.getCarriedItem()==736)
{
if(Player.getCarriedItemData() < 19)
Entity.setCarriedItem(getPlayerEnt(), 736, Player.getCarriedItemCount(), Player.getCarriedItemData() + 1);
else{
Level.playSoundEnt(getPlayerEnt(), "random.break", 100, 100);
Player.clearInventorySlot(Player.getSelectedSlotId());
}
}

if(Player.getCarriedItem()==737)
{
if(Player.getCarriedItemData() < 43)
Entity.setCarriedItem(getPlayerEnt(), 737, Player.getCarriedItemCount(), Player.getCarriedItemData() + 1);
else{
Level.playSoundEnt(getPlayerEnt(), "random.break", 100, 100);
Player.clearInventorySlot(Player.getSelectedSlotId());
}
}

if(Player.getCarriedItem()==738)
{
if(Player.getCarriedItemData() < 83)
Entity.setCarriedItem(getPlayerEnt(), 738, Player.getCarriedItemCount(), Player.getCarriedItemData() + 1);
else{
Level.playSoundEnt(getPlayerEnt(), "random.break", 100, 100);
Player.clearInventorySlot(Player.getSelectedSlotId());
}
}

if(Player.getCarriedItem()==739)
{
if(Player.getCarriedItemData() < 10)
Entity.setCarriedItem(getPlayerEnt(), 739, Player.getCarriedItemCount(), Player.getCarriedItemData() + 1);
else{
Level.playSoundEnt(getPlayerEnt(), "random.break", 100, 100);
Player.clearInventorySlot(Player.getSelectedSlotId());
}
}

if(Player.getCarriedItem()==740)
{
if(Player.getCarriedItemData() < 173)
Entity.setCarriedItem(getPlayerEnt(), 740, Player.getCarriedItemCount(), Player.getCarriedItemData() + 1);
else{
Level.playSoundEnt(getPlayerEnt(), "random.break", 100, 100);
Player.clearInventorySlot(Player.getSelectedSlotId());
}
}



}




function attackHook(attacker, victim)
{
	if(entityIsPokemon(victim, true) && Player.getCarriedItem() == 729)
	{
	clientMessage("   " + PokemonDatabase.pokemon[getIdFromNameTag(victim)].name + " - " + PokemonDatabase.pokemon[getIdFromNameTag(victim)].desc);
	}
		
	if(entityIsPokemon(victim, true) && pokemonIsWild(victim) && Caught == 100)
	{
		if(Player.getCarriedItem() >= 716 && Player.getCarriedItem() <= 719)
		{
			if(pokeId1 == 0 || pokeId2 == 0 || pokeId3 == 0 || pokeId4 == 0 || pokeId5 == 0 || pokeId6 == 0)
			{
		    	catchPokemon(victim, Player.getCarriedItem(), pokeMaxHP[getLvlFromNameTag(victim)]);
			}
		}
	}
	
	if(entityIsPokemon(victim, false))
	{
	preventDefault();
	}
}







// code is up
/* functions, renders and all other stuff below
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*/





function Base64Decode(byteArray, Path)
{
	try
	{
	var File = new java.io.File(Path);
	if(!File.exists())
		{
	File.createNewFile();
	var Stream = new java.io.FileOutputStream(File);
	Stream.write(byteArray);
	Stream.close();
	}
	}
	catch(err)
	{
		print(err);
	}
}



function searchBedrockHeight(x, z) {
// checks at given x and z, height of bedrock (dont ask why)
for(bedrockHeight = -999; bedrockHeight < 9; bedrockHeight++) {
if(Level.getTile(x, bedrockHeight, z) == 7) {
break;
}
}
return bedrockHeight;
}





function searchForGround(x, z) {
// checks at given x and z, height of surface
for(currentHeight = searchBedrockHeight(x, z); currentHeight < 999; currentHeight++) {
if(Level.getTile(x, currentHeight, z) == 0 && Level.getTile(x, currentHeight + 15, z) == 0) {
break;
}
}
return currentHeight;
}





function getRandom(min,max){
max=max-min + 1;
var toReturn = Math.floor((Math.random()*max)+min);
return toReturn;
}




function getImageFromTexturePack(imagePath){
var BitmapFactory = android.graphics.BitmapFactory;
var MyPictureStream = ModPE.openInputStreamFromTexturePack(imagePath);
var DecodedPic = new BitmapFactory.decodeStream(MyPictureStream);
var MyDrawable = new android.graphics.drawable.BitmapDrawable(DecodedPic);
return MyDrawable;
}


function loadResources(){
inventoryDrawable = loadDrawable(path+"res/gui/inv.png");
emptyDrawable = loadDrawable(path+"res/icons/empty.png");
frameDrawable = loadDrawable(path+"res/gui/inv_frame.png");
saveDrawable = loadDrawable(path+"res/gui/btn_save.png");
}





function ifRadiusPassed()
{
//this function checks if player has walked new 100 steps into one direction
	for(var i = positionOfNewTwoVariables; i < spawnRadiusX.length; i++)
	{
		
		if(getPlayerX() - spawnRadiusX[i] > 100 || getPlayerX() - spawnRadiusX[i] < -100)
		{
		dominatingSide = 0;
		xSideToSpawn = getPlayerX() - spawnRadiusX[i];
		continue;
		}
		if(getPlayerZ() - spawnRadiusZ[i] > 100 || getPlayerZ() - spawnRadiusZ[i] < -100)
		{
		dominatingSide = 1;
		zSideToSpawn = getPlayerZ() - spawnRadiusZ[i];
		continue;
		}
		else
		{
		radiusFailed = 1;
		break;
		}
	}
}





function registerPokemon(name,model,texture,desc,move1,move2,move3,move4,spawn_rate,catch_rate,icon,sound){
pokemonNames.push(name);
pokemonModels.push(model);
pokemonTextures.push(texture);
pokemonDescs.push(desc);
pokemonMove1.push(move1);
pokemonMove2.push(move2);
pokemonMove3.push(move3);
pokemonMove4.push(move4);
pokemonSpawnRates.push(spawn_rate);
pokemonCatchRates.push(catch_rate);
pokemonIcons.push(loadDrawable(path+"res/icons/"+icon));
pokemonSounds.push(sound);
}





	
function loadAllPokemon(){
	var obj = JSON.parse(loadTextFile(path+"/res/db.json"));
	PokemonDatabase = obj;
}
function loadPokemon(pkmn){
	var id = pkmn.id;
	var obj = JSON.parse(loadTextFile(path+"/res/db.json"));
	pkmn.name = obj.pokemon[id].name;
	pkmn.nId = obj.pokemon[id].national_id;
	pkmn.model = eval(obj.pokemon[id].model);
	pkmn.texture = obj.pokemon[id].texture;
	pkmn.desc = obj.pokemon[id].desc;
	pkmn.spawnR = obj.pokemon[id].spawn_rate;
	pkmn.catchR = obj.pokemon[id].catch_rate;
	pkmn.icon = loadDrawable(path+"res/icons/"+obj.pokemon[id].icon);
	pkmn.sound = obj.pokemon[id].sound;
	pkmn.evolution = obj.pokemon[id].evolution;
	pkmn.skills = obj.pokemon[id].skills;
	pkmn.types = obj.pokemon[id].types;
	pkmn.base = obj.pokemon[id].base;
	
	return pkmn;
}
function getPokemon(id){
	for(var i in PokemonDatabase.pokemon){
		if(i.national_id==id){
			return i;
		}
	}
	return null;
}


function loadSave(){
	var filePath = android.os.Environment.getExternalStorageDirectory().getPath()+"/games/com.mojang/minecraftworlds/"+Level.getWorldDir()+"/";	
	var file = new java.io.File(filePath, "pokedroid.json");
	if(!file.exists()){
		file.mkdirs;
		file.createNewFile();
		var write = new java.io.OutputStreamWriter(new java.io.FileOutputStream(file));
		write.append(readFile(path+"/res/save_template.json"));
		write.close();
	}
	else{
		
	}
}



function createTextFile(name, variable)
{
var worldPath = android.os.Environment.getExternalStorageDirectory().getPath()+"/games/com.mojang/minecraftworlds/"+Level.getWorldDir()+"/";	
var allWorldsPath = android.os.Environment.getExternalStorageDirectory().getAbsolutePath() + "/games/com.mojang/minecraftWorlds";
java.io.File(allWorldsPath).mkdirs();
var newFile=new java.io.File(worldPath, name);
newFile.createNewFile();
var write=new java.io.OutputStreamWriter(new java.io.FileOutputStream(newFile));
write.append(variable.toString());
write.close();
}


function readFile(p){
try {
var filelo = new java.io.File(p);
var strin = new java.lang.StringBuilder();
var fos = new java.io.FileInputStream(filelo);
var jk;
var o;
while((jk = fos.read()) != -1)
strin.append(java.lang.Character(jk));
o = strin.toString();
    fos.close();
	}
	catch(err){return null}
	return o;
}


function loadTextFile(name)
{
var worldPath = android.os.Environment.getExternalStorageDirectory().getPath()+"/games/com.mojang/minecraftworlds/"+Level.getWorldDir()+"/";	
try {
var filelo = new java.io.File(worldPath + name);
var strin = new java.lang.StringBuilder();
var fos = new java.io.FileInputStream(filelo);
var jk;
while((jk = fos.read()) != -1)
strin.append(java.lang.Character(jk));
loader = strin.toString();
    fos.close();
	}
	catch(err){return null}
	return loader;
}




function itemChangedHook(pItem,cItem){
if(pItem==716 || pItem==717 || pItem==718 || pItem==719){
playSound("pokeball/pokeball_shrink.mp3");
}
if(cItem==716 || cItem==717 || cItem==718 || cItem==719){
playSound("pokeball/pokeball_grow.mp3");
}

}


function getPokemonIdByTexture(tex){
for(var i=0;i<PokemonDatabase.pokemon.length;i++){
if(PokemonDatabase.pokemon[i].texture==tex){
break;
return true;
}
}
}




function entityIsPokemon(ent, other)
{
	if(other)
	{
		if(Entity.getMobSkin(ent) == "pokeballs/pokeball-normal.png" || Entity.getMobSkin(ent) == "pokeballs/pokeball-great.png" || Entity.getMobSkin(ent) == "pokeballs/pokeball-ultra.png" || Entity.getMobSkin(ent) == "pokeballs/pokeball-master.png")
		{
			return false;
		}
	}
	if(Entity.getEntityTypeId(ent) == 11 && Entity.getMobSkin(ent) != "mob/cow.png")
	{
		return true;
	}
	if(Entity.getEntityTypeId(ent) == 19 && Entity.getMobSkin(ent) != "mob/bat.png")
	{
		return true;
	}
	else
	{
		return false;
	}
}


function pokemonIsWild(ent)
{
	var text = Entity.getNameTag(ent);
    var id = text.split(' ');
	if(id[0] == "Wild")
	return true;
	else
	return false;
}





function calculateSpawningPossibility()
{
    for(var numberOfArrayNumber = 1; numberOfArrayNumber <= lengthOfSpawnRates; numberOfArrayNumber++)
    {
        for(var valueOfSpawnRate = 1; valueOfSpawnRate <= PokemonDatabase.pokemon[numberOfArrayNumber].spawnR; valueOfSpawnRate++)
        {
            spawnRatesForRandom.push(numberOfArrayNumber);
        }
    }
}




function calculateCatchRate(id, hp, item) 
{
	var catchRatesForRandom = [];
	for(var i = 1; i <= Math.round(PokemonDatabase.pokemon[id].catchR * 30 / hp + item); i++)
	{
		catchRatesForRandom.push(1);
	}
	
	for(var a = 1; a <= 100; a++)
	{
		catchRatesForRandom.push(0);
	}
	
	return catchRatesForRandom[getRandom(0, 99)];
}





function getLvlFromNameTag(ent)
{
var i = 0;
var text = Entity.getNameTag(ent);
var lvl = text.split('.');
i = lvl[1];
return i;
}




function getExpByLvl(lvl)
{
	var e = 0;
	e = lvl - 1;
	return pokeMaxExp[e];
}




function getIdFromText(textLine)
{
var text = textLine;
if(text!=null && text!=""){
var id = text.split(' ');
for(var i = 0; i <= PokemonDatabase.pokemon.length; i++)
{
    if(PokemonDatabase.pokemon[i].name == id[1])
	{
	return i;
	break;
	}
}
}
}




function getIdFromNameTag(ent)
{
var text = Entity.getNameTag(ent);
if(text!=null && text!=""){
var id = text.split(' ');
for(var i = 0; i <= PokemonDatabase.pokemon.length; i++)
{
    if(PokemonDatabase.pokemon[i].name == id[1])
	{
	return i;
	break;
	}
}
}
}


function sendOutPokemon(id, lvl)
{
pokemonHolder = Level.spawnMob(getPlayerX(), getPlayerY() + 1, getPlayerZ(), 11, "pokemon-textures/" + PokemonDatabase.pokemon[id].texture);
Entity.setHealth(pokemonHolder, 9999999999999);
Entity.setRenderer(pokemonHolder, eval(PokemonDatabase.pokemon[id].model).renderType);
Entity.setNameTag(pokemonHolder, PokemonDatabase.pokemon[id].name + " Lv."+lvl);
Entity.setCollisionSize(pokemonHolder, 1, 2);
setVelX(pokemonHolder, 0.72 * Math.cos((getYaw()+90)*(Math.PI/180))); 
setVelZ(pokemonHolder, 0.72 * Math.sin((getYaw()+90)*(Math.PI/180)));
if(bugFixed)
playSound("pokeball/pokeball_out.mp3");
}



function returnPokemon()
{
killMob(pokemonHolder);
playSound("pokeball/pokeball_return.mp3");
}





function catchPokemon(ent, item, hp)
{
	removeItem(item);
	Pokeball = Level.spawnMob(Entity.getX(ent), Entity.getY(ent) + 2, Entity.getZ(ent), 11, pokeballTextures[item]);
    Entity.setRenderer(Pokeball, PokeballRenderer.renderType);
	if(calculateCatchRate(getIdFromNameTag(ent), hp, pokeballStrength[item]) == 1)
	{
		recentlyCatched = true;
		switch(0)
        {
            case pokeId1:
            pokeId1 = getIdFromNameTag(ent);
			pokeHP1 = hp;
			pokeLvl1 = getLvlFromNameTag(ent);
			pokeExp1 = getExpByLvl(pokeLvl1);
			refreshPokeInv();
            break;

            case pokeId2:
            pokeId2 = getIdFromNameTag(ent);
			pokeHP2 = hp;
			pokeLvl2 = getLvlFromNameTag(ent);
			pokeExp2 = getExpByLvl(pokeLvl2);
			refreshPokeInv();
            break;
			
            case pokeId3:
            pokeId3 = getIdFromNameTag(ent);
			pokeHP3 = hp;
			pokeLvl3 = getLvlFromNameTag(ent);
			pokeExp3 = getExpByLvl(pokeLvl3);
			refreshPokeInv();
            break;
			
            case pokeId4:
            pokeId4 = getIdFromNameTag(ent);
			pokeHP4 = hp;
			pokeLvl4 = getLvlFromNameTag(ent);
			pokeExp4 = getExpByLvl(pokeLvl4);
			refreshPokeInv();
            break;
			
            case pokeId5:
            pokeId5 = getIdFromNameTag(ent);
			pokeHP5 = hp;
			pokeLvl5 = getLvlFromNameTag(ent);
			pokeExp5 = getExpByLvl(pokeLvl5);
			refreshPokeInv();
            break;
			
            case pokeId6:
            pokeId6 = getIdFromNameTag(ent);
			pokeHP6 = hp;
			pokeLvl6 = getLvlFromNameTag(ent);
			pokeExp6 = getExpByLvl(pokeLvl6);
			refreshPokeInv();
            break;
        }
	}
	else
	{
	ID_holder = getIdFromNameTag(ent);
	LVL_holder = getLvlFromNameTag(ent);
	AXIS_holder[0] = Entity.getX(ent);
	AXIS_holder[1] = Entity.getY(ent);
	AXIS_holder[2] = Entity.getZ(ent);
	}
	Caught = 0;
	killMob(ent);
	playSound("pokeball/pokeball_catching.mp3");
}


function spawnPokemon(id,x,y,z){
	//wont allow to spawn in water or lava
	if(getTile(x, y-1, z) != 8 && getTile(x, y-1, z) != 9 && getTile(x, y-1, z) != 10 && getTile(x, y-1, z) != 11) 
	{
	//randomly calculates how many same type pokemons will spawn
	for(var pokemonsToSpawn = 1; pokemonsToSpawn <= countSpawnPokemon[getRandom(0, 4)]; pokemonsToSpawn++)
		{
		if(id == 17 || id == 21 || id == 33 || id == 34 || id == 48)
		var sPokemon = Level.spawnMob(x + pokemonsToSpawn - 1, y, z, 19, "pokemon-textures/"+PokemonDatabase.pokemon[id].texture);
		else
		var sPokemon = Level.spawnMob(x + pokemonsToSpawn - 1, y, z, 11, "pokemon-textures/"+PokemonDatabase.pokemon[id].texture);
		Entity.setHealth(sPokemon, 9999999999999);
		Entity.setRenderer(sPokemon, eval(PokemonDatabase.pokemon[id].model).renderType);
		rLevel = Math.floor((Math.random()*70)+1);
		Entity.setNameTag(sPokemon, "Wild " + PokemonDatabase.pokemon[id].name + " Lv."+rLevel);
		Entity.setCollisionSize(sPokemon,1,2);
		if(id == 33 || id == 34)
		{
			Entity.setNameTag(sPokemon, "Wild " + PokemonDatabase.pokemon[id].name + " Lv. 50");
			break;
		}
		}
	}
}








function removeItem(item)
{
if(Player.getCarriedItemCount()>=1 && getCarriedItem()==item){
addItemInventory(item, -1);
}
else if(Player.getCarriedItemCount()==1 && getCarriedItem()==item){
Entity.setCarriedItem(getPlayerEnt(),0,0,0)
}
}





function killMob(ent)
{
setPosition(ent, 0, getPlayerY() - 1000, 0);
Entity.remove(ent);
}





function loadDrawable(FILE_PATH){
var drawableImg = new android.graphics.BitmapFactory.decodeFile(FILE_PATH);
var drawable = new android.graphics.drawable.BitmapDrawable(drawableImg);
return drawable;
}




function playSound(mName){
var file = new java.io.File(path+"res/sounds/"+mName);

MediaPlayer.reset();
if(file.exists()){
MediaPlayer.setDataSource(path+"res/sounds/"+mName);
MediaPlayer.prepare();
MediaPlayer.start();
}
}


















function spawnApricornTree(x, y, z)
{
// in case if random coordinates are at cactus, cugar cane or tall grass
if(getTile(x, y-1, z) != 8 && getTile(x, y-1, z) != 9 && getTile(x, y-1, z) != 10 && getTile(x, y-1, z) != 11 && getTile(x, y-1, z) != 18)
{
if(getTile(x, y-1, z) == 31 || getTile(x, y - 1, z) == 83 || getTile(x, y - 1, z) == 81)
y--;
if(getTile(x, y-1, z) == 31 || getTile(x, y - 1, z) == 83 || getTile(x, y - 1, z) == 81)
y--;
if(getTile(x, y-1, z) == 31 || getTile(x, y - 1, z) == 83 || getTile(x, y - 1, z) == 81)
y--;
setTile(x, y - 1, z, 2);
setTile(x, y, z, 36);
setTile(x, y + 2, z, 34);
setTile(x + 1, y + 1, z, 29);
setTile(x - 1, y + 1, z, 25);
setTile(x, y + 1, z + 1, 33);
setTile(x, y + 1, z - 1, 28);
setTile(x, y + 1, z, getRandom(143, 149));
}
}





function spawnPokecenter(x, y, z)
{
for(var ox = -7; ox <= 7; ox++)
{
    	for(var oz = -13; oz <= -2; oz++)
		{
			setTile(x + ox, y - 2, z + oz, 2);
			setTile(x + ox, y - 3, z + oz, 3);
		}
	}

for(var ox = -7; ox <= 7; ox++)
{
	for(var oy = -1; oy <= 5; oy++)
	{
    	for(var oz = -13; oz <= -2; oz++)
		{
			setTile(x + ox, y + oy, z + oz, 0);
		}
	}
}


setTile(x, y - 2, z - 3, 5);
setTile(x, y - 2, z - 4, 5);
setTile(x, y - 2, z - 5, 5);
setTile(x, y - 2, z - 6, 5);
setTile(x, y - 2, z - 7, 5);
setTile(x, y - 2, z - 8, 5);
setTile(x, y - 2, z - 9, 5);
setTile(x, y - 2, z - 10, 5);
setTile(x, y - 2, z - 11, 5);
setTile(x - 1, y - 2, z - 3, 5);
setTile(x - 1, y - 2, z - 4, 5);
setTile(x - 1, y - 2, z - 5, 5);
setTile(x - 1, y - 2, z - 6, 5);
setTile(x - 1, y - 2, z - 7, 5);
setTile(x - 1, y - 2, z - 8, 5);
setTile(x - 1, y - 2, z - 9, 5);
setTile(x - 1, y - 2, z - 10, 5);
setTile(x - 1, y - 2, z - 11, 5);
setTile(x + 1, y - 2, z - 3, 5);
setTile(x + 1, y - 2, z - 4, 5);
setTile(x + 1, y - 2, z - 5, 5);
setTile(x + 1, y - 2, z - 6, 5);
setTile(x + 1, y - 2, z - 7, 5);
setTile(x + 1, y - 2, z - 8, 5);
setTile(x + 1, y - 2, z - 9, 5);
setTile(x + 1, y - 2, z - 10, 5);
setTile(x + 1, y - 2, z - 11, 5);
setTile(x + 2, y - 2, z - 5, 5);
setTile(x + 2, y - 2, z - 6, 5);
setTile(x + 2, y - 2, z - 7, 5);
setTile(x + 2, y - 2, z - 8, 5);
setTile(x + 2, y - 2, z - 9, 5);
setTile(x + 2, y - 2, z - 10, 5);
setTile(x + 2, y - 2, z - 11, 5);
setTile(x + 3, y - 2, z - 5, 5);
setTile(x + 3, y - 2, z - 6, 5);
setTile(x + 3, y - 2, z - 7, 5);
setTile(x + 3, y - 2, z - 8, 5);
setTile(x + 3, y - 2, z - 9, 5);
setTile(x + 3, y - 2, z - 10, 5);
setTile(x + 3, y - 2, z - 11, 5);
setTile(x + 4, y - 2, z - 5, 5);
setTile(x + 4, y - 2, z - 6, 5);
setTile(x + 4, y - 2, z - 7, 5);
setTile(x + 4, y - 2, z - 8, 5);
setTile(x + 4, y - 2, z - 9, 5);
setTile(x + 4, y - 2, z - 10, 5);
setTile(x + 4, y - 2, z - 11, 5);
setTile(x + 5, y - 2, z - 5, 5);
setTile(x + 5, y - 2, z - 6, 5);
setTile(x + 5, y - 2, z - 7, 5);
setTile(x + 5, y - 2, z - 8, 5);
setTile(x + 5, y - 2, z - 9, 5);
setTile(x + 5, y - 2, z - 10, 5);
setTile(x + 5, y - 2, z - 11, 5);
setTile(x - 2, y - 2, z - 5, 5);
setTile(x - 2, y - 2, z - 6, 5);
setTile(x - 2, y - 2, z - 7, 5);
setTile(x - 2, y - 2, z - 8, 5);
setTile(x - 2, y - 2, z - 9, 5);
setTile(x - 2, y - 2, z - 10, 5);
setTile(x - 2, y - 2, z - 11, 5);
setTile(x - 3, y - 2, z - 5, 5);
setTile(x - 3, y - 2, z - 6, 5);
setTile(x - 3, y - 2, z - 7, 5);
setTile(x - 3, y - 2, z - 8, 5);
setTile(x - 3, y - 2, z - 9, 5);
setTile(x - 3, y - 2, z - 10, 5);
setTile(x - 3, y - 2, z - 11, 5);
setTile(x - 4, y - 2, z - 5, 5);
setTile(x - 4, y - 2, z - 6, 5);
setTile(x - 4, y - 2, z - 7, 5);
setTile(x - 4, y - 2, z - 8, 5);
setTile(x - 4, y - 2, z - 9, 5);
setTile(x - 4, y - 2, z - 10, 5);
setTile(x - 4, y - 2, z - 11, 5);
setTile(x - 5, y - 2, z - 5, 5);
setTile(x - 5, y - 2, z - 6, 5);
setTile(x - 5, y - 2, z - 7, 5);
setTile(x - 5, y - 2, z - 8, 5);
setTile(x - 5, y - 2, z - 9, 5);
setTile(x - 5, y - 2, z - 10, 5);
setTile(x - 5, y - 2, z - 11, 5);
setTile(x + 5, y - 1, z - 4, 155);
setTile(x + 4, y - 1, z - 4, 155);
setTile(x + 3, y - 1, z - 4, 155);
setTile(x + 2, y - 1, z - 4, 155);
setTile(x - 5, y - 1, z - 4, 155);
setTile(x - 4, y - 1, z - 4, 155);
setTile(x - 3, y - 1, z - 4, 155);
setTile(x - 2, y - 1, z - 4, 155);
setTile(x + 6, y - 1, z - 5, 155);
setTile(x + 6, y - 1, z - 6, 155);
setTile(x + 6, y - 1, z - 7, 155);
setTile(x + 6, y - 1, z - 8, 155);
setTile(x + 6, y - 1, z - 9, 155);
setTile(x + 6, y - 1, z - 10, 155);
setTile(x + 6, y - 1, z - 11, 155);
setTile(x - 6, y - 1, z - 5, 155);
setTile(x - 6, y - 1, z - 6, 155);
setTile(x - 6, y - 1, z - 7, 155);
setTile(x - 6, y - 1, z - 8, 155);
setTile(x - 6, y - 1, z - 9, 155);
setTile(x - 6, y - 1, z - 10, 155);
setTile(x - 6, y - 1, z - 11, 155);
setTile(x - 5, y - 1, z - 12, 155);
setTile(x - 4, y - 1, z - 12, 155);
setTile(x - 3, y - 1, z - 12, 155);
setTile(x - 2, y - 1, z - 12, 155);
setTile(x - 1, y - 1, z - 12, 155);
setTile(x, y - 1, z - 12, 155);
setTile(x + 1, y - 1, z - 12, 155);
setTile(x + 2, y - 1, z - 12, 155);
setTile(x + 3, y - 1, z - 12, 155);
setTile(x + 4, y - 1, z - 12, 155);
setTile(x + 5, y - 1, z - 12, 155);
setTile(x + 1, y - 1, z - 9, 155);
setTile(x, y - 1, z - 9, 155);
setTile(x - 1, y - 1, z - 9, 155);
setTile(x - 2, y - 1, z - 9, 155);
setTile(x - 3, y - 1, z - 9, 155);
setTile(x - 4, y - 1, z - 9, 155);
setTile(x - 5, y - 1, z - 9, 155);
setTile(x + 1, y - 1, z - 10, 155);
setTile(x + 1, y - 1, z - 11, 155);
setTile(x + 1, y, z - 9, 171, 14);
setTile(x, y, z - 9, 171, 14);
setTile(x - 1, y, z - 9, 171, 14);
setTile(x - 2, y, z - 9, 171, 14);
setTile(x - 3, y, z - 9, 171, 14);
setTile(x - 4, y, z - 9, 171, 14);
setTile(x - 5, y, z - 9, 171, 14);
setTile(x + 1, y, z - 10, 171, 14);
setTile(x + 1, y, z - 11, 171, 14);
setTile(x - 6, y - 1, z - 12, 35, 15);
setTile(x - 6, y, z - 12, 35, 15);
setTile(x - 6, y + 1, z - 12, 35, 15);
setTile(x - 6, y + 2, z - 12, 35, 15);
setTile(x + 6, y - 1, z - 12, 35, 15);
setTile(x + 6, y, z - 12, 35, 15);
setTile(x + 6, y + 1, z - 12, 35, 15);
setTile(x + 6, y + 2, z - 12, 35, 15);
setTile(x + 6, y - 1, z - 4, 35, 15);
setTile(x + 6, y, z - 4, 35, 15);
setTile(x + 6, y + 1, z - 4, 35, 15);
setTile(x + 6, y + 2, z - 4, 35, 15);
setTile(x - 6, y - 1, z - 4, 35, 15);
setTile(x - 6, y, z - 4, 35, 15);
setTile(x - 6, y + 1, z - 4, 35, 15);
setTile(x - 6, y + 2, z - 4, 35, 15);
setTile(x + 5, y,
z - 4, 35, 15);
setTile(x + 4, y, z - 4, 35, 15);
setTile(x + 3, y, z - 4, 35, 15);
setTile(x + 2, y, z - 4, 35, 15);
setTile(x - 5, y, z - 4, 35, 15);
setTile(x - 4, y, z - 4, 35, 15);
setTile(x - 3, y, z - 4, 35, 15);
setTile(x - 2, y, z - 4, 35, 15);
setTile(x + 6, y, z - 5, 35, 15);
setTile(x + 6, y, z - 6, 35, 15);
setTile(x + 6, y, z - 7, 35, 15);
setTile(x + 6, y, z - 8, 35, 15);
setTile(x + 6, y, z - 9, 35, 15);
setTile(x + 6, y, z - 10, 35, 15);
setTile(x + 6, y, z - 11, 35, 15);
setTile(x - 6, y, z - 5, 35, 15);
setTile(x - 6, y, z - 6, 35, 15);
setTile(x - 6, y, z - 7, 35, 15);
setTile(x - 6, y, z - 8, 35, 15);
setTile(x - 6, y, z - 9, 35, 15);
setTile(x - 6, y, z - 10, 35, 15);
setTile(x - 6, y, z - 11, 35, 15);
setTile(x - 5, y, z - 12, 35, 15);
setTile(x - 4, y, z - 12, 35, 15);
setTile(x - 3, y, z - 12, 35, 15);
setTile(x - 2, y, z - 12, 35, 15);
setTile(x - 1, y, z - 12, 35, 15);
setTile(x, y, z - 12, 35, 15);
setTile(x + 1, y, z - 12, 35, 15);
setTile(x + 2, y, z - 12, 35, 15);
setTile(x + 3, y, z - 12, 35, 15);
setTile(x + 4, y, z - 12, 35, 15);
setTile(x + 5, y, z - 12, 35, 15);
setTile(x + 2, y - 1, z - 3, 35, 15);
setTile(x + 2, y, z - 3, 35, 15);
setTile(x + 2, y + 1, z - 3, 35, 15);
setTile(x + 2, y + 2, z - 3, 35, 15);
setTile(x - 2, y - 1, z - 3, 35, 15);
setTile(x - 2, y, z - 3, 35, 15);
setTile(x - 2, y + 1, z - 3, 35, 15);
setTile(x - 2, y + 2, z - 3, 35, 15);
setTile(x - 1, y + 3, z - 3, 35, 15);
setTile(x + 1, y + 3, z - 3, 35, 15);
setTile(x - 3, y + 1, z - 4, 155);
setTile(x + 3, y + 1, z - 4, 155);
setTile(x + 5, y + 2, z - 4, 155);
setTile(x + 4, y + 2, z - 4, 155);
setTile(x + 3, y + 2, z - 4, 155);
setTile(x + 2, y + 2, z - 4, 155);
setTile(x - 5, y + 2, z - 4, 155);
setTile(x - 4, y + 2, z - 4, 155);
setTile(x - 3, y + 2, z - 4, 155);
setTile(x - 2, y + 2, z - 4, 155);
setTile(x + 6, y + 2, z - 5, 155);
setTile(x + 6, y + 2, z - 6, 155);
setTile(x + 6, y + 2, z - 7, 155);
setTile(x + 6, y + 2, z - 8, 155);
setTile(x + 6, y + 2, z - 9, 155);
setTile(x + 6, y + 2, z - 10, 155);
setTile(x + 6, y + 2, z - 11, 155);
setTile(x - 6, y + 2, z - 5, 155);
setTile(x - 6, y + 2, z - 6, 155);
setTile(x - 6, y + 2, z - 7, 155);
setTile(x - 6, y + 2, z - 8, 155);
setTile(x - 6, y + 2, z - 9, 155);
setTile(x - 6, y + 2, z - 10, 155);
setTile(x - 6, y + 2, z - 11, 155);
setTile(x - 5, y + 2, z - 12, 155);
setTile(x - 4, y + 2, z - 12, 155);
setTile(x - 3, y + 2, z - 12, 155);
setTile(x - 2, y + 2, z - 12, 155);
setTile(x - 1, y + 2, z - 12, 155);
setTile(x, y + 2, z - 12, 155);
setTile(x + 1, y + 2, z - 12, 155);
setTile(x + 2, y + 2, z - 12, 155);
setTile(x + 3, y + 2, z - 12, 155);
setTile(x + 4, y + 2, z - 12, 155);
setTile(x + 5, y + 2, z - 12, 155);
setTile(x + 1, y + 2, z - 3, 155);
setTile(x, y + 2, z - 3, 155);
setTile(x - 1, y + 2, z - 3, 155);
setTile(x + 2, y + 1, z - 4, 155);
setTile(x -2, y + 1, z - 4, 155);
setTile(x - 1, y - 1, z - 3, 102);
setTile(x + 1, y - 1, z - 3, 102);
setTile(x - 1, y, z - 3, 102);
setTile(x + 1, y, z - 3, 102);
setTile(x - 1, y + 1, z - 3, 102);
setTile(x + 1, y + 1, z - 3, 102);
setTile(x, y + 1, z - 3, 102);
setTile(x - 6, y + 1, z - 7, 102);
setTile(x - 6, y + 1, z - 8, 102);
setTile(x - 6, y + 1, z - 9, 102);
setTile(x + 6, y + 1, z - 7, 102);
setTile(x + 6, y + 1, z - 8, 102);
setTile(x + 6, y + 1, z - 9, 102);
setTile(x + 1, y + 1, z - 12, 102);
setTile(x, y + 1, z - 12, 102);
setTile(x - 1, y + 1, z - 12, 102);
setTile(x + 4, y + 1, z - 4, 102);
setTile(x - 4, y + 1, z - 4, 102);
setTile(x + 5, y + 1, z - 4, 102);
setTile(x - 5, y + 1, z - 4, 102);
setTile(x, y + 3, z - 3, 159, 9);
setTile(x, y + 4, z - 3, 35, 14);
setTile(x - 1, y + 4, z - 3, 35, 14);
setTile(x + 1, y + 4, z - 3, 35, 14);
setTile(x + 2, y - 1, z - 11, 47);
setTile(x + 3, y - 1, z - 11, 47);
setTile(x + 2, y + 1, z - 11, 47);
setTile(x + 3, y + 1, z - 11, 47);
setTile(x + 2, y, z - 11, 47);
setTile(x + 3, y, z - 11, 47);
setTile(x + 5, y + 1, z - 12, 155);
setTile(x + 4, y  + 1, z - 12, 155);
setTile(x + 3, y + 1, z - 12, 155);
setTile(x + 2, y  + 1, z - 12, 155);
setTile(x - 5, y + 1, z - 12, 155);
setTile(x - 4, y  + 1, z - 12, 155);
setTile(x - 3, y + 1, z - 12, 155);
setTile(x - 2, y  + 1, z - 12, 155);
setTile(x + 6, y + 1, z - 5, 155);
setTile(x + 6, y  + 1, z - 6, 155);
setTile(x - 6, y + 1, z - 5, 155);
setTile(x - 6, y  + 1, z - 6, 155);
setTile(x + 6, y + 1, z - 10, 155);
setTile(x + 6, y  + 1, z - 11, 155);
setTile(x - 6, y + 1, z - 10, 155);
setTile(x - 6, y  + 1, z - 11, 155);
setTile(x, y + 2, z - 4, 35, 14);
setTile(x, y + 2, z - 5, 35, 14);
setTile(x, y + 2, z - 6, 35, 14);
setTile(x, y + 2, z - 7, 35, 14);
setTile(x, y + 2, z - 8, 89);
setTile(x, y + 2, z - 9, 35, 14);
setTile(x, y + 2, z - 10, 35, 14);
setTile(x, y + 2, z - 11, 35, 14);
setTile(x - 1, y + 2, z - 4, 35, 14);
setTile(x - 1, y + 2, z - 5, 35, 14);
setTile(x - 1, y + 2, z - 6, 35, 14);
setTile(x - 1, y + 2, z - 7, 35, 14);
setTile(x - 1, y + 2, z - 8, 35, 14);
setTile(x - 1, y + 2, z - 9, 35, 14);
setTile(x - 1, y + 2, z - 10, 35, 14);
setTile(x - 1, y + 2, z - 11, 35, 14);
setTile(x + 1, y + 2, z - 4, 35, 14);
setTile(x + 1, y + 2, z - 5, 35, 14);
setTile(x + 1, y + 2, z - 6, 35, 14);
setTile(x + 1, y + 2, z - 7, 35, 14);
setTile(x + 1, y + 2, z - 8, 35, 14);
setTile(x + 1, y + 2, z - 9, 35, 14);
setTile(x + 1, y + 2, z - 10, 35, 14);
setTile(x + 1, y + 2, z - 11, 35, 14);
setTile(x + 2, y + 2, z - 5, 35, 14);
setTile(x + 2, y + 2, z - 6, 35, 14);
setTile(x + 2, y + 2, z - 7, 35, 14);
setTile(x + 2, y + 2, z - 8, 35, 14);
setTile(x + 2, y + 2, z - 9, 35, 14);
setTile(x + 2, y + 2, z - 10, 35, 14);
setTile(x + 2, y + 2, z - 11, 35, 14);
setTile(x + 3, y + 2, z - 5, 35, 14);
setTile(x + 3, y + 2, z - 6, 89);
setTile(x + 3, y + 2, z - 7, 35, 14);
setTile(x + 3, y + 2, z - 8, 35, 14);
setTile(x + 3, y + 2, z - 9, 89);
setTile(x + 3, y + 2, z - 10, 35, 14);
setTile(x + 3, y + 2, z - 11, 35, 14);
setTile(x + 4, y + 2, z - 5, 35, 14);
setTile(x + 4, y + 2, z - 6, 35, 14);
setTile(x + 4, y + 2, z - 7, 35, 14);
setTile(x + 4, y + 2, z - 8, 35, 14);
setTile(x + 4, y + 2, z - 9, 35, 14);
setTile(x + 4, y + 2, z - 10, 35, 14);
setTile(x + 4, y + 2, z - 11, 35, 14);
setTile(x + 5, y + 2, z - 5, 35, 14);
setTile(x + 5, y + 2, z - 6, 35, 14);
setTile(x + 5, y + 2, z - 7, 35, 14);
setTile(x + 5, y + 2, z - 8, 35, 14);
setTile(x + 5, y + 2, z - 9, 35, 14);
setTile(x + 5, y + 2, z - 10, 35, 14);
setTile(x + 5, y + 2, z - 11, 35, 14);
setTile(x - 2, y + 2, z - 5, 35, 14);
setTile(x - 2, y + 2, z - 6, 35, 14);
setTile(x - 2, y + 2, z - 7, 35, 14);
setTile(x - 2, y + 2, z - 8, 35, 14);
setTile(x - 2, y + 2, z - 9, 35, 14);
setTile(x - 2, y + 2, z - 10, 35, 14);
setTile(x - 2, y + 2, z - 11, 35, 14);
setTile(x - 3, y + 2, z - 5, 35, 14);
setTile(x - 3, y + 2, z - 6, 89);
setTile(x - 3, y + 2, z - 7, 35, 14);
setTile(x - 3, y + 2, z - 8, 35, 14);
setTile(x - 3, y + 2, z - 9, 89);
setTile(x - 3, y + 2, z - 10, 35, 14);
setTile(x - 3, y + 2, z - 11, 35, 14);
setTile(x - 4, y + 2, z - 5, 35, 14);
setTile(x - 4, y + 2, z - 6, 35, 14);
setTile(x - 4, y + 2, z - 7, 35, 14);
setTile(x - 4, y + 2, z - 8, 35, 14);
setTile(x - 4, y + 2, z - 9, 35, 14);
setTile(x - 4, y + 2, z - 10, 35, 14);
setTile(x - 4, y + 2, z - 11, 35, 14);
setTile(x - 5, y + 2, z - 5, 35, 14);
setTile(x - 5, y + 2, z - 6, 35, 14);
setTile(x - 5, y + 2, z - 7, 35, 14);
setTile(x - 5, y + 2, z - 8, 35, 14);
setTile(x - 5, y + 2, z - 9, 35, 14);
setTile(x - 5, y + 2, z - 10, 35, 14);
setTile(x - 5, y + 2, z - 11, 35, 14);
setTile(x, y + 3, z - 4, 35, 14);
setTile(x, y + 3, z - 5, 35, 14);
setTile(x, y + 3, z - 6, 35, 14);
setTile(x, y + 3, z - 7, 35, 14);
setTile(x, y + 3, z - 8, 89);
setTile(x, y + 3, z - 9, 35, 14);
setTile(x, y + 3, z - 10, 35, 14);
setTile(x, y + 3, z - 11, 35, 14);
setTile(x - 1, y + 3, z - 4, 35, 14);
setTile(x - 1, y + 3, z - 5, 35, 14);
setTile(x - 1, y + 3, z - 6, 35, 14);
setTile(x - 1, y + 3, z - 7, 35, 14);
setTile(x - 1, y + 3, z - 8, 35, 14);
setTile(x - 1, y + 3, z - 9, 35, 14);
setTile(x - 1, y + 3, z - 10, 35, 14);
setTile(x - 1, y + 3, z - 11, 35, 14);
setTile(x + 1, y + 3, z - 4, 35, 14);
setTile(x + 1, y + 3, z - 5, 35, 14);
setTile(x + 1, y + 3, z - 6, 35, 14);
setTile(x + 1, y + 3, z - 7, 35, 14);
setTile(x + 1, y + 3, z - 8, 35, 14);
setTile(x + 1, y + 3, z - 9, 35, 14);
setTile(x + 1, y + 3, z - 10, 35, 14);
setTile(x + 1, y + 3, z - 11, 35, 14);
setTile(x + 2, y + 3, z - 5, 35, 14);
setTile(x + 2, y + 3, z - 6, 35, 14);
setTile(x + 2, y + 3, z - 7, 35, 14);
setTile(x + 2, y + 3, z - 8, 35, 14);
setTile(x + 2, y + 3, z - 9, 35, 14);
setTile(x + 2, y + 3, z - 10, 35, 14);
setTile(x + 2, y + 3, z - 11, 35, 14);
setTile(x + 3, y + 3, z - 5, 35, 14);
setTile(x + 3, y + 3, z - 6, 89);
setTile(x + 3, y + 3, z - 7, 35, 14);
setTile(x + 3, y + 3, z - 8, 35, 14);
setTile(x + 3, y + 3, z - 9, 89);
setTile(x + 3, y + 3, z - 10, 35, 14);
setTile(x + 3, y + 3, z - 11, 35, 14);
setTile(x + 4, y + 3, z - 5, 35, 14);
setTile(x + 4, y + 3, z - 6, 35, 14);
setTile(x + 4, y + 3, z - 7, 35, 14);
setTile(x + 4, y + 3, z - 8, 35, 14);
setTile(x + 4, y + 3, z - 9, 35, 14);
setTile(x + 4, y + 3, z - 10, 35, 14);
setTile(x + 4, y + 3, z - 11, 35, 14);
setTile(x + 5, y + 3, z - 5, 35, 14);
setTile(x + 5, y + 3, z - 6, 35, 14);
setTile(x + 5, y + 3, z - 7, 35, 14);
setTile(x + 5, y + 3, z - 8, 35, 14);
setTile(x + 5, y + 3, z - 9, 35, 14);
setTile(x + 5, y + 3, z - 10, 35, 14);
setTile(x + 5, y + 3, z - 11, 35, 14);
setTile(x - 2, y + 3, z - 5, 35, 14);
setTile(x - 2, y + 3, z - 6, 35, 14);
setTile(x - 2, y + 3, z - 7, 35, 14);
setTile(x - 2, y + 3, z - 8, 35, 14);
setTile(x - 2, y + 3, z - 9, 35, 14);
setTile(x - 2, y + 3, z - 10, 35, 14);
setTile(x - 2, y + 3, z - 11, 35, 14);
setTile(x - 3, y + 3, z - 5, 35, 14);
setTile(x - 3, y + 3, z - 6, 89);
setTile(x - 3, y + 3, z - 7, 35, 14);
setTile(x - 3, y + 3, z - 8, 35, 14);
setTile(x - 3, y + 3, z - 9, 89);
setTile(x - 3, y + 3, z - 10, 35, 14);
setTile(x - 3, y + 3, z - 11, 35, 14);
setTile(x - 4, y + 3, z - 5, 35, 14);
setTile(x - 4, y + 3, z - 6, 35, 14);
setTile(x - 4, y + 3, z - 7, 35, 14);
setTile(x - 4, y + 3, z - 8, 35, 14);
setTile(x - 4, y + 3, z - 9, 35, 14);
setTile(x - 4, y + 3, z - 10, 35, 14);
setTile(x - 4, y + 3, z - 11, 35, 14);
setTile(x - 5, y + 3, z - 5, 35, 14);
setTile(x - 5, y + 3, z - 6, 35, 14);
setTile(x - 5, y + 3, z - 7, 35, 14);
setTile(x - 5, y + 3, z - 8, 35, 14);
setTile(x - 5, y + 3, z - 9, 35, 14);
setTile(x - 5, y + 3, z - 10, 35, 14);
setTile(x - 5, y + 3, z - 11, 35, 14);
setTile(x, y + 4, z - 4, 35, 14);
setTile(x, y + 4, z - 5, 35, 14);
setTile(x, y + 4, z - 6, 35, 14);
setTile(x, y + 4, z - 7, 35, 14);
setTile(x, y + 4, z - 8, 35, 14);
setTile(x, y + 4, z - 9, 35, 14);
setTile(x, y + 4, z - 10, 35, 14);
setTile(x, y + 4, z - 11, 35, 14);
setTile(x - 1, y + 4, z - 4, 35, 14);
setTile(x - 1, y + 4, z - 5, 35, 14);
setTile(x - 1, y + 4, z - 6, 35, 14);
setTile(x - 1, y + 4, z - 7, 35, 14);
setTile(x - 1, y + 4, z - 8, 35, 14);
setTile(x - 1, y + 4, z - 9, 35, 14);
setTile(x - 1, y + 4, z - 10, 35, 14);
setTile(x - 1, y + 4, z - 11, 35, 14);
setTile(x + 1, y + 4, z - 4, 35, 14);
setTile(x + 1, y + 4, z - 5, 35, 14);
setTile(x + 1, y + 4, z - 6, 35, 14);
setTile(x + 1, y + 4, z - 7, 35, 14);
setTile(x + 1, y + 4, z - 8, 35, 14);
setTile(x + 1, y + 4, z - 9, 35, 14);
setTile(x + 1, y + 4, z - 10, 35, 14);
setTile(x + 1, y + 4, z - 11, 35, 14);
setTile(x + 2, y + 4, z - 5, 35, 14);
setTile(x + 2, y + 4, z - 6, 35, 14);
setTile(x + 2, y + 4, z - 7, 35, 14);
setTile(x + 2, y + 4, z - 8, 35, 14);
setTile(x + 2, y + 4, z - 9, 35, 14);
setTile(x + 2, y + 4, z - 10, 35, 14);
setTile(x + 2, y + 4, z - 11, 35, 14);
setTile(x + 3, y + 4, z - 5, 35, 14);
setTile(x + 3, y + 4, z - 6, 35, 14);
setTile(x + 3, y + 4, z - 7, 35, 14);
setTile(x + 3, y + 4, z - 8, 35, 14);
setTile(x + 3, y + 4, z - 9, 35, 14);
setTile(x + 3, y + 4, z - 10, 35, 14);
setTile(x + 3, y + 4, z - 11, 35, 14);
setTile(x + 4, y + 4, z - 5, 35, 14);
setTile(x + 4, y + 4, z - 6, 35, 14);
setTile(x + 4, y + 4, z - 7, 35, 14);
setTile(x + 4, y + 4, z - 8, 35, 14);
setTile(x + 4, y + 4, z - 9, 35, 14);
setTile(x + 4, y + 4, z - 10, 35, 14);
setTile(x + 4, y + 4, z - 11, 35, 14);
setTile(x + 5, y + 4, z - 5, 35, 14);
setTile(x + 5, y + 4, z - 6, 35, 14);
setTile(x + 5, y + 4, z - 7, 35, 14);
setTile(x + 5, y + 4, z - 8, 35, 14);
setTile(x + 5, y + 4, z - 9, 35, 14);
setTile(x + 5, y + 4, z - 10, 35, 14);
setTile(x + 5, y + 4, z - 11, 35, 14);
setTile(x - 2, y + 4, z - 5, 35, 14);
setTile(x - 2, y + 4, z - 6, 35, 14);
setTile(x - 2, y + 4, z - 7, 35, 14);
setTile(x - 2, y + 4, z - 8, 35, 14);
setTile(x - 2, y + 4, z - 9, 35, 14);
setTile(x - 2, y + 4, z - 10, 35, 14);
setTile(x - 2, y + 4, z - 11, 35, 14);
setTile(x - 3, y + 4, z - 5, 35, 14);
setTile(x - 3, y + 4, z - 6, 35, 14);
setTile(x - 3, y + 4, z - 7, 35, 14);
setTile(x - 3, y + 4, z - 8, 35, 14);
setTile(x - 3, y + 4, z - 9, 35, 14);
setTile(x - 3, y + 4, z - 10, 35, 14);
setTile(x - 3, y + 4, z - 11, 35, 14);
setTile(x - 4, y + 4, z - 5, 35, 14);
setTile(x - 4, y + 4, z - 6, 35, 14);
setTile(x - 4, y + 4, z - 7, 35, 14);
setTile(x - 4, y + 4, z - 8, 35, 14);
setTile(x - 4, y + 4, z - 9, 35, 14);
setTile(x - 4, y + 4, z - 10, 35, 14);
setTile(x - 4, y + 4, z - 11, 35, 14);
setTile(x - 5, y + 4, z - 5, 35, 14);
setTile(x - 5, y + 4, z - 6, 35, 14);
setTile(x - 5, y + 4, z - 7, 35, 14);
setTile(x - 5, y + 4, z - 8, 35, 14);
setTile(x - 5, y + 4, z - 9, 35, 14);
setTile(x - 5, y + 4, z - 10, 35, 14);
setTile(x - 5, y + 4, z - 11, 35, 14);
setTile(x - 6, y + 3, z - 4, 35, 14);
setTile(x - 6, y + 3, z - 5, 35, 14);
setTile(x - 6, y + 3, z - 6, 35, 14);
setTile(x - 6, y + 3, z - 7, 35, 14);
setTile(x - 6, y + 3, z - 8, 35, 14);
setTile(x - 6, y + 3, z - 9, 35, 14);
setTile(x - 6, y + 3, z - 10, 35, 14);
setTile(x - 6, y + 3, z - 11, 35, 14);
setTile(x - 6, y + 3, z - 12, 35, 14);
setTile(x + 6, y + 3, z - 4, 35, 14);
setTile(x + 6, y + 3, z - 5, 35, 14);
setTile(x + 6, y + 3, z - 6, 35, 14);
setTile(x + 6, y + 3, z - 7, 35, 14);
setTile(x + 6, y + 3, z - 8, 35, 14);
setTile(x + 6, y + 3, z - 9, 35, 14);
setTile(x + 6, y + 3, z - 10, 35, 14);
setTile(x + 6, y + 3, z - 11, 35, 14);
setTile(x + 6, y + 3, z - 12, 35, 14);
setTile(x + 5, y + 3, z - 12, 35, 14);
setTile(x + 4, y + 3, z - 12, 35, 14);
setTile(x + 3, y + 3, z - 12, 35, 14);
setTile(x + 2, y + 3, z - 12, 35, 14);
setTile(x + 1, y + 3, z - 12, 35, 14);
setTile(x, y + 3, z - 12, 35, 14);
setTile(x - 1, y + 3, z - 12, 35, 14);
setTile(x - 2, y + 3, z - 12, 35, 14);
setTile(x - 3, y + 3, z - 12, 35, 14);
setTile(x - 4, y + 3, z - 12, 35, 14);
setTile(x - 5, y + 3, z - 12, 35, 14);
setTile(x + 5, y + 3, z - 4, 35, 14);
setTile(x + 4, y + 3, z - 4, 35, 14);
setTile(x + 3, y + 3, z - 4, 35, 14);
setTile(x + 2, y + 3, z - 4, 35, 14);
setTile(x - 5, y + 3, z - 4, 35, 14);
setTile(x - 4, y + 3, z - 4, 35, 14);
setTile(x - 3, y + 3, z - 4, 35, 14);
setTile(x - 2, y + 3, z - 4, 35, 14);
setTile(x + 4, y - 1, z - 5, 134, 2);
setTile(x + 3, y - 1, z - 5, 134, 2);
setTile(x + 3, y - 1, z - 7, 134, 3);
setTile(x + 4, y - 1, z - 7, 134, 3);
setTile(x + 5, y - 1, z - 11, 1, 6);
setTile(x + 5, y, z - 11, 109, 3);
setTile(x - 4, y - 1, z - 11, 93);
setTile(x - 2, y - 1, z - 11, 93);
setTile(x, y - 1, z - 11, 93);
setTile(x + 5, y, z - 11, 94);
setTile(x + 5, y - 1, z - 11, 155);
setTile(x + 3, y - 1, z - 6, 85, 1);
setTile(x + 4, y - 1, z - 6, 85, 1);
setTile(x + 3, y, z - 6, 171, 8);
setTile(x + 4, y, z - 6, 171, 8);
}




function showSaveBtn(){
var slotDimens = (displayHeight/1.5)/6;
var activity = com.mojang.minecraftpe.MainActivity.currentMainActivity.get();
activity.runOnUiThread(new java.lang.Runnable( { run: function() {
try {
saveBtnWindow = new android.widget.PopupWindow();
var saveBtnLayout = new android.widget.RelativeLayout(activity);
var saveBtnButton = new android.widget.Button(activity);
saveBtnButton.setOnClickListener(new android.view.View.OnClickListener({
      onClick: function(viewarg){
	  
	createTextFile("starterSelected.txt", starterSelected);
	createTextFile("pokemonSelected.txt", pokemonSelected);
	createTextFile("pokeId1.txt", pokeId1);
	createTextFile("pokeId2.txt", pokeId2);
	createTextFile("pokeId3.txt", pokeId3);
	createTextFile("pokeId4.txt", pokeId4);
	createTextFile("pokeId5.txt", pokeId5); 
	createTextFile("pokeId6.txt", pokeId6);
	createTextFile("pokeHP1.txt", pokeHP1);
	createTextFile("pokeHP2.txt", pokeHP2);
	createTextFile("pokeHP3.txt", pokeHP3);
	createTextFile("pokeHP4.txt", pokeHP4);
	createTextFile("pokeHP5.txt", pokeHP5);
	createTextFile("pokeHP6.txt", pokeHP6);
	createTextFile("pokeExp1.txt", pokeExp1);
	createTextFile("pokeExp2.txt", pokeExp2);
	createTextFile("pokeExp3.txt", pokeExp3);
	createTextFile("pokeExp4.txt", pokeExp4);
	createTextFile("pokeExp5.txt", pokeExp5);
	createTextFile("pokeExp6.txt", pokeExp6);
	createTextFile("pokeLvl1.txt", pokeLvl1);
	createTextFile("pokeLvl2.txt", pokeLvl2);
	createTextFile("pokeLvl3.txt", pokeLvl3);
	createTextFile("pokeLvl4.txt", pokeLvl4);
	createTextFile("pokeLvl5.txt", pokeLvl5);
	createTextFile("pokeLvl6.txt", pokeLvl6);
		  
	  }
      }));
saveBtnLayout.addView(saveBtnButton);
saveBtnWindow.setContentView(saveBtnLayout);
saveBtnWindow.setWidth(slotDimens);
saveBtnWindow.setHeight(slotDimens);
saveBtnButton.setWidth(slotDimens);
saveBtnButton.setHeight(slotDimens);
saveBtnButton.setBackgroundDrawable(saveDrawable);
saveBtnWindow.showAtLocation(activity.getWindow().getDecorView(), android.view.Gravity.LEFT | android.view.Gravity.BOTTOM, 0, 0);
}catch(problem){ 
print("Button could not be displayed: " + problem);
}
}}));

}

function dismissSaveBtn(){
ctx.runOnUiThread(new java.lang.Runnable(){
  
run: function(){
saveBtnWindow.dismiss();
saveBtnWindow = null;
}
  
});
}











function dismissPokeInv(){
ctx.runOnUiThread(new java.lang.Runnable(){
  
run: function(){
for(var i=0;i<invUIWindows.length;i++){
if(invUIWindows[i]!=null){
invUIWindows[i].dismiss();
invUIWindows[i] = null;
}
}
}
  
});
}


function refreshPokeInv(){
dismissPokeInv();
showPokeInv();
}


function showPokeInv(){

var slotDimens = (displayHeight/1.5)/6;


var activity = com.mojang.minecraftpe.MainActivity.currentMainActivity.get();
activity.runOnUiThread(new java.lang.Runnable( { run: function() {
try {
invBGWindow = new android.widget.PopupWindow();
//starterUIWindows.push(mainStarterBGWindow);
invUIWindows.push(invBGWindow);
var invBGLayout = new android.widget.RelativeLayout(activity);

invBGWindow.setContentView(invBGLayout);
//android.widget.RelativeLayout.LayoutParams.WRAP_CONTENT
invBGWindow.setWidth(slotDimens);
invBGWindow.setHeight(displayHeight/1.5);

invBGWindow.setBackgroundDrawable(inventoryDrawable);
invBGWindow.showAtLocation(activity.getWindow().getDecorView(), android.view.Gravity.LEFT | android.view.Gravity.CENTER_VERTICAL, 0, 0);
}catch(problem){ 
print("Button could not be displayed: " + problem);
}
}}));

//Pokemon 1

var activity = com.mojang.minecraftpe.MainActivity.currentMainActivity.get();
activity.runOnUiThread(new java.lang.Runnable( { run: function() {
try {
invBtn1Window = new android.widget.PopupWindow();
//starterUIWindows.push(starterButton1Window);
invUIWindows.push(invBtn1Window);
var invBtn1Layout = new android.widget.RelativeLayout(activity);
var invBtn1Button = new android.widget.Button(activity);
invBtn1Button.setOnClickListener(new android.view.View.OnClickListener({
      onClick: function(viewarg){
	  if(pokeId1 != 0)
	  {
      pokemonSelected = 1;
	  //pokemonChangeHook(pokemonSelected);
      }
	  }
      }));
//invBtn1Button.setText("Bulbasaur");
//Typeface(actionButton);
invBtn1Layout.addView(invBtn1Button);
invBtn1Window.setContentView(invBtn1Layout);
//android.widget.RelativeLayout.LayoutParams.WRAP_CONTENT
invBtn1Window.setWidth(slotDimens);
invBtn1Window.setHeight(slotDimens);
invBtn1Button.setWidth(slotDimens);
invBtn1Button.setHeight(slotDimens);
invBtn1Button.setBackgroundDrawable(loadDrawable(path+"res/icons/"+PokemonDatabase.pokemon[pokeId1].icon));
invBtn1Window.showAtLocation(activity.getWindow().getDecorView(), android.view.Gravity.LEFT | android.view.Gravity.CENTER_VERTICAL, 0, 0-(slotDimens*3)+(slotDimens/2)-10);
}catch(problem){ 
print("Button could not be displayed: " + problem);
}
}}));

//Pokemon 2

var activity = com.mojang.minecraftpe.MainActivity.currentMainActivity.get();
activity.runOnUiThread(new java.lang.Runnable( { run: function() {
try {
invBtn2Window = new android.widget.PopupWindow();
//starterUIWindows.push(starterButton1Window);
invUIWindows.push(invBtn2Window);
var invBtn2Layout = new android.widget.RelativeLayout(activity);
var invBtn2Button = new android.widget.Button(activity);
invBtn2Button.setOnClickListener(new android.view.View.OnClickListener({
      onClick: function(viewarg){
	  if(pokeId2 != 0)
	  {
      pokemonSelected = 2;
	  //pokemonChangeHook(pokemonSelected);
      }
	  }
      }));
//invBtn2Button.setText("Bulbasaur");
//Typeface(actionButton);
invBtn2Layout.addView(invBtn2Button);
invBtn2Window.setContentView(invBtn2Layout);
//android.widget.RelativeLayout.LayoutParams.WRAP_CONTENT
invBtn2Window.setWidth(slotDimens);
invBtn2Window.setHeight(slotDimens);
invBtn2Button.setWidth(slotDimens);
invBtn2Button.setHeight(slotDimens);
invBtn2Button.setBackgroundDrawable(loadDrawable(path+"res/icons/"+PokemonDatabase.pokemon[pokeId2].icon));
invBtn2Window.showAtLocation(activity.getWindow().getDecorView(), android.view.Gravity.LEFT | android.view.Gravity.CENTER_VERTICAL, 0, 0-(slotDimens*2)+(slotDimens/2)-10);
}catch(problem){ 
print("Button could not be displayed: " + problem);
}
}}));

//Pokemon 3

var activity = com.mojang.minecraftpe.MainActivity.currentMainActivity.get();
activity.runOnUiThread(new java.lang.Runnable( { run: function() {
try {
invBtn3Window = new android.widget.PopupWindow();
//starterUIWindows.push(starterButton1Window);
invUIWindows.push(invBtn3Window);
var invBtn3Layout = new android.widget.RelativeLayout(activity);
var invBtn3Button = new android.widget.Button(activity);
invBtn3Button.setOnClickListener(new android.view.View.OnClickListener({
      onClick: function(viewarg){
	  if(pokeId3 != 0)
	  {
      pokemonSelected = 3;
	  //pokemonChangeHook(pokemonSelected);
      }
	  }
      }));
//invBtn3Button.setText("Bulbasaur");
//Typeface(actionButton);
invBtn3Layout.addView(invBtn3Button);
invBtn3Window.setContentView(invBtn3Layout);
//android.widget.RelativeLayout.LayoutParams.WRAP_CONTENT
invBtn3Window.setWidth(slotDimens);
invBtn3Window.setHeight(slotDimens);
invBtn3Button.setWidth(slotDimens);
invBtn3Button.setHeight(slotDimens);
invBtn3Button.setBackgroundDrawable(loadDrawable(path+"res/icons/"+PokemonDatabase.pokemon[pokeId3].icon));
invBtn3Window.showAtLocation(activity.getWindow().getDecorView(), android.view.Gravity.LEFT | android.view.Gravity.CENTER_VERTICAL, 0, 0-(slotDimens*1)+(slotDimens/2)-10);
}catch(problem){ 
print("Button could not be displayed: " + problem);
}
}}));

//Pokemon 4

var activity = com.mojang.minecraftpe.MainActivity.currentMainActivity.get();
activity.runOnUiThread(new java.lang.Runnable( { run: function() {
try {
invBtn4Window = new android.widget.PopupWindow();
//starterUIWindows.push(starterButton1Window);
invUIWindows.push(invBtn4Window);
var invBtn4Layout = new android.widget.RelativeLayout(activity);
var invBtn4Button = new android.widget.Button(activity);
invBtn4Button.setOnClickListener(new android.view.View.OnClickListener({
      onClick: function(viewarg){
	  if(pokeId4 != 0)
	  {
      pokemonSelected = 4;
	  //pokemonChangeHook(pokemonSelected);
      }
	  }
      }));
//invBtn4Button.setText("Bulbasaur");
//Typeface(actionButton);
invBtn4Layout.addView(invBtn4Button);
invBtn4Window.setContentView(invBtn4Layout);
//android.widget.RelativeLayout.LayoutParams.WRAP_CONTENT
invBtn4Window.setWidth(slotDimens);
invBtn4Window.setHeight(slotDimens);
invBtn4Button.setWidth(slotDimens);
invBtn4Button.setHeight(slotDimens);
invBtn4Button.setBackgroundDrawable(loadDrawable(path+"res/icons/"+PokemonDatabase.pokemon[pokeId4].icon));
invBtn4Window.showAtLocation(activity.getWindow().getDecorView(), android.view.Gravity.LEFT | android.view.Gravity.CENTER_VERTICAL, 0, 0+(slotDimens*0)+(slotDimens/2)-10);
}catch(problem){ 
print("Button could not be displayed: " + problem);
}
}}));

//Pokemon 5

var activity = com.mojang.minecraftpe.MainActivity.currentMainActivity.get();
activity.runOnUiThread(new java.lang.Runnable( { run: function() {
try {
invBtn5Window = new android.widget.PopupWindow();
//starterUIWindows.push(starterButton1Window);
invUIWindows.push(invBtn5Window);
var invBtn5Layout = new android.widget.RelativeLayout(activity);
var invBtn5Button = new android.widget.Button(activity);
invBtn5Button.setOnClickListener(new android.view.View.OnClickListener({
      onClick: function(viewarg){
	  if(pokeId5 != 0)
	  {
      pokemonSelected = 5;
	  //pokemonChangeHook(pokemonSelected);
      }
	  }
      }));
//invBtn5Button.setText("Bulbasaur");
//Typeface(actionButton);
invBtn5Layout.addView(invBtn5Button);
invBtn5Window.setContentView(invBtn5Layout);
//android.widget.RelativeLayout.LayoutParams.WRAP_CONTENT
invBtn5Window.setWidth(slotDimens);
invBtn5Window.setHeight(slotDimens);
invBtn5Button.setWidth(slotDimens);
invBtn5Button.setHeight(slotDimens);
invBtn5Button.setBackgroundDrawable(loadDrawable(path+"res/icons/"+PokemonDatabase.pokemon[pokeId5].icon));
invBtn5Window.showAtLocation(activity.getWindow().getDecorView(), android.view.Gravity.LEFT | android.view.Gravity.CENTER_VERTICAL, 0, 0+(slotDimens*1)+(slotDimens/2)-10);
}catch(problem){ 
print("Button could not be displayed: " + problem);
}
}}));

//Pokemon 6

var activity = com.mojang.minecraftpe.MainActivity.currentMainActivity.get();
activity.runOnUiThread(new java.lang.Runnable( { run: function() {
try {
invBtn6Window = new android.widget.PopupWindow();
//starterUIWindows.push(starterButton1Window);
invUIWindows.push(invBtn6Window);
var invBtn6Layout = new android.widget.RelativeLayout(activity);
var invBtn6Button = new android.widget.Button(activity);
invBtn6Button.setOnClickListener(new android.view.View.OnClickListener({
      onClick: function(viewarg){
      if(pokeId6 != 0)
	  {
      pokemonSelected = 6;
	  //pokemonChangeHook(pokemonSelected);
	  }
      }
      }));
//invBtn6Button.setText("Bulbasaur");
//Typeface(actionButton);
invBtn6Layout.addView(invBtn6Button);
invBtn6Window.setContentView(invBtn6Layout);
//android.widget.RelativeLayout.LayoutParams.WRAP_CONTENT
invBtn6Window.setWidth(slotDimens);
invBtn6Window.setHeight(slotDimens);
invBtn6Button.setWidth(slotDimens);
invBtn6Button.setHeight(slotDimens);
invBtn6Button.setBackgroundDrawable(loadDrawable(path+"res/icons/"+PokemonDatabase.pokemon[pokeId6].icon));
invBtn6Window.showAtLocation(activity.getWindow().getDecorView(), android.view.Gravity.LEFT | android.view.Gravity.CENTER_VERTICAL, 0, 0+(slotDimens*2)+(slotDimens/2)-10);
}catch(problem){ 
print("Button could not be displayed: " + problem);
}
}}));





}

function pokemonChangeHook(id){
ctx.runOnUiThread(new java.lang.Runnable(){
  
run: function(){
  
for(var i=1;i<invUIWindows.length;i++){
if(invUIWindows[i]!=null){
invUIWindows[i].setBackgroundDrawable(emptyDrawable);
}
}
try{

invUIWindows[id].setBackgroundDrawable(frameDrawable);

}catch(err){
clientMessage(err);
}
}
  
});
}



function showPokeBtn(){
//Button

pokeBtn = true;
var activity = com.mojang.minecraftpe.MainActivity.currentMainActivity.get();
activity.runOnUiThread(new java.lang.Runnable( { run: function() {
try {
invBtnWindow = new android.widget.PopupWindow();

var invBtnLayout = new android.widget.RelativeLayout(activity);

      var invBtnButton = new android.widget.ToggleButton(activity);
	  invBtnButton.setTypeface(MinecraftButtonLibrary.ProcessedResources.font);
      invBtnButton.setText('Button');
      
	  invBtnButton.setTextOff("▲");
	  invBtnButton.setTextOn("▼");
	  invBtnButton.setChecked(toggled);
	  invBtnButton.setTextSize(MinecraftButtonLibrary.defaultButtonTextSize+5);
	  invBtnButton.setShadowLayer(1, Math.round((invBtnButton.getLineHeight() - MinecraftButtonLibrary.convertDpToPixel(MinecraftButtonLibrary.defaultButtonTextLineSpacing)) / 8), Math.round((invBtnButton.getLineHeight() - MinecraftButtonLibrary.convertDpToPixel(MinecraftButtonLibrary.defaultButtonTextLineSpacing)) / 8), android.graphics.Color.parseColor(MinecraftButtonLibrary.defaultButtonTextShadowColor));
      invBtnButton.setBackgroundDrawable(MinecraftButtonLibrary.ProcessedResources.mcNormalNineDrawable);
	  invBtnButton.setOnClickListener(new android.view.View.OnClickListener({
      onClick: function(viewarg){
      if(!toggled){
      toggled = true;
	  invBtnButton.setText("▼");
	  invBtnButton.setBackgroundDrawable(MinecraftButtonLibrary.ProcessedResources.mcPressedNineDrawable);
	if(pokemonSelected == 1)
	idHolder = pokeId1;
	if(pokemonSelected == 2)
	idHolder = pokeId2;
	if(pokemonSelected == 3)
	idHolder = pokeId3;
	if(pokemonSelected == 4)
	idHolder = pokeId4;
	if(pokemonSelected == 5)
	idHolder = pokeId5;
	if(pokemonSelected == 6)
	idHolder = pokeId6;
	
	if(pokemonSelected == 1)
	lvlHolder = pokeLvl1;
	if(pokemonSelected == 2)
	lvlHolder = pokeLvl2;
	if(pokemonSelected == 3)
	lvlHolder = pokeLvl3;
	if(pokemonSelected == 4)
	lvlHolder = pokeLvl4;
	if(pokemonSelected == 5)
	lvlHolder = pokeLvl5;
	if(pokemonSelected == 6)
	lvlHolder = pokeLvl6;
	
	  sendOutPokemon(idHolder, lvlHolder);
	  
	  invBtnButton.setTextColor(android.graphics.Color.parseColor(MinecraftButtonLibrary.defaultButtonTextPressedColor));
      }else{
      toggled = false;
      returnPokemon();
	  invBtnButton.setText("▲");
	  invBtnButton.setBackgroundDrawable(MinecraftButtonLibrary.ProcessedResources.mcNormalNineDrawable);
	  invBtnButton.setTextColor(android.graphics.Color.parseColor(MinecraftButtonLibrary.defaultButtonTextColor));
      }
      invBtnButton.setChecked(toggled);
	  Level.playSoundEnt(Player.getEntity(), "random.click", 100, 30);
      }
      }));
invBtnLayout.addView(invBtnButton);
invBtnWindow.setContentView(invBtnLayout);
//android.widget.RelativeLayout.LayoutParams.WRAP_CONTENT
invBtnWindow.setWidth(displayWidth/10);
invBtnWindow.setHeight(displayWidth/10);
invBtnButton.setWidth(displayWidth/10);
invBtnButton.setHeight(displayWidth/10);
//actionButton.setBackgroundDrawable(sp5);
invBtnWindow.showAtLocation(activity.getWindow().getDecorView(), android.view.Gravity.RIGHT | android.view.Gravity.BOTTOM, 0, 0);
}catch(problem){ 
print("Button could not be displayed: " + problem);
}
}}));
}



function dismissPokeBtn(){
ctx.runOnUiThread(new java.lang.Runnable(){
  
run: function(){
invBtnWindow.dismiss();
invBtnWindow = null;
}
  
});
}




function showStarterUI(){

//Main BG

var activity = com.mojang.minecraftpe.MainActivity.currentMainActivity.get();
activity.runOnUiThread(new java.lang.Runnable( { run: function() {
try {
mainStarterBGWindow = new android.widget.PopupWindow();
starterUIWindows.push(mainStarterBGWindow);
var mainStarterBGLayout = new android.widget.RelativeLayout(activity);

mainStarterBGWindow.setContentView(mainStarterBGLayout);
//android.widget.RelativeLayout.LayoutParams.WRAP_CONTENT
mainStarterBGWindow.setWidth(displayWidth);
mainStarterBGWindow.setHeight(displayWidth);

mainStarterBGWindow.setBackgroundDrawable(starterDrawable);
mainStarterBGWindow.showAtLocation(activity.getWindow().getDecorView(), android.view.Gravity.RIGHT | android.view.Gravity.BOTTOM, 0, 0);
}catch(problem){ 
print("Button could not be displayed: " + problem);
}
}}));




//Text





var activity = com.mojang.minecraftpe.MainActivity.currentMainActivity.get();
activity.runOnUiThread(new java.lang.Runnable( { run: function() {
try {
starterMessageWindow = new android.widget.PopupWindow();
starterUIWindows.push(starterMessageWindow);
var starterMessageLayout = new android.widget.RelativeLayout(activity);
starterMessageText = new android.widget.TextView(activity); // defining our TextView
starterMessageText.setText("Welcome to the world of Pokémon! Please choose your first Pokémon carefully."); // setting it's text to "I'm a TextView!"
starterMessageText.setTypeface(MinecraftButtonLibrary.ProcessedResources.font);
starterMessageText.setShadowLayer(1, 2, 2, android.graphics.Color.BLACK);
starterMessageText.setShadowLayer(1, Math.round((starterMessageText.getLineHeight() - MinecraftButtonLibrary.convertDpToPixel(MinecraftButtonLibrary.defaultButtonTextLineSpacing)) / 8), Math.round((starterMessageText.getLineHeight() - MinecraftButtonLibrary.convertDpToPixel(MinecraftButtonLibrary.defaultButtonTextLineSpacing)) / 8), android.graphics.Color.parseColor(MinecraftButtonLibrary.defaultButtonTextShadowColor));
starterMessageText.setTextSize(MinecraftButtonLibrary.defaultButtonTextSize);
starterMessageText.setGravity(android.view.Gravity.CENTER_VERTICAL | android.view.Gravity.CENTER_HORIZONTAL);
//Typeface(actionButton);

starterMessageLayout.addView(starterMessageText);
starterMessageWindow.setContentView(starterMessageLayout);
//android.widget.RelativeLayout.LayoutParams.WRAP_CONTENT
starterMessageWindow.setWidth(android.widget.RelativeLayout.LayoutParams.WRAP_CONTENT);
starterMessageWindow.setHeight(android.widget.RelativeLayout.LayoutParams.WRAP_CONTENT);
;
//actionButton.setBackgroundDrawable(sp5);
starterMessageWindow.showAtLocation(activity.getWindow().getDecorView(), android.view.Gravity.CENTER | android.view.Gravity.TOP, 0, 100);
}catch(problem){ 
print("Button could not be displayed: " + problem);
}
}}));





//Starter Btn 1



var activity = com.mojang.minecraftpe.MainActivity.currentMainActivity.get();
activity.runOnUiThread(new java.lang.Runnable( { run: function() {
try {
starterButton1Window = new android.widget.PopupWindow();
starterUIWindows.push(starterButton1Window);
var starterButton1Layout = new android.widget.RelativeLayout(activity);
var starterButton1Button = MinecraftButton();
starterButton1Button.setText("Bulbasaur");
//Typeface(actionButton);
starterButton1Button.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg,e) {
HideStarterUI();

starterSelected = true;
pokemonSelected = 1;
pokeId1 = 10;
pokeHP1 = 20;
pokeExp1 = 64;
pokeLvl1 = 5;
refreshPokeInv();
       }
}));
starterButton1Layout.addView(starterButton1Button);
starterButton1Window.setContentView(starterButton1Layout);
//android.widget.RelativeLayout.LayoutParams.WRAP_CONTENT
starterButton1Window.setWidth(displayWidth/4);
starterButton1Window.setHeight(displayHeight/8);
starterButton1Button.setWidth(displayWidth/4);
starterButton1Button.setHeight(displayHeight/8);
//actionButton.setBackgroundDrawable(sp5);
starterButton1Window.showAtLocation(activity.getWindow().getDecorView(), android.view.Gravity.CENTER_HORIZONTAL | android.view.Gravity.CENTER_VERTICAL, 0, 0);
}catch(problem){ 
print("Button could not be displayed: " + problem);
}
}}));








//Starter Btn 2



var activity = com.mojang.minecraftpe.MainActivity.currentMainActivity.get();
activity.runOnUiThread(new java.lang.Runnable( { run: function() {
try {
starterButton2Window = new android.widget.PopupWindow();
starterUIWindows.push(starterButton2Window);
var starterButton2Layout = new android.widget.RelativeLayout(activity);
var starterButton2Button = MinecraftButton();
starterButton2Button.setText("Charmander");
//Typeface(actionButton);
starterButton2Button.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg,e) {
HideStarterUI();

starterSelected = true;
pokemonSelected = 1;
pokeId1 = 11;
pokeHP1 = 20;
pokeExp1 = 64;
pokeLvl1 = 5;
refreshPokeInv();
       }
}));
starterButton2Layout.addView(starterButton2Button);
starterButton2Window.setContentView(starterButton2Layout);
//android.widget.RelativeLayout.LayoutParams.WRAP_CONTENT
starterButton2Window.setWidth(displayWidth/4);
starterButton2Window.setHeight(displayHeight/8);
starterButton2Button.setWidth(displayWidth/4);
starterButton2Button.setHeight(displayHeight/8);
//actionButton.setBackgroundDrawable(sp5);
starterButton2Window.showAtLocation(activity.getWindow().getDecorView(), android.view.Gravity.LEFT | android.view.Gravity.CENTER_VERTICAL, displayWidth/8, 0);
}catch(problem){ 
print("Button could not be displayed: " + problem);
}
}}));




//Starter Btn 3



var activity = com.mojang.minecraftpe.MainActivity.currentMainActivity.get();
activity.runOnUiThread(new java.lang.Runnable( { run: function() {
try {
starterButton3Window = new android.widget.PopupWindow();
starterUIWindows.push(starterButton3Window);
var starterButton3Layout = new android.widget.RelativeLayout(activity);
var starterButton3Button = MinecraftButton();
starterButton3Button.setText("Squirtle");
//Typeface(actionButton);
starterButton3Button.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg,e) {
HideStarterUI();

starterSelected = true;
pokemonSelected = 1;
pokeId1 = 2;
pokeHP1 = 20;
pokeExp1 = 64;
pokeLvl1 = 5;
refreshPokeInv();
       }
}));
starterButton3Layout.addView(starterButton3Button);
starterButton3Window.setContentView(starterButton3Layout);
//android.widget.RelativeLayout.LayoutParams.WRAP_CONTENT
starterButton3Window.setWidth(displayWidth/4);
starterButton3Window.setHeight(displayHeight/8);
starterButton3Button.setWidth(displayWidth/4);
starterButton3Button.setHeight(displayHeight/8);
//actionButton.setBackgroundDrawable(sp5);
starterButton3Window.showAtLocation(activity.getWindow().getDecorView(), android.view.Gravity.RIGHT | android.view.Gravity.CENTER_VERTICAL, displayWidth/8, 0);
}catch(problem){ 
print("Button could not be displayed: " + problem);
}
}}));





}




function HideStarterUI(){
ctx.runOnUiThread(new java.lang.Runnable(){
  
run: function(){
  
for(var i=0;i<starterUIWindows.length;i++){
if(starterUIWindows[i]!=null){
starterUIWindows[i].dismiss();
}
}
}
  
});
}




var MinecraftButtonLibrary = {};

// Customization
// These are the default values of the library, you can change them to make the buttons look how you want to.
MinecraftButtonLibrary.defaultButtonPadding = 8;
MinecraftButtonLibrary.defaultButtonTextSize = 16;
MinecraftButtonLibrary.defaultButtonTextLineSpacing = 4;
MinecraftButtonLibrary.defaultButtonTextColor = "#FFDDDDDD";
MinecraftButtonLibrary.defaultButtonTextPressedColor = "#FFFBFF97";
MinecraftButtonLibrary.defaultButtonTextShadowColor = "#FF292929";

// Variables
MinecraftButtonLibrary.Resources = {};
MinecraftButtonLibrary.ProcessedResources = {};

MinecraftButtonLibrary.context = com.mojang.minecraftpe.MainActivity.currentMainActivity.get();
MinecraftButtonLibrary.metrics = new android.util.DisplayMetrics();
MinecraftButtonLibrary.context.getWindowManager().getDefaultDisplay().getMetrics(MinecraftButtonLibrary.metrics);
MinecraftButtonLibrary.sdcard = new android.os.Environment.getExternalStorageDirectory();
MinecraftButtonLibrary.LOG_TAG = "Minecraft Button Library ";

MinecraftButtonLibrary.ProcessedResources.font = null;
MinecraftButtonLibrary.ProcessedResources.mcNormalNineDrawable = null;
MinecraftButtonLibrary.ProcessedResources.mcPressedNineDrawable = null;

//########################################################################################################################################################
// LIBRARY
//########################################################################################################################################################

function MinecraftButton(enableSound)
{
	if(enableSound == null)
		enableSound = true;

	var button = new android.widget.Button(MinecraftButtonLibrary.context);
	button.setTextSize(MinecraftButtonLibrary.defaultButtonTextSize);
	button.setOnTouchListener(new android.view.View.OnTouchListener()
	{
		onTouch: function(v, motionEvent)
		{
			var action = motionEvent.getActionMasked();
			if(action == android.view.MotionEvent.ACTION_DOWN)
			{
				// button pressed
				MinecraftButtonLibrary.changeToPressedState(v);
			}
			if(action == android.view.MotionEvent.ACTION_CANCEL || action == android.view.MotionEvent.ACTION_UP)
			{
				// button released
				MinecraftButtonLibrary.changeToNormalState(v);
				
				var rect = new android.graphics.Rect(v.getLeft(), v.getTop(), v.getRight(), v.getBottom());
				if(rect.contains(v.getLeft() + motionEvent.getX(), v.getTop() + motionEvent.getY())) // detect if the event happens inside the view
				{
					// onClick will run soon

					// play sound
					if(enableSound)
						Level.playSoundEnt(Player.getEntity(), "random.click", 100, 30);
				}
			}
			if(action == android.view.MotionEvent.ACTION_MOVE)
			{
				var rect = new android.graphics.Rect(v.getLeft(), v.getTop(), v.getRight(), v.getBottom());
				if(rect.contains(v.getLeft() + motionEvent.getX(), v.getTop() + motionEvent.getY())) // detect if the event happens inside the view
				{
					// pointer inside the view
					if(v.getTag() == false)
					{
						// restore pressed state
						button.setTag(true); // is pressed?

						MinecraftButtonLibrary.changeToPressedState(v);
					}
				} else
				{
					// pointer outside the view
					if(v.getTag() == true)
					{
						// restore pressed state
						button.setTag(false); // is pressed?

						MinecraftButtonLibrary.changeToNormalState(v);
					}
				}
			}

			return false;
		}
	});
	if (android.os.Build.VERSION.SDK_INT >= 14)
		button.setAllCaps(false);
	MinecraftButtonLibrary.setButtonBackground(button, MinecraftButtonLibrary.ProcessedResources.mcNormalNineDrawable);
	button.setTag(false); // is pressed?
	button.setSoundEffectsEnabled(false);
	button.setGravity(android.view.Gravity.CENTER);
	button.setTextColor(android.graphics.Color.parseColor(MinecraftButtonLibrary.defaultButtonTextColor));
	button.setPadding(MinecraftButtonLibrary.convertDpToPixel(MinecraftButtonLibrary.defaultButtonPadding), MinecraftButtonLibrary.convertDpToPixel(MinecraftButtonLibrary.defaultButtonPadding), MinecraftButtonLibrary.convertDpToPixel(MinecraftButtonLibrary.defaultButtonPadding), MinecraftButtonLibrary.convertDpToPixel(MinecraftButtonLibrary.defaultButtonPadding));
	button.setLineSpacing(MinecraftButtonLibrary.convertDpToPixel(MinecraftButtonLibrary.defaultButtonTextLineSpacing), 1);
	// apply custom font with shadow
	button.setTypeface(MinecraftButtonLibrary.ProcessedResources.font);
	button.setPaintFlags(button.getPaintFlags() | android.graphics.Paint.SUBPIXEL_TEXT_FLAG);
	if (android.os.Build.VERSION.SDK_INT >= 19) // KitKat
		button.setShadowLayer(1, Math.round((button.getLineHeight() - MinecraftButtonLibrary.convertDpToPixel(MinecraftButtonLibrary.defaultButtonTextLineSpacing)) / 8), Math.round((button.getLineHeight() - MinecraftButtonLibrary.convertDpToPixel(MinecraftButtonLibrary.defaultButtonTextLineSpacing)) / 8), android.graphics.Color.parseColor(MinecraftButtonLibrary.defaultButtonTextShadowColor));
	else
		button.setShadowLayer(0.0001, Math.round((button.getLineHeight() - MinecraftButtonLibrary.convertDpToPixel(MinecraftButtonLibrary.defaultButtonTextLineSpacing)) / 8), Math.round((button.getLineHeight() - MinecraftButtonLibrary.convertDpToPixel(MinecraftButtonLibrary.defaultButtonTextLineSpacing)) / 8), android.graphics.Color.parseColor(MinecraftButtonLibrary.defaultButtonTextShadowColor));

	return button;
}

// ######### BUTTON UTILS functions #########

MinecraftButtonLibrary.setButtonBackground = function(button, background)
{
	if (android.os.Build.VERSION.SDK_INT >= 16)
		button.setBackground(background);
	else
		button.setBackgroundDrawable(background);
}

MinecraftButtonLibrary.convertDpToPixel = function(dp)
{
	var density = MinecraftButtonLibrary.metrics.density;

	return (dp * density);
}

MinecraftButtonLibrary.changeToNormalState = function(button)
{
	MinecraftButtonLibrary.setButtonBackground(button, MinecraftButtonLibrary.ProcessedResources.mcNormalNineDrawable);
	button.setTextColor(android.graphics.Color.parseColor(MinecraftButtonLibrary.defaultButtonTextColor));
	// reset pressed padding
	button.setPadding(MinecraftButtonLibrary.convertDpToPixel(MinecraftButtonLibrary.defaultButtonPadding), MinecraftButtonLibrary.convertDpToPixel(MinecraftButtonLibrary.defaultButtonPadding), MinecraftButtonLibrary.convertDpToPixel(MinecraftButtonLibrary.defaultButtonPadding), MinecraftButtonLibrary.convertDpToPixel(MinecraftButtonLibrary.defaultButtonPadding));
}

MinecraftButtonLibrary.changeToPressedState = function(button)
{
	MinecraftButtonLibrary.setButtonBackground(button, MinecraftButtonLibrary.ProcessedResources.mcPressedNineDrawable);
	button.setTextColor(android.graphics.Color.parseColor(MinecraftButtonLibrary.defaultButtonTextPressedColor));
	// make the effect of a pressed button with padding
	button.setPadding(MinecraftButtonLibrary.convertDpToPixel(MinecraftButtonLibrary.defaultButtonPadding), MinecraftButtonLibrary.convertDpToPixel(MinecraftButtonLibrary.defaultButtonPadding) + MinecraftButtonLibrary.convertDpToPixel(2), MinecraftButtonLibrary.convertDpToPixel(MinecraftButtonLibrary.defaultButtonPadding), MinecraftButtonLibrary.convertDpToPixel(MinecraftButtonLibrary.defaultButtonPadding) - MinecraftButtonLibrary.convertDpToPixel(2));
}

// ######### END - BUTTON UTILS functions #########


// ######### CREATE NINE PATCH functions #########

MinecraftButtonLibrary.createNinePatchDrawables = function()
{
	var mcButtonNormalBitmap = MinecraftButtonLibrary.getMinecraftButtonBitmap();
	var mcButtonPressedBitmap = MinecraftButtonLibrary.getMinecraftButtonPressedBitmap();

	var mcNormalNinePatch = new android.graphics.NinePatch(mcButtonNormalBitmap, mcButtonNormalBitmap.getNinePatchChunk(), null);
	var mcPressedNinePatch = new android.graphics.NinePatch(mcButtonPressedBitmap, mcButtonPressedBitmap.getNinePatchChunk(), null);

	// here is used a deprecated method that doesn't deals with density
	//noinspection deprecation
	MinecraftButtonLibrary.ProcessedResources.mcNormalNineDrawable = new android.graphics.drawable.NinePatchDrawable(mcNormalNinePatch);
	MinecraftButtonLibrary.ProcessedResources.mcNormalNineDrawable.setFilterBitmap(false);
	//noinspection deprecation
	MinecraftButtonLibrary.ProcessedResources.mcPressedNineDrawable = new android.graphics.drawable.NinePatchDrawable(mcPressedNinePatch);
	MinecraftButtonLibrary.ProcessedResources.mcPressedNineDrawable.setFilterBitmap(false);
}

MinecraftButtonLibrary.getMinecraftButtonBitmap = function()
{
	var density = MinecraftButtonLibrary.metrics.density;

	if(density < 1)
	{
		ModPE.log(MinecraftButtonLibrary.LOG_TAG + "Density: " + density + ", ldpi");
		return MinecraftButtonLibrary.decodeImageFromBase64(MinecraftButtonLibrary.Resources.minecraftButtonStateNormalLDPI);
	}
	if(density >= 1 && density < 1.5)
	{
		ModPE.log(MinecraftButtonLibrary.LOG_TAG + "Density: " + density + ", mdpi");
		return MinecraftButtonLibrary.decodeImageFromBase64(MinecraftButtonLibrary.Resources.minecraftButtonStateNormalMDPI);
	}
	if(density >= 1.5 && density < 2)
	{
		ModPE.log(MinecraftButtonLibrary.LOG_TAG + "Density: " + density + ", hdpi");
		return MinecraftButtonLibrary.decodeImageFromBase64(MinecraftButtonLibrary.Resources.minecraftButtonStateNormalHDPI);
	}
	if(density >= 2 && density < 2.5)
	{
		ModPE.log(MinecraftButtonLibrary.LOG_TAG + "Density: " + density + ", xhdpi");
		return MinecraftButtonLibrary.decodeImageFromBase64(MinecraftButtonLibrary.Resources.minecraftButtonStateNormalXHDPI);
	}
	if(density >= 2.5)
	{
		ModPE.log(MinecraftButtonLibrary.LOG_TAG + "Density: " + density + ", xxhdpi");
		return MinecraftButtonLibrary.decodeImageFromBase64(MinecraftButtonLibrary.Resources.minecraftButtonStateNormalXXHDPI);
	}

	ModPE.log(MinecraftButtonLibrary.LOG_TAG + "Error: " + density + ", xhdpi");
	return MinecraftButtonLibrary.decodeImageFromBase64(MinecraftButtonLibrary.Resources.minecraftButtonStateNormalXHDPI);
}

MinecraftButtonLibrary.getMinecraftButtonPressedBitmap = function()
{
	var density = MinecraftButtonLibrary.metrics.density;

	if(density < 1)
	{
		ModPE.log(MinecraftButtonLibrary.LOG_TAG + "Density: " + density + ", ldpi");
		return MinecraftButtonLibrary.decodeImageFromBase64(MinecraftButtonLibrary.Resources.minecraftButtonStatePressedLDPI);
	}
	if(density >= 1 && density < 1.5)
	{
		ModPE.log(MinecraftButtonLibrary.LOG_TAG + "Density: " + density + ", mdpi");
		return MinecraftButtonLibrary.decodeImageFromBase64(MinecraftButtonLibrary.Resources.minecraftButtonStatePressedMDPI);
	}
	if(density >= 1.5 && density < 2)
	{
		ModPE.log(MinecraftButtonLibrary.LOG_TAG + "Density: " + density + ", hdpi");
		return MinecraftButtonLibrary.decodeImageFromBase64(MinecraftButtonLibrary.Resources.minecraftButtonStatePressedHDPI);
	}
	if(density >= 2 && density < 2.5)
	{
		ModPE.log(MinecraftButtonLibrary.LOG_TAG + "Density: " + density + ", xhdpi");
		return MinecraftButtonLibrary.decodeImageFromBase64(MinecraftButtonLibrary.Resources.minecraftButtonStatePressedXHDPI);
	}
	if(density >= 2.5)
	{
		ModPE.log(MinecraftButtonLibrary.LOG_TAG + "Density: " + density + ", xxhdpi");
		return MinecraftButtonLibrary.decodeImageFromBase64(MinecraftButtonLibrary.Resources.minecraftButtonStatePressedXXHDPI);
	}

	ModPE.log(MinecraftButtonLibrary.LOG_TAG + "Error: " + density + ", xhdpi");
	return MinecraftButtonLibrary.decodeImageFromBase64(MinecraftButtonLibrary.Resources.minecraftButtonStatePressedXHDPI);
}

MinecraftButtonLibrary.decodeImageFromBase64 = function(base64String)
{
	var byteArray = android.util.Base64.decode(base64String, 0);
	return android.graphics.BitmapFactory.decodeByteArray(byteArray, 0, byteArray.length);
}

// ######### END - CREATE NINE PATCH functions #########


// ######### CREATE TYPEFACE functions #########

MinecraftButtonLibrary.createTypeface = function()
{
	MinecraftButtonLibrary.writeFileFromByteArray(android.util.Base64.decode(MinecraftButtonLibrary.Resources.base64Font, 0), MinecraftButtonLibrary.sdcard + "/minecraft.ttf");
	MinecraftButtonLibrary.ProcessedResources.font = android.graphics.Typeface.createFromFile(MinecraftButtonLibrary.sdcard + "/minecraft.ttf");
	MinecraftButtonLibrary.deleteFile(MinecraftButtonLibrary.sdcard + "/minecraft.ttf");
}

MinecraftButtonLibrary.writeFileFromByteArray = function(byteArray, path)
{
	var file = new java.io.File(path);
	if(file.exists())
		file.delete();
	file.createNewFile();
	var stream = new java.io.FileOutputStream(file);
	stream.write(byteArray);
	stream.close();
	byteArray = null;
}

// ######### END - CREATE TYPEFACE functions #########


// ######### UTILS functions #########

MinecraftButtonLibrary.removeResources = function()
{
	MinecraftButtonLibrary.Resources.minecraftButtonStateNormalLDPI = null;
	MinecraftButtonLibrary.Resources.minecraftButtonStateNormalMDPI = null;
	MinecraftButtonLibrary.Resources.minecraftButtonStateNormalHDPI = null;
	MinecraftButtonLibrary.Resources.minecraftButtonStateNormalXHDPI = null;
	MinecraftButtonLibrary.Resources.minecraftButtonStateNormalXXHDPI = null;
	MinecraftButtonLibrary.Resources.minecraftButtonStatePressedLDPI = null;
	MinecraftButtonLibrary.Resources.minecraftButtonStatePressedMDPI = null;
	MinecraftButtonLibrary.Resources.minecraftButtonStatePressedHDPI = null;
	MinecraftButtonLibrary.Resources.minecraftButtonStatePressedXHDPI = null;
	MinecraftButtonLibrary.Resources.minecraftButtonStatePressedXXHDPI = null;

	MinecraftButtonLibrary.Resources.base64Font = null;
}

MinecraftButtonLibrary.deleteFile = function(path)
{
	var file = new java.io.File(path);

	if(file.isDirectory())
	{
		var directoryFiles = file.listFiles();
		for(var i in directoryFiles)
		{
			deleteFile(directoryFiles[i].getAbsolutePath());
		}
		file.delete();
	}

	if(file.isFile())
		file.delete();
}

// ######### END - UTILS functions #########


//########################################################################################################################################################
// RESOURCES IN BASE64
//########################################################################################################################################################

// backgrounds
MinecraftButtonLibrary.Resources.minecraftButtonStateNormalLDPI = "iVBORw0KGgoAAAANSUhEUgAAAAgAAAAICAYAAADED76LAAAAGG5wT2wAAAAAAAAAAAAAAAAAAAAAAAAAAP8AAADYHRhkAAAAVG5wVGMAAgIJIAAAACgAAAAAAAACAAAAAgAAAAMAAAACMAAAAAAAAAEAAAAHAAAAAgAAAAf/vLGr/7yxqwAAAAH/vLGr/5WGgQAAAAH/cmVnAAAAAf8oJyoMgs1WAAAASUlEQVQY02Pcs3H1fwY8gAmf5NYtexhYGBgYGG5evYZVwfZDh/GbwPD/PwEFjIwEFBByJAPDfwaWbVv2MGw7eIiBgRFuLrIdDADq5BFxvezsVAAAAABJRU5ErkJggg==";
MinecraftButtonLibrary.Resources.minecraftButtonStateNormalMDPI = "iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAAGG5wT2wAAAAAAAAAAAAAAAAAAAAAAAAAAP8AAADYHRhkAAAAVG5wVGMAAgIJIAAAACgAAAAAAAAEAAAABAAAAAYAAAAEMAAAAAAAAAIAAAAOAAAABAAAAA7/vLGr/7yxqwAAAAH/vLGr/5WGgQAAAAH/cmVnAAAAAf8oJyqdu2NqAAAAT0lEQVQ4y2Pcs3H1fwYKABMDhYCFXI1bt+yhsgtuXr1Gksbthw4PcBgw/P8/0C5gZKSOCwbeAPLDgIFasbANmqa3HTwEDV2M4MYVDdRxAQBscxGJWBLxyQAAAABJRU5ErkJggg==";
MinecraftButtonLibrary.Resources.minecraftButtonStateNormalHDPI = "iVBORw0KGgoAAAANSUhEUgAAABgAAAAYCAYAAADgdz34AAAAGG5wT2wAAAAAAAAAAAAAAAAAAAAAAAAAAP8AAADYHRhkAAAAVG5wVGMAAgIJIAAAACgAAAAAAAAGAAAABgAAAAkAAAAGMAAAAAAAAAMAAAAVAAAABgAAABX/vLGr/7yxqwAAAAH/vLGr/5WGgQAAAAH/cmVnAAAAAf8oJyqPt1DfAAAAV0lEQVRIx2Pcs3H1fwYaAiYGGgOaW8BCC0O3btkzXIPo5tVrVDF0+6HDo6mIAPj/fzSICABGxmEURKMWDFAqYhhWGW0bUu2z7eAhpMyCMxcRk9OGURABAH/ZEZn4HdB3AAAAAElFTkSuQmCC";
MinecraftButtonLibrary.Resources.minecraftButtonStateNormalXHDPI = "iVBORw0KGgoAAAANSUhEUgAAACAAAAAgCAYAAABzenr0AAAAGG5wT2wAAAAAAAAAAAAAAAAAAAAAAAAAAP8AAADYHRhkAAAAVG5wVGMAAgIJIAAAACgAAAAAAAAIAAAACAAAAAwAAAAIMAAAAAAAAAQAAAAcAAAACAAAABz/vLGr/7yxqwAAAAH/vLGr/5WGgQAAAAH/cmVnAAAAAf8oJypkuTlTAAAAZUlEQVRYw2Pcs3H1f4YBBEwMAwxGHcBCbwu3btkzGgWDPA3cvHqNphZuP3R4NApGeDnA8P//aBSM9DTAyDgaBaMOGHXASC8HGEbrgsGWBrahtdO3HTyEVnYTLNxJrQxGo2BwOQAAWckRqcYME3kAAAAASUVORK5CYII=";
MinecraftButtonLibrary.Resources.minecraftButtonStateNormalXXHDPI = "iVBORw0KGgoAAAANSUhEUgAAADAAAAAwCAYAAABXAvmHAAAAGG5wT2wAAAAAAAAAAAAAAAAAAAAAAAAAAP8AAADYHRhkAAAAVG5wVGMAAgIJIAAAACgAAAAAAAAMAAAADAAAABIAAAAMMAAAAAAAAAYAAAAqAAAADAAAACr/vLGr/7yxqwAAAAH/vLGr/5WGgQAAAAH/cmVnAAAAAf8oJypAoV45AAAAg0lEQVRo3u3ZwQmAMAyF4UTcfxFPgtZLL9YZFJwmTtCDINQ0/5sgHzxCQzXPk4njDOI8AABEB4xeBl2XTIUAAAi1he7z+tWgWzmoEAAAvIVaxowKAQDAFmoZVSoEAAAAAAAAAIj7FhIuMgAA+txCqfL3lPZSuYxen1JfnWRUCACAHgEPIUcRyZ0dVsEAAAAASUVORK5CYII=";
MinecraftButtonLibrary.Resources.minecraftButtonStatePressedLDPI = "iVBORw0KGgoAAAANSUhEUgAAAAgAAAAICAYAAADED76LAAAAGG5wT2wAAAAAAAAAAAAAAAAAAAAAAAAAAP8AAADYHRhkAAAAVG5wVGMAAgIJIAAAACgAAAAAAAACAAAAAgAAAAIAAAADMAAAAAAAAAEAAAAHAAAAAQAAAAb/KCcqAAAAAf9yZWcAAAABAAAAAQAAAAEAAAABAAAAAQAAAAGZYAV4AAAAb0lEQVQY012OQQqDMBRE34Scwp1QsHgHs7CbGnv9UjzNuIjRxuHD/wzzhq/nMBrKIIENAhA5TUQwS0pUiZIFeK8zEVSAQy5Vpxdq3k3HdYbLq2xTRwBht2T9QxJxSRP588I2d9kmPvqO7ftryb+9AxX7IG5YZYu3AAAAAElFTkSuQmCC";
MinecraftButtonLibrary.Resources.minecraftButtonStatePressedMDPI = "iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAAGG5wT2wAAAAAAAAAAAAAAAAAAAAAAAAAAP8AAADYHRhkAAAAVG5wVGMAAgIJIAAAACgAAAAAAAAEAAAABAAAAAQAAAAGMAAAAAAAAAIAAAAOAAAAAgAAAAz/KCcqAAAAAf9yZWcAAAABAAAAAQAAAAEAAAABAAAAAQAAAAEDO+tuAAAAkklEQVQ4y62SwQrCMAyGvwyfwpswcOwd7EEvbu71Zfg08ZIgi10ZtLm0CSn5/r+R4ToqAGwPRCy3gqV+mdMNgI7KOPnIKaVsgw/WUH++7s0IZCsxhP5Myfa184CgVf5cyJvTgiDarUYixV/wQrtfUC1rjiRim1pPMNlOz8vDSPTQQ++rJ+gvZwA+77WseSevJvgCGagihHTV1j0AAAAASUVORK5CYII=";
MinecraftButtonLibrary.Resources.minecraftButtonStatePressedHDPI = "iVBORw0KGgoAAAANSUhEUgAAABgAAAAYCAYAAADgdz34AAAAGG5wT2wAAAAAAAAAAAAAAAAAAAAAAAAAAP8AAADYHRhkAAAAVG5wVGMAAgIJIAAAACgAAAAAAAAGAAAABgAAAAYAAAAJMAAAAAAAAAMAAAAVAAAAAwAAABL/KCcqAAAAAf9yZWcAAAABAAAAAQAAAAEAAAABAAAAAQAAAAGqizz1AAAAl0lEQVRIx92VwQqAIAyGXfQU3YKg6B3yUJe0Xj+ip1k3+QOHGXhoO+l0Ch/flIZ+ZBMiPjREkIcFSOPE2ymMK1M4il9QIwtnbbIAqbCwZ91mXYgoLoUQ/NQrWavMIiMYQqJHadVUIJK6iAEXZTUaLihrNOY8WyRcBM+7AkQOfh+/L4CLPx+KtQoQdW0TJtdx5tnyIv9/RDcytSKUL7bTXAAAAABJRU5ErkJggg==";
MinecraftButtonLibrary.Resources.minecraftButtonStatePressedXHDPI = "iVBORw0KGgoAAAANSUhEUgAAACAAAAAgCAYAAABzenr0AAAAGG5wT2wAAAAAAAAAAAAAAAAAAAAAAAAAAP8AAADYHRhkAAAAVG5wVGMAAgIJIAAAACgAAAAAAAAIAAAACAAAAAgAAAAMMAAAAAAAAAQAAAAcAAAABAAAABj/KCcqAAAAAf9yZWcAAAABAAAAAQAAAAEAAAABAAAAAQAAAAHs/TEDAAAAqUlEQVRYw+2WwQqAIAyGXfQU3YKg6B3yUJe0Xj+ip1ln/8AhBnrYbroxhe/frzSNM5sg4ktDBHkogDRueLsE68YUDr1Ai5CdtUkNEDkL9fuxKoLqNEDxMRaCv0aR1E8R1OcDRphrEp0gzTgUQQ0akMydQROU9RZggSKo7y1gzptzSRMEf0pFUF4DDv7p/txAE/zrgdhPEZTXwNB3wcZz3XlznphXBMUv8AJ9bSKkEsE9twAAAABJRU5ErkJggg==";
MinecraftButtonLibrary.Resources.minecraftButtonStatePressedXXHDPI = "iVBORw0KGgoAAAANSUhEUgAAADAAAAAwCAYAAABXAvmHAAAAGG5wT2wAAAAAAAAAAAAAAAAAAAAAAAAAAP8AAADYHRhkAAAAVG5wVGMAAgIJIAAAACgAAAAAAAALAAAACwAAAAsAAAARMAAAAAAAAAYAAAAqAAAABgAAACT/KCcqAAAAAf9yZWcAAAABAAAAAQAAAAEAAAABAAAAAQAAAAGV/cSjAAAAzElEQVRo3u2ZQQrCMBBFM9JTuBMEi3cwC93Y6vVFPM14gfzFQIpMfLNMJk0ffD5/WptPZy/Nii0XM9EvDoh2tbHWS3N9V5IXAAD8O8CkbGWptcsFymw8+Jz744qEAABgUBeyWFQJluvw1OVeJAQAAKNmoRLMMBZOQ31CFRICAID8LhQdpVy4UyzbRCcydQAJAQDAqBOZ+7bZJupOJr5+IyEAAMjuQov497Q+b8Kd/Ccvqu5FQgAAkN2Fjod9c+Pzem+bbTr1IyEAAEheX2f8IsSeFAnbAAAAAElFTkSuQmCC";

// font
MinecraftButtonLibrary.Resources.base64Font = "";

//########################################################################################################################################################
// START CREATION OF RESOURCES
//########################################################################################################################################################

new java.lang.Thread(new java.lang.Runnable()
{
	run: function()
	{
		try
		{
			MinecraftButtonLibrary.createNinePatchDrawables();
			MinecraftButtonLibrary.createTypeface();

			MinecraftButtonLibrary.removeResources();
		} catch(e)
		{
			print("Error " + e);
		}
	}
}).start();




//Renderer Definitions

function addPokeballRenderer(renderer) {
var model = renderer.getModel(); 
var head = model.getPart("head"); 
var body = model.getPart("body"); 
var rightArm = model.getPart("rightArm"); 
var leftArm = model.getPart("leftArm"); 
var rightLeg = model.getPart("rightLeg");
var leftLeg = model.getPart("leftLeg"); 

head.clear(); 

body.clear(); 
body.setTextureOffset(21, 20);
body.addBox(-2.5, 18.5, -2.5, 5, 5, 5);
body.setTextureOffset(0, 0);
body.addBox(-1.5, 19.5, -3.0, 3, 3, 1);
body.setTextureOffset(30, 0);
body.addBox(-1.5, 19.5, 2.0, 3, 3, 1);
body.setTextureOffset(20, 7);
body.addBox(2.0, 19.5, -1.5, 1, 3, 3);
body.setTextureOffset(20, 0);
body.addBox(-3.0, 19.5, -1.5, 1, 3, 3);
body.setTextureOffset(50, 21);
body.addBox(-1.5, 18.0, -1.5, 3, 1, 3);
body.setTextureOffset(50, 27);
body.addBox(-1.5, 23.0, -1.5, 3, 1, 3);

rightArm.clear(); 

leftArm.clear(); 

rightLeg.clear();

leftLeg.clear(); 
} 

var PokeballRenderer = Renderer.createHumanoidRenderer(); addPokeballRenderer(PokeballRenderer);

function addButterfreeRenderer(renderer) {

var model = renderer.getModel();
var head = model.getPart("head").clear();
var body = model.getPart("body").clear();
var rArm = model.getPart("rightArm").clear();
var lArm = model.getPart("leftArm").clear();
var rLeg = model.getPart("rightLeg").clear();
var lLeg = model.getPart("leftLeg").clear();
body.setTextureOffset( 26, 0, true);
body.addBox(-2,5,0, 5, 7, 5);
body.setTextureOffset( 0, 21, true);
body.addBox(-3.5,-1,0, 8, 6, 5);
body.setTextureOffset( 49, 1, true);
body.addBox(-2,-9,4, 1, 8, 0);
body.setTextureOffset( 49, 1, true);
body.addBox(2,-9,4, 1, 8, 0);
body.setTextureOffset( 1, 1, true);
body.addBox(0.5,-6,5.1, 12, 20, 0);
body.setTextureOffset( -11, 1, true);
body.addBox(-11.5,-6,5.1, 12, 20, 0);
body.setTextureOffset( 26, 15, true);
body.addBox(-2,12,-2, 1, 1, 3);
body.setTextureOffset( 26, 15, true);
body.addBox(-1,12,-2, 1, 1, 3);
body.setTextureOffset( 26, 15, true);
body.addBox(1,12,-2, 1, 1, 3);
body.setTextureOffset( 26, 15, true);
body.addBox(2,12,-2, 1, 1, 3);
}

var ButterfreeRenderer = Renderer.createHumanoidRenderer();
addButterfreeRenderer(ButterfreeRenderer);



function addPidgeyRenderer(renderer){
var model = renderer.getModel();
var head = model.getPart("head").clear();
var body = model.getPart("body").clear();
var rArm = model.getPart("rightArm").clear();
var lArm = model.getPart("leftArm").clear();
var rLeg = model.getPart("rightLeg").clear();
var lLeg = model.getPart("leftLeg").clear();
rLeg.setTextureOffset( 30, 0, true);
rLeg.addBox(-1,12,0, 3, 0, 2);
lLeg.setTextureOffset( 30, 0, true);
lLeg.addBox(-2,12,0, 3, 0, 2);
rLeg.setTextureOffset( 36, 3, true);
rLeg.addBox(0,7,2, 1, 5, 0);
lLeg.setTextureOffset( 36, 3, true);
lLeg.addBox(-1,7,2, 1, 5, 0);
body.setTextureOffset( 0, 18, true);
body.addBox(-3,14,-4, 6, 6, 8);
head.setTextureOffset( 0, 0, true);
head.addBox(-2,11,-7, 4, 6, 3);
head.setTextureOffset( 14, 0, true);
head.addBox(-1.5,13,-9, 3, 2, 2);
rArm.setTextureOffset( 24, 13, true);
rArm.addBox(1,12,-3, 1, 4, 6);
lArm.setTextureOffset( 38, 13, true);
lArm.addBox(-2,12,-3, 1, 4, 6);
}
var PidgeyRenderer = Renderer.createHumanoidRenderer();
addPidgeyRenderer(PidgeyRenderer);


function addGrowlitheRenderer(renderer) {

var model = renderer.getModel();
var head = model.getPart("head");
var body = model.getPart("body");
var rightArm = model.getPart("rightArm");
var leftArm = model.getPart("leftArm");
var rightLeg = model.getPart("rightLeg");
var leftLeg = model.getPart("leftLeg");

head.clear();
body.clear();
rightArm.clear();
leftArm.clear();
rightLeg.clear();
leftLeg.clear();

rightLeg.setTextureOffset(0, 0);
rightLeg.addBox(1, 8, -2, 1, 3, 1, 0);
rightLeg.setRotationPoint(1, 8, -2);
leftLeg.setTextureOffset(0, 0);
leftLeg.addBox(-2, 8, -2, 1, 3, 1, 0);
leftLeg.setRotationPoint(0, 20, -2);
rightLeg.setTextureOffset(0, 0);
rightLeg.addBox(0, 9, 4, 1, 3, 1, 0);
leftLeg.setRotationPoint(0, 9, 4);
leftLeg.setTextureOffset(0, 0);
leftLeg.addBox(-1, 9, 4, 1, 3, 1, 0);
leftLeg.setRotationPoint(-1, 9, 4);

body.setTextureOffset(16, 0);
body.addBox(-2, 17, -3, 4, 4, 8, 0);
body.setTextureOffset(40, 0);
body.addBox(-1, 14, 4, 2, 4, 4, 0);
body.setTextureOffset(0, 4);
body.addBox(-2, 14, -6, 4, 4, 4, 0);
body.setTextureOffset(52, 0);
body.addBox(-0.5, 12, -4, 1, 3, 3, 0);
body.setTextureOffset(0, 12);
body.addBox(-1.5, 16, -7, 3, 2, 1, 0);
}

var GrowlitheRenderer = Renderer.createHumanoidRenderer();
addGrowlitheRenderer(GrowlitheRenderer);

function addSeelRenderer(renderer) {

var model = renderer.getModel();
var head = model.getPart("head");
var body = model.getPart("body");
var rightArm = model.getPart("rightArm");
var leftArm = model.getPart("leftArm");
var rightLeg = model.getPart("rightLeg");
var leftLeg = model.getPart("leftLeg");

head.clear();
body.clear();
rightArm.clear();
leftArm.clear();
rightLeg.clear();
leftLeg.clear();

body.setTextureOffset(0, 0);
body.addBox(-2, 17, -4, 1, 1, 1, 0);
body.setTextureOffset(0, 0);
body.addBox(-1, 12, -1, 3, 1, 3, 0);
body.setTextureOffset(0, 0);
body.addBox(-2, 13, -2, 5, 1, 5, 0);
body.setTextureOffset(0, 21);
body.addBox(-2, 14, -3, 5, 4, 7, 0);
body.setTextureOffset(0, 0);
body.addBox(-3, 14, -2, 7, 4, 5, 0);
body.setTextureOffset(0, 0);
body.addBox(-2, 18, -2, 5, 6, 5, 0);
body.setTextureOffset(0, 0);
body.addBox(-2, 19, 3, 5, 5, 12, 0);
body.setTextureOffset(58, 29);
body.addBox(-2, 16, -3.5, 2, 2, 1, 0);
body.setTextureOffset(58, 29);
body.addBox(1, 16, -3.5, 2, 2, 1, 0);
body.setTextureOffset(60, 27);
body.addBox(0, 16, -3.5, 1, 1, 1, 0);
body.setTextureOffset(0, 0);
body.addBox(0, 11, 0, 1, 1, 1, 0);
body.setTextureOffset(0, 0);
body.addBox(2, 17, -4, 1, 1, 1, 0);
body.setTextureOffset(58, 0);
body.addBox(-0.5, 17, -3.6, 2, 3, 1, 0);
body.setTextureOffset(0, 0);
body.addBox(-3, 20, 2, 7, 3, 13, 0);
body.setTextureOffset(0, 0);
body.addBox(-3, 18, -1, 7, 5, 3, 0);
body.setTextureOffset(0, 0);
body.addBox(-4, 19, -1, 1, 5, 3, 0);
body.setTextureOffset(0, 0);
body.addBox(4, 19, -1, 1, 5, 3, 0);
body.setTextureOffset(0, 0);
body.addBox(-1, 20, 14, 3, 3, 4, 0);
body.setTextureOffset(0, 0);
body.addBox(-3, 21, 17, 7, 1, 4, 0);
}

var SeelRenderer = Renderer.createHumanoidRenderer();
addSeelRenderer(SeelRenderer);

function addPoliwhirlRenderer(renderer) {

var model = renderer.getModel();
var head = model.getPart("head");
var body = model.getPart("body");
var rightArm = model.getPart("rightArm");
var leftArm = model.getPart("leftArm");
var rightLeg = model.getPart("rightLeg");
var leftLeg = model.getPart("leftLeg");

head.clear();
body.clear();
rightArm.clear();
leftArm.clear();
rightLeg.clear();
leftLeg.clear();

rightLeg.setTextureOffset(0, 0);
rightLeg.addBox(-1, 11, -2, 2, 1, 3, 0);
leftLeg.setTextureOffset(0, 0);
leftLeg.addBox(-1, 11, -2, 2, 1, 3, 0);
rightLeg.setTextureOffset(0, 0);
rightLeg.addBox(-0.5, 9, 0, 1, 2, 1, 0);
leftLeg.setTextureOffset(0, 0);
leftLeg.addBox(-0.5, 9, 0, 1, 2, 1, 0);
body.setTextureOffset(0, 0);
body.addBox(-4.5, 10, -2, 9, 11, 3, 0);
body.setTextureOffset(0, 0);
body.addBox(-5.5, 11, -2, 11, 9, 3, 0);
body.setTextureOffset(0, 0);
body.addBox(-5, 10.5, -2, 10, 10, 3, 0);
body.setTextureOffset(46, 0);
body.addBox(-4, 11.5, -2.5, 8, 8, 1, 0);
body.setTextureOffset(46, 9);
body.addBox(-4, 7, -2, 3, 3, 1, 0);
body.setTextureOffset(46, 9);
body.addBox(1, 7, -2, 3, 3, 1, 0);
body.setTextureOffset(0, 14);
body.addBox(-8.5, 13, -1.5, 4, 2, 2, 0);
body.setTextureOffset(0, 14);
body.addBox(4.5, 13, -1.5, 4, 2, 2, 0);
body.setTextureOffset(0, 18);
body.addBox(-11.5, 12.5, -2, 3, 3, 3, 0);
body.setTextureOffset(0, 18);
body.addBox(8.5, 12.5, -2, 3, 3, 3, 0);
}

var PoliwhirlRenderer = Renderer.createHumanoidRenderer();
addPoliwhirlRenderer(PoliwhirlRenderer);

function addCuboneRenderer(renderer) {

var model = renderer.getModel();
var head = model.getPart("head");
var body = model.getPart("body");
var rightArm = model.getPart("rightArm");
var leftArm = model.getPart("leftArm");
var rightLeg = model.getPart("rightLeg");
var leftLeg = model.getPart("leftLeg");

head.clear();
body.clear();
rightArm.clear();
leftArm.clear();
rightLeg.clear();
leftLeg.clear();

rightLeg.setTextureOffset(0, 23)
rightLeg.addBox(-1, 11, 0, 1, 1, 3, 0)
rightLeg.setRotationPoint(-1, 11, 0)
leftLeg.setTextureOffset(0, 23)
leftLeg.addBox(0.5, 11, 0, 1, 1, 3, 0)
leftLeg.setRotationPoint(0.5, 11, 0)
rightLeg.setTextureOffset(0, 18)
rightLeg.addBox(-1, 8, 1, 1, 3, 2, 0)
rightLeg.setRotationPoint(-1, 8, 1)
leftLeg.setTextureOffset(0, 18)
leftLeg.addBox(0.5, 8, 1, 1, 3, 2, 0)
leftLeg.setRotationPoint(0.5, 8, 1)
body.setTextureOffset(0, 9)
body.addBox(-2, 15, 0, 4, 6, 3, 0)
body.setTextureOffset(14, 9)
body.addBox(-3, 15, 1, 1, 4, 1, 0)
body.setTextureOffset(14, 9)
body.addBox(2, 15, 1, 1, 4, 1, 0)
body.setTextureOffset(14, 14)
body.addBox(-3, 18, -4, 1, 1, 5, 0)
body.setTextureOffset(0, 0)
body.addBox(-2.5, 10, -0.5, 5, 5, 4, 0)
body.setTextureOffset(18, 0)
body.addBox(-2, 12, -2, 4, 3, 2, 0)
body.setTextureOffset(30, 0)
body.addBox(-1.5, 13, -3, 3, 2, 1, 0)
body.setTextureOffset(38, 0)
body.addBox(-2, 8, 2, 1, 2, 1, 0)
body.setTextureOffset(38, 0)
body.addBox(1, 8, 2, 1, 2, 1, 0)
}

var CuboneRenderer = Renderer.createHumanoidRenderer();
addCuboneRenderer(CuboneRenderer);

function addPsyduckRenderer(renderer) {

var model = renderer.getModel();
var head = model.getPart("head");
var body = model.getPart("body");
var rightArm = model.getPart("rightArm");
var leftArm = model.getPart("leftArm");
var rightLeg = model.getPart("rightLeg");
var leftLeg = model.getPart("leftLeg");

head.clear();
body.clear();
rightArm.clear();
leftArm.clear();
rightLeg.clear();
leftLeg.clear();

rightLeg.setTextureOffset(8, 11);
rightLeg.addBox(-2, 11, -2, 3, 1, 5, 0);
rightLeg.setRotationPoint(-2, 11, -2);
leftLeg.setTextureOffset(8, 11);
leftLeg.addBox(0, 11, -2, 3, 1, 5, 0);
leftLeg.setRotationPoint(0, 11, -2);
body.setTextureOffset(24, 0);
body.addBox(-5, 15, 0, 9, 8, 7, 0);
body.setTextureOffset(0, 0);
body.addBox(-4, 10, 1, 7, 5, 5, 0);
body.setTextureOffset(8, 17);
body.addBox(-3, 14, -4, 5, 1, 5, 0);
body.setTextureOffset(0, 11);
body.addBox(-6, 11, 2, 2, 8, 2, 0);
body.setTextureOffset(0, 11);
body.addBox(3, 11, 2, 2, 8, 2, 0);
body.setTextureOffset(0, 23);
body.addBox(-2.5, 9.5, 5, 1, 1, 4, 0);
body.setTextureOffset(0, 23);
body.addBox(-1, 9.5, 5, 1, 1, 4, 0);
body.setTextureOffset(0, 23);
body.addBox(0.5, 9.5, 5, 1, 1, 4, 0);
}

var PsyduckRenderer = Renderer.createHumanoidRenderer();
addPsyduckRenderer(PsyduckRenderer);

function addShellderRenderer(renderer) {

var model = renderer.getModel();
var head = model.getPart("head");
var body = model.getPart("body");
var rArm = model.getPart("rightArm");
var lArm = model.getPart("leftArm");
var rLeg = model.getPart("rightLeg");
var lLeg = model.getPart("leftLeg");

head.clear();

body.clear();
body.setTextureOffset(0, 0, true);
body.addBox(-3, 19, 0, 6, 5, 4);
body.setTextureOffset(0, 10, true);
body.addBox(-1.5, 22, -4, 3, 1, 5);
body.setTextureOffset(20, 0, true);
body.addBox(-4, 18, -4, 8, 3, 9);
body.setTextureOffset(20, 20, true);
body.addBox(-4, 21, -4, 8, 3, 9);

rArm.clear();

lArm.clear();

rLeg.clear();

lLeg.clear();
}

var ShellderRenderer = Renderer.createHumanoidRenderer();
addShellderRenderer(ShellderRenderer);

function addBonslyRenderer(renderer) {

var model = renderer.getModel();
var head = model.getPart("head");
var body = model.getPart("body");
var rightArm = model.getPart("rightArm");
var leftArm = model.getPart("leftArm");
var rightLeg = model.getPart("rightLeg");
var leftLeg = model.getPart("leftLeg");

head.clear();
body.clear();
rightArm.clear();
leftArm.clear();
rightLeg.clear();
leftLeg.clear();

rightLeg.setTextureOffset(0, 0);
rightLeg.addBox(-1.2, 11, -2, 2, 1, 3, 0);
rightLeg.setRotationPoint(-1.2, 11, -2);
leftLeg.setTextureOffset(0, 0);
leftLeg.addBox(0.2, 11, -2, 2, 1, 3, 0);
leftLeg.setRotationPoint(0.2, 11, -2);
rightLeg.setTextureOffset(0, 0);
rightLeg.addBox(-1.2, 9, -1, 2, 2, 2, 0);
rightLeg.setRotationPoint(-1.2, 9, -1);
leftLeg.setTextureOffset(0, 0);
leftLeg.addBox(0.2, 9, -1, 2, 2, 2, 0);
leftLeg.setRotationPoint(0.2, 9, -1);
body.setTextureOffset(48, 0);
body.addBox(-2, 16, -2, 4, 6, 4, 0);
body.setTextureOffset(0, 0);
body.addBox(-2.5, 19, -2.5, 5, 1, 5, 0);
body.setTextureOffset(0, 0);
body.addBox(-0.5, 12, -0.5, 1, 4, 1, 0);
body.setTextureOffset(0, 0);
body.addBox(-2, 13, -0.5, 4, 1, 1, 0);
body.setTextureOffset(0, 26);
body.addBox(-5, 12, -1.5, 3, 3, 3, 0);
body.setTextureOffset(0, 26);
body.addBox(2, 12, -1.5, 3, 3, 3, 0);
body.setTextureOffset(0, 26);
body.addBox(-1.5, 9, -1.5, 3, 3, 3, 0);
}

var BonslyRenderer = Renderer.createHumanoidRenderer();
addBonslyRenderer(BonslyRenderer);

function addTrapinchRenderer(renderer) {

var model = renderer.getModel();
var head = model.getPart("head");
var body = model.getPart("body");
var rightArm = model.getPart("rightArm");
var leftArm = model.getPart("leftArm");
var rightLeg = model.getPart("rightLeg");
var leftLeg = model.getPart("leftLeg");

head.clear();
body.clear();
rightArm.clear();
leftArm.clear();
rightLeg.clear();
leftLeg.clear();

body.setTextureOffset(0, 9);
body.addBox(-2, 22, 3, 1, 2, 1, 0);
body.setTextureOffset(0, 9);
body.addBox(-2, 22, 0, 1, 2, 1, 0);
body.setTextureOffset(0, 9);
body.addBox(1, 22, 0, 1, 2, 1, 0);
body.setTextureOffset(0, 9);
body.addBox(1, 22, 3, 1, 2, 1, 0);
body.setTextureOffset(22, 0);
body.addBox(-2, 19, 0, 4, 3, 4, 0);
body.setTextureOffset(0, 0);
body.addBox(-3, 17, -4, 6, 4, 5, 0);
}

var TrapinchRenderer = Renderer.createHumanoidRenderer();
addTrapinchRenderer(TrapinchRenderer);

function addLatiasRenderer(renderer) {

var model = renderer.getModel();
var head = model.getPart("head");
var body = model.getPart("body");
var rightArm = model.getPart("rightArm");
var leftArm = model.getPart("leftArm");
var rightLeg = model.getPart("rightLeg");
var leftLeg = model.getPart("leftLeg");

head.clear();
body.clear();
rightArm.clear();
leftArm.clear();
rightLeg.clear();
leftLeg.clear();

body.setTextureOffset(0, 0);
body.addBox(-2.5, -15.5, -6, 5, 5, 13);
body.setTextureOffset(10, 20);
body.addBox(2.5, -16.5, 11, 1, 7, 1);
body.setTextureOffset(23, 25);
body.addBox(2.5, -16.5, 12, 1, 1, 1);
body.setTextureOffset(10, 20);
body.addBox(-3.5, -15.5, 11, 1, 5, 1);
body.setTextureOffset(10, 20);
body.addBox(15, -14, 2, 4, 1, 1);
body.setTextureOffset(38, 0);
body.addBox(-2, -15, -15, 4, 4, 9);
body.setTextureOffset(0, 18);
body.addBox(2, -14, 0, 13, 1, 6);
body.setTextureOffset(0, 25);
body.addBox(-15, -14, 0, 13, 1, 6);
body.setTextureOffset(60, 16);
body.addBox(1, -12, -4, 1, 2, 1);
body.setTextureOffset(60, 16);
body.addBox(-2, -12, -4, 1, 2, 1);
body.setTextureOffset(62, 30);
body.addBox(1.5, -16, -14.5, 0, 1, 1);
body.setTextureOffset(62, 30);
body.addBox(-1.5, -16, -14.5, 0, 1, 1);
body.setTextureOffset(10, 20);
body.addBox(15, -14, 5, 1, 1, 1);
body.setTextureOffset(10, 20);
body.addBox(15, -14, 4, 2, 1, 1);
body.setTextureOffset(10, 20);
body.addBox(15, -14, 3, 3, 1, 1);
body.setTextureOffset(10, 20);
body.addBox(15, -14, 1, 5, 1, 1);
body.setTextureOffset(10, 20);
body.addBox(15, -14, 0, 4, 1, 1);
body.setTextureOffset(10, 20);
body.addBox(-20, -14, 1, 5, 1, 1);
body.setTextureOffset(10, 20);
body.addBox(-19, -14, 0, 4, 1, 1);
body.setTextureOffset(10, 20);
body.addBox(-19, -14, 2, 4, 1, 1);
body.setTextureOffset(10, 20);
body.addBox(-18, -14, 3, 3, 1, 1);
body.setTextureOffset(10, 20);
body.addBox(-17, -14, 4, 2, 1, 1);
body.setTextureOffset(10, 20);
body.addBox(-16, -14, 5, 1, 1, 1);
body.setTextureOffset(10, 21);
body.addBox(-3, -16, 7, 6, 6, 4);
body.setTextureOffset(9, 23);
body.addBox(-3.5, -16.5, 11, 1, 1, 2);
body.setTextureOffset(23, 22);
body.addBox(-2.5, -16.5, 11, 1, 1, 1);
body.setTextureOffset(9, 23);
body.addBox(-1.5, -16.5, 11, 1, 1, 2);
body.setTextureOffset(23, 22);
body.addBox(-0.5, -16.5, 11, 3, 1, 1);
body.setTextureOffset(23, 22);
body.addBox(0.5, -16.5, 12, 1, 1, 1);
body.setTextureOffset(23, 23);
body.addBox(2.5, -14.5, 12, 1, 1, 1);
body.setTextureOffset(23, 23);
body.addBox(2.5, -12.5, 12, 1, 1, 1);
body.setTextureOffset(23, 23);
body.addBox(2.5, -10.5, 12, 1, 1, 1);
body.setTextureOffset(23, 22);
body.addBox(0.5, -10.5, 12, 1, 1, 1);
body.setTextureOffset(23, 22);
body.addBox(-0.5, -10.5, 11, 3, 1, 1);
body.setTextureOffset(23, 22);
body.addBox(-3.5, -10.5, 11, 3, 1, 1);
body.setTextureOffset(23, 22);
body.addBox(-1.5, -10.5, 12, 1, 1, 1);
body.setTextureOffset(23, 22);
body.addBox(-3.5, -10.5, 12, 1, 1, 1);
body.setTextureOffset(23, 22);
body.addBox(-3.5, -12.5, 12, 1, 1, 1);
body.setTextureOffset(23, 22);
body.addBox(-3.5, -14.5, 12, 1, 1, 1);
}

var LatiasRenderer = Renderer.createHumanoidRenderer();
addLatiasRenderer(LatiasRenderer);

function addLatiosRenderer(renderer) {

var model = renderer.getModel();
var head = model.getPart("head");
var body = model.getPart("body");
var rightArm = model.getPart("rightArm");
var leftArm = model.getPart("leftArm");
var rightLeg = model.getPart("rightLeg");
var leftLeg = model.getPart("leftLeg");

head.clear();
body.clear();
rightArm.clear();
leftArm.clear();
rightLeg.clear();
leftLeg.clear();

body.setTextureOffset(0, 0);
body.addBox(-2.5, -15.5, -6, 5, 5, 13);
body.setTextureOffset(10, 20);
body.addBox(2.5, -16.5, 11, 1, 7, 1);
body.setTextureOffset(23, 25);
body.addBox(2.5, -16.5, 12, 1, 1, 1);
body.setTextureOffset(10, 20);
body.addBox(-3.5, -15.5, 11, 1, 5, 1);
body.setTextureOffset(10, 20);
body.addBox(15, -14, 2, 4, 1, 1);
body.setTextureOffset(38, 0);
body.addBox(-2, -15, -15, 4, 4, 9);
body.setTextureOffset(0, 18);
body.addBox(2, -14, 0, 13, 1, 6);
body.setTextureOffset(0, 25);
body.addBox(-15, -14, 0, 13, 1, 6);
body.setTextureOffset(60, 16);
body.addBox(1, -12, -4, 1, 2, 1);
body.setTextureOffset(60, 16);
body.addBox(-2, -12, -4, 1, 2, 1);
body.setTextureOffset(62, 30);
body.addBox(1.5, -16, -14.5, 0, 1, 1);
body.setTextureOffset(62, 30);
body.addBox(-1.5, -16, -14.5, 0, 1, 1);
body.setTextureOffset(10, 20);
body.addBox(15, -14, 5, 1, 1, 1);
body.setTextureOffset(10, 20);
body.addBox(15, -14, 4, 2, 1, 1);
body.setTextureOffset(10, 20);
body.addBox(15, -14, 3, 3, 1, 1);
body.setTextureOffset(10, 20);
body.addBox(15, -14, 1, 5, 1, 1);
body.setTextureOffset(10, 20);
body.addBox(15, -14, 0, 4, 1, 1);
body.setTextureOffset(10, 20);
body.addBox(-20, -14, 1, 5, 1, 1);
body.setTextureOffset(10, 20);
body.addBox(-19, -14, 0, 4, 1, 1);
body.setTextureOffset(10, 20);
body.addBox(-19, -14, 2, 4, 1, 1);
body.setTextureOffset(10, 20);
body.addBox(-18, -14, 3, 3, 1, 1);
body.setTextureOffset(10, 20);
body.addBox(-17, -14, 4, 2, 1, 1);
body.setTextureOffset(10, 20);
body.addBox(-16, -14, 5, 1, 1, 1);
body.setTextureOffset(10, 21);
body.addBox(-3, -16, 7, 6, 6, 4);
body.setTextureOffset(9, 23);
body.addBox(-3.5, -16.5, 11, 1, 1, 2);
body.setTextureOffset(23, 22);
body.addBox(-2.5, -16.5, 11, 1, 1, 1);
body.setTextureOffset(9, 23);
body.addBox(-1.5, -16.5, 11, 1, 1, 2);
body.setTextureOffset(23, 22);
body.addBox(-0.5, -16.5, 11, 3, 1, 1);
body.setTextureOffset(23, 22);
body.addBox(0.5, -16.5, 12, 1, 1, 1);
body.setTextureOffset(23, 23);
body.addBox(2.5, -14.5, 12, 1, 1, 1);
body.setTextureOffset(23, 23);
body.addBox(2.5, -12.5, 12, 1, 1, 1);
body.setTextureOffset(23, 23);
body.addBox(2.5, -10.5, 12, 1, 1, 1);
body.setTextureOffset(23, 22);
body.addBox(0.5, -10.5, 12, 1, 1, 1);
body.setTextureOffset(23, 22);
body.addBox(-0.5, -10.5, 11, 3, 1, 1);
body.setTextureOffset(23, 22);
body.addBox(-3.5, -10.5, 11, 3, 1, 1);
body.setTextureOffset(23, 22);
body.addBox(-1.5, -10.5, 12, 1, 1, 1);
body.setTextureOffset(23, 22);
body.addBox(-3.5, -10.5, 12, 1, 1, 1);
body.setTextureOffset(23, 22);
body.addBox(-3.5, -12.5, 12, 1, 1, 1);
body.setTextureOffset(23, 22);
body.addBox(-3.5, -14.5, 12, 1, 1, 1);
}

var LatiosRenderer = Renderer.createHumanoidRenderer();
addLatiosRenderer(LatiosRenderer);

function addMagnemiteRenderer(renderer) {

var model = renderer.getModel();
var head = model.getPart("head");
var body = model.getPart("body");
var rightArm = model.getPart("rightArm");
var leftArm = model.getPart("leftArm");
var rightLeg = model.getPart("rightLeg");
var leftLeg = model.getPart("leftLeg");

head.clear();
body.clear();
rightArm.clear();
leftArm.clear();
rightLeg.clear();
leftLeg.clear();

body.setTextureOffset(54, 0);
body.addBox(5, 2, 0, 4, 1, 1);
body.setTextureOffset(34, 17);
body.addBox(-4, 0, -3, 8, 8, 7);
body.setTextureOffset(0, 27);
body.addBox(4, 2, 0, 1, 4, 1);
body.setTextureOffset(54, 3);
body.addBox(5, 5, 0, 4, 1, 1);
body.setTextureOffset(0, 27);
body.addBox(-5, 2, 0, 1, 4, 1);
body.setTextureOffset(54, 6);
body.addBox(-9, 2, 0, 4, 1, 1);
body.setTextureOffset(54, 9);
body.addBox(-9, 5, 0, 4, 1, 1);
body.setTextureOffset(0, 3);
body.addBox(-0.5, -2, 0, 1, 2, 1);
body.setTextureOffset(0, 7);
body.addBox(-1, -3, -0.5, 2, 1, 2);
}

var MagnemiteRenderer = Renderer.createHumanoidRenderer();
addMagnemiteRenderer(MagnemiteRenderer);

function addVictreebelRenderer(renderer) {
var model = renderer.getModel(); 
var head = model.getPart("head"); 
var body = model.getPart("body"); 
var rightArm = model.getPart("rightArm"); 
var leftArm = model.getPart("leftArm"); 
var rightLeg = model.getPart("rightLeg");
var leftLeg = model.getPart("leftLeg"); 

head.clear(); 

body.clear(); 
body.setTextureOffset(0, 0);
body.addBox(-4.5, -1.0, -3.0, 9, 19, 9);
body.setTextureOffset(40, 0);
body.addBox(-3.5, -5.0, 1.0, 7, 1, 5);
body.setTextureOffset(0, 16);
body.addBox(-4, 10, -4, 8, 8, 1);
body.setTextureOffset(0, 12);
body.addBox(-5.5, 8.0, -2.0, 1, 8, 7);
body.setTextureOffset(0, 16);
body.addBox(-4, 7, 6, 8, 8, 1);
body.setTextureOffset(0, 12);
body.addBox(4.5, 8.0, -2.0, 1, 8, 7);
body.setTextureOffset(0, 16);
body.addBox(-3, 11, -5, 6, 6, 1);
body.setTextureOffset(37, 15);
body.addBox(-5, -2, -4, 10, 2, 2);
body.setTextureOffset(37, 15);
body.addBox(-5, -2, 5, 10, 2, 2);
body.setTextureOffset(37, 15);
body.addBox(3, -2, -3, 2, 2, 10);
body.setTextureOffset(37, 15);
body.addBox(-5, -2, -3, 2, 2, 10);
body.setTextureOffset(0, 28);
body.addBox(-1.0, -4.5, 5.5, 2, 3, 1);
body.setTextureOffset(40, 0);
body.addBox(-2.5, -5.0, -3.0, 5, 1, 4);
body.setTextureOffset(0, 15);
body.addBox(-3, 18, -2, 6, 1, 7);

rightArm.clear(); 
rightArm.setTextureOffset(40, 0);
rightArm.addBox(-6.0, 9.5, -0.5, 4, 1, 4);
rightArm.setTextureOffset(40, 0);
rightArm.addBox(-4.0, 10.0, -1.0, 4, 1, 5);

leftArm.clear(); 
leftArm.setTextureOffset(40, 0);
leftArm.addBox(3.0, 9.5, -0.5, 4, 1, 4);
leftArm.setTextureOffset(40, 0);
leftArm.addBox(0.0, 10.0, -1.0, 4, 1, 5);

rightLeg.clear();

leftLeg.clear();
} 

var VictreebelRenderer = Renderer.createHumanoidRenderer(); addVictreebelRenderer(VictreebelRenderer);

function addPichuRenderer(renderer){

var model = renderer.getModel();
var head = model.getPart("head");
var body = model.getPart("body");
var leftArm = model.getPart("leftArm");
var rightArm = model.getPart("rightArm");
var leftLeg = model.getPart("leftLeg");
var rightLeg = model.getPart("rightLeg");

head.clear();
body.clear();
leftArm.clear();
rightArm.clear();
leftLeg.clear();
rightLeg.clear();

body.setTextureOffset(0,0);
body.addBox(-4,17,-2,7,6,4);
body.setTextureOffset(22,0);
body.addBox(-1,20,2,1,3,1);
body.setTextureOffset(22,0);
body.addBox(-1,19,3,1,3,1);
body.setTextureOffset(22,0);
body.addBox(-1,18,4,1,3,1);
body.setTextureOffset(27,0);
body.addBox(-1,18,5,1,2,2);
body.setTextureOffset(34,0);
body.addBox(-1,20,5,1,1,1);

body.setTextureOffset(0,11);
body.addBox(-5,11,-3,9,6,6);
body.setTextureOffset(40,0);
body.addBox(-7,8,-1,3,3,1);
body.setTextureOffset(34,0);
body.addBox(-6,11,-1,1,1,1);
body.setTextureOffset(51,0);
body.addBox(3,8,-1,3,3,1);
body.setTextureOffset(34,0);
body.addBox(4,11,-1,1,1,1);

leftArm.setTextureOffset(37,10);
leftArm.addBox(-2,16,-1,1,3,2);

rightArm.setTextureOffset(37,10);
rightArm.addBox(0,16,-1,1,3,2);

leftLeg.setTextureOffset(37,10);
leftLeg.addBox(-1,11,-3,2,1,3);

rightLeg.setTextureOffset(37,10);
rightLeg.addBox(-2,11,-3,2,1,3);
}

var PichuRenderer = Renderer.createHumanoidRenderer();
addPichuRenderer(PichuRenderer);

function addTurtwigRenderer(renderer){

var model = renderer.getModel();
var head = model.getPart("head");
var body = model.getPart("body");
var leftArm = model.getPart("leftArm");
var rightArm = model.getPart("rightArm");
var leftLeg = model.getPart("leftLeg");
var rightLeg = model.getPart("rightLeg");

head.clear();
body.clear();
leftArm.clear();
rightArm.clear();
leftLeg.clear();
rightLeg.clear();

body.setTextureOffset(0,0);
body.addBox(-5,20,-5,8,1,10);
body.setTextureOffset(2,15)
body.addBox(-5,17,-2,8,3,7);

body.setTextureOffset(34,18);
body.addBox(-4,15,-6,6,5,4);
body.setTextureOffset(43,3);
body.addBox(-1,14,-5,1,1,1);
body.setTextureOffset(41,7);
body.addBox(-3,13,-5,3,1,1);
body.setTextureOffset(51,1)
body.addBox(-1,12,-5,1,1,1);

leftLeg.setTextureOffset(45,12);
leftLeg.addBox(-2,9,-5,3,3,3);
leftLeg.setTextureOffset(45,12);
leftLeg.addBox(-2,9,2,3,3,3);

rightLeg.setTextureOffset(45,12);
rightLeg.addBox(-3,9,-5,3,3,3);
rightLeg.setTextureOffset(45,12);
rightLeg.addBox(-3,9,2,3,3,3);
}

var TurtwigRenderer = Renderer.createHumanoidRenderer();
addTurtwigRenderer(TurtwigRenderer);

function addRaichuRenderer(renderer){

var model = renderer.getModel();
var head = model.getPart("head");
var body = model.getPart("body");
var leftArm = model.getPart("leftArm");
var rightArm = model.getPart("rightArm");
var leftLeg = model.getPart("leftLeg");
var rightLeg = model.getPart("rightLeg");


head.clear();
body.clear();
leftArm.clear();
rightArm.clear();
leftLeg.clear();
rightLeg.clear();

body.setTextureOffset(0,0);
body.addBox(-5,12,-1,9,11,5);
body.setTextureOffset(29,0);
body.addBox(-3,13,-2,5,8,1);
body.addBox(-4,14,-2,1,6,1);
body.addBox(2,14,-2,1,6,1);

//tail
body.setTextureOffset(46,0);
body.addBox(-1,22,4,1,1,2);
body.setTextureOffset(53,0);
body.addBox(-1,15,6,1,7,1);
body.setTextureOffset(0,17);
body.addBox(-1,10,7,1,5,1);
body.setTextureOffset(5,17);
body.addBox(-1,9,8,1,3,1);
body.addBox(-1,8,9,1,3,1);
body.setTextureOffset(10,17);
body.addBox(-5,5,-2,9,7,6);
body.setTextureOffset(29,10);
body.addBox(-6,5,0,1,1,1);
body.setTextureOffset(34,10);
body.addBox(-7,4,0,4,1,1);
body.addBox(-8,3,0,4,1,1);
body.setTextureOffset(45,10);
body.addBox(-7,2,0,2,1,1);
body.setTextureOffset(29,10);
body.addBox(4,5,0,1,1,1);
body.setTextureOffset(34,10);
body.addBox(2,4,0,4,1,1);
body.addBox(3,3,0,4,1,1);
body.setTextureOffset(45,10);
body.addBox(4,2,0,2,1,1);

rightArm.setTextureOffset(35,14);
rightArm.addBox(-1,10,0,1,5,3);
leftArm.setTextureOffset(35,14);
leftArm.addBox(-1,10,0,1,5,3);
rightLeg.setTextureOffset(44,14);
rightLeg.addBox(-4,6,-1,1,6,3);
rightLeg.setTextureOffset(53,14);
rightLeg.addBox(-4,8,-2,1,4,1);
rightLeg.setTextureOffset(41,24);
rightLeg.addBox(-3,9,-2,1,2,1);
rightLeg.setTextureOffset(46,24);
rightLeg.addBox(-4,11,-4,2,1,6);
leftLeg.setTextureOffset(44,14);
leftLeg.addBox(2,6,-1,1,6,3);
leftLeg.setTextureOffset(53,14);
leftLeg.addBox(2,8,-2,1,4,1);
leftLeg.setTextureOffset(41,24);
leftLeg.addBox(1,9,-2,1,2,1);
leftLeg.setTextureOffset(46,24);
leftLeg.addBox(1,11,-4,2,1,6);
}

var RaichuRenderer = Renderer.createHumanoidRenderer();
addRaichuRenderer(RaichuRenderer);

function addCyndaquilRenderer(renderer){

var model = renderer.getModel();
var head = model.getPart("head");
var body = model.getPart("body");
var leftArm = model.getPart("leftArm");
var rightArm = model.getPart("rightArm");
var leftLeg = model.getPart("leftLeg");
var rightLeg = model.getPart("rightLeg");

head.clear();
body.clear();
leftArm.clear();
rightArm.clear();
leftLeg.clear();
rightLeg.clear();

//snout
body.setTextureOffset(0,0);
body.addBox(-3,15,-9,3,2,3);

//head
body.setTextureOffset(11,0);
body.addBox(-4,14,-6,5,3,4);

body.setTextureOffset(30,0);
body.addBox(-4,13,-5,5,1,2);

//body
body.setTextureOffset(45,0);
body.addBox(-4,17,-4,5,2,2);

body.setTextureOffset(30,4);
body.addBox(-4,19,-3,5,2,3);

body.setTextureOffset(47,4);
body.addBox(-4,18,-2,5,1,1);

body.setTextureOffset(47,7);
body.addBox(-3,21,-2,3,2,2);

//arms
body.setTextureOffset(0,6);
body.addBox(-4,18,-6,1,1,2);
body.addBox(0,18,-6,1,1,2);

//right leg
rightLeg.setTextureOffset(11,8);
rightLeg.addBox(-3,9,-3,2,2,3);

rightLeg.setTextureOffset(0,10);
rightLeg.addBox(-3,11,-4,2,1,3);

//left leg
leftLeg.setTextureOffset(11,8);
leftLeg.addBox(-2,9,-3,2,2,3);

rightLeg.setTextureOffset(0,10);
leftLeg.addBox(-2,11,-4,2,1,3);



}
var CyndaquilRenderer = Renderer.createHumanoidRenderer();
addCyndaquilRenderer(CyndaquilRenderer);

function addChimcharRenderer(renderer){

var model = renderer.getModel();
var head = model.getPart("head");
var body = model.getPart("body");
var leftArm = model.getPart("leftArm");
var rightArm = model.getPart("rightArm");
var leftLeg = model.getPart("leftLeg");
var rightLeg = model.getPart("rightLeg");

head.clear();
body.clear();
leftArm.clear();
rightArm.clear();
leftLeg.clear();
rightLeg.clear();

body.setTextureOffset(0,0);
body.addBox(-3,15,-4,6,6,2);
body.setTextureOffset(17,0);
body.addBox(-1,18,-2,2,2,2);
body.setTextureOffset(26,0);
body.addBox(-1,17,-1,1,1,1);
body.setTextureOffset(31,0)
body.addBox(-3,10,-5,6,5,4);
body.setTextureOffset(0,11);
body.addBox(-1,9,-4,2,1,2);
body.setTextureOffset(10,11);
body.addBox(-1,8,-3,1,1,1);

leftArm.setTextureOffset(16,10);
leftArm.addBox(-2,13,-4,1,4,2);

rightArm.setTextureOffset(16,10);
rightArm.addBox(1,13,-4,1,4,2);

leftLeg.setTextureOffset(26,13);
leftLeg.addBox(-1,9,-4,2,2,2);
leftLeg.setTextureOffset(37,13);
leftLeg.addBox(-1,10,-5,2,1,3);

rightLeg.setTextureOffset(26,13);
rightLeg.addBox(-1,9,-4,2,2,2);
rightLeg.setTextureOffset(37,13);
rightLeg.addBox(-1,10,-5,2,1,3);
}

var ChimcharRenderer = Renderer.createHumanoidRenderer();
addChimcharRenderer(ChimcharRenderer);



function addPikachuRenderer(renderer){

var model = renderer.getModel();
var head = model.getPart("head");
var body = model.getPart("body");
var leftArm = model.getPart("leftArm");
var rightArm = model.getPart("rightArm");
var leftLeg = model.getPart("leftLeg");
var rightLeg = model.getPart("rightLeg");


head.clear();
body.clear();
leftArm.clear();
rightArm.clear();
leftLeg.clear();
rightLeg.clear();

//head
body.setTextureOffset(0,0);
body.addBox(-5,11,-4,6,5,5);

//body
body.setTextureOffset(23,0);
body.addBox(-5,16,-3,6,7,4);

//arms
body.setTextureOffset(44,0);
body.addBox(-5,17,-4,1,2,1);
body.addBox(0,17,-4,1,2,1);

//ears
//left ear
body.setTextureOffset(49,0);
body.addBox(0,10,-2,1,1,1);
body.setTextureOffset(54,0);
body.addBox(1,9.7,-2,2,1,1);

//right ear
body.setTextureOffset(49,0);
body.addBox(-5,10,-2,1,1,1);
body.setTextureOffset(44,4);
body.addBox(-5.6,8.3,-2,1,2,1);

//tail
body.setTextureOffset(49,4);
body.addBox(-2.5,20,1,1,2,1);

body.setTextureOffset(54,4);
body.addBox(-2.5,19,2,1,2,1);

body.setTextureOffset(44,8);
body.addBox(-2.5,17,3,1,4,1);

body.setTextureOffset(49,8);
body.addBox(-2.5,13,4,1,7,1);

body.setTextureOffset(54,8);
body.addBox(-2.5,13,5,1,6,1);

body.setTextureOffset(60,8);
body.addBox(-2.5,13,6,1,5,1);

//right leg
rightLeg.setTextureOffset(0,11);
rightLeg.addBox(-3,11,-4,2,1,3);

//left leg
leftLeg.setTextureOffset(0,11);
leftLeg.addBox(-3,11,-4,2,1,3);
}
var PikachuRenderer = Renderer.createHumanoidRenderer();
addPikachuRenderer(PikachuRenderer);




function addPiplupRenderer(renderer){
var model = renderer.getModel();
var head = model.getPart("head");
var body = model.getPart("body");
var leftArm = model.getPart("leftArm");
var rightArm = model.getPart("rightArm");
var leftLeg = model.getPart("leftLeg");
var rightLeg = model.getPart("rightLeg");

head.clear();
body.clear();
leftArm.clear();
rightArm.clear();
leftLeg.clear();
rightLeg.clear();

body.setTextureOffset(0,0);
body.addBox(-3,16,-3,6,6,3);
body.setTextureOffset(20,0);
body.addBox(-2,16,0,4,4,1);
body.setTextureOffset(32,0);
body.addBox(-2,18,1,1,1,1);
body.setTextureOffset(32,0); 
body.addBox(1,18,1,1,1,1);
body.setTextureOffset(38,0);
body.addBox(-3,11,-4,6,5,5);
body.setTextureOffset(0,11);
body.addBox(-2,10,-3,4,1,3);
body.setTextureOffset(18,11);
body.addBox(-1,14,-5,2,1,1);
rightArm.setTextureOffset(26,11);
rightArm.addBox(1,14,-3,1,4,3);
rightArm.setTextureOffset(59,12);
rightArm.addBox(1,18,-2,1,1,1);
leftArm.setTextureOffset(26,11); 
leftArm.addBox(-2,14,-3,1,4,3);
leftArm.setTextureOffset(59,12);
leftArm.addBox(-2,18,-2,1,1,1);
rightLeg.setTextureOffset(37,13);
rightLeg.addBox(-1,9,-3,2,1,2);
rightLeg.setTextureOffset(48,13);
rightLeg.addBox(-1,10,-4,2,1,3);
leftLeg.setTextureOffset(37,13);
leftLeg.addBox(-1,9,-3,2,1,2);
leftLeg.setTextureOffset(48,13);
leftLeg.addBox(-1,10,-4,2,1,3);
}

var PiplupRenderer = Renderer.createHumanoidRenderer(); addPiplupRenderer(PiplupRenderer);

function addTotodileRenderer(renderer){

var model = renderer.getModel();
var head = model.getPart("head");
var body = model.getPart("body");
var leftArm = model.getPart("leftArm");
var rightArm = model.getPart("rightArm");
var leftLeg = model.getPart("leftLeg");
var rightLeg = model.getPart("rightLeg");

head.clear();
body.clear();
leftArm.clear();
rightArm.clear();
leftLeg.clear();
rightLeg.clear();

body.setTextureOffset(0,0);
body.addBox(-4,16,-4,6,7,4);
body.setTextureOffset(22,0);
body.addBox(-3,21,-1,4,2,2);
body.setTextureOffset(36,0);
body.addBox(-2,21,1,2,2,3);
body.setTextureOffset(47,0);
body.addBox(-2,20,2,1,1,1);
body.setTextureOffset(47,0);
body.addBox(-2,19,0,1,1,1);
body.setTextureOffset(47,0);
body.addBox(-1,17,0,1,1,1);
body.setTextureOffset(22,7);
body.addBox(-4,11,-5,6,5,5);
body.setTextureOffset(47,7);
body.addBox(-4,13,-7,6,3,2);
body.setTextureOffset(1,13);
body.addBox(-3,10,-4,4,1,3);

leftArm.setTextureOffset(2,19);
leftArm.addBox(-3,14,-4,1,4,1);

rightArm.setTextureOffset(2,19);
rightArm.addBox(0,14,-3,1,4,1);

leftLeg.setTextureOffset(8,19);
leftLeg.addBox(-1,10,-5,2,1,4);
leftLeg.setTextureOffset(8,19);
leftLeg.addBox(0,8,-4,1,3,3);

rightLeg.setTextureOffset(8,19);
rightLeg.addBox(-3,10,-5,2,1,4);
rightLeg.setTextureOffset(8,19);
rightLeg.addBox(-3,8,-4,1,3,3);
}

var TotodileRenderer = Renderer.createHumanoidRenderer();
addTotodileRenderer(TotodileRenderer);

function addIvysaurRenderer(renderer){
var model = renderer.getModel();
var head = model.getPart("head").clear();
var body = model.getPart("body").clear();
var rArm = model.getPart("rightArm").clear();
var lArm = model.getPart("leftArm").clear();
var rLeg = model.getPart("rightLeg").clear();
var lLeg = model.getPart("leftLeg").clear();
rLeg.setTextureOffset( 0, 22);
rLeg.addBox(-4,6,-5, 4, 6, 4);
lLeg.setTextureOffset( 0, 22);
lLeg.addBox(2,6,-5, 4, 6, 4);
rLeg.setTextureOffset( 0, 22);
rLeg.addBox(-4,6,5, 4, 6, 4);
lLeg.setTextureOffset( 0, 22);
lLeg.addBox(2,6,5, 4, 6, 4);
body.setTextureOffset( 0, 0);
body.addBox(-4,12,-4, 10, 8, 12);
body.setTextureOffset( 44, 22);
body.addBox(-1.5,8,0.5, 5, 5, 5);
head.setTextureOffset( 32, 0);
head.addBox(-3,12,-12, 8, 8, 8);
body.setTextureOffset( 19, 21, true);
body.addBox(-2.5,11,-8, 7, 0, 11);
body.setTextureOffset( 9, 25, true);
body.addBox(-10,11,-1, 11, 0, 7);
body.setTextureOffset( -18, 0, true);
body.addBox(1,11,0, 11, 0, 7);
body.setTextureOffset( 12, 21, true);
body.addBox(-2.5,11,3, 7, 0, 11);
}
var IvysaurRenderer = Renderer.createHumanoidRenderer();
addIvysaurRenderer(IvysaurRenderer);

function addVenusaurRenderer(renderer){
var model = renderer.getModel();
var head = model.getPart("head").clear();
var body = model.getPart("body").clear().setTextureSize(128,128);
var rArm = model.getPart("rightArm").clear();
var lArm = model.getPart("leftArm").clear();
var rLeg = model.getPart("rightLeg").clear().setTextureSize(128,128);
var lLeg = model.getPart("leftLeg").clear().setTextureSize(128,128);
lLeg.setTextureOffset( 56, 28, true);
lLeg.addBox(3,0,-8, 8, 12, 8);
rLeg.setTextureOffset( 56, 28, true);
rLeg.addBox(-11,0,-8, 8, 12, 8);
lLeg.setTextureOffset( 56, 28, true);
lLeg.addBox(2,0,12, 8, 12, 8);
rLeg.setTextureOffset( 56, 28, true);
rLeg.addBox(-10,0,12, 8, 12, 8);
body.setTextureOffset( 0, 0, true);
body.addBox(-10,4,-4, 20, 12, 24);
body.setTextureOffset( 0, 32, true);
body.addBox(-12,1,-16, 24, 16, 16);
body.setTextureOffset( 88, 40, true);
body.addBox(-4,-12,6, 8, 16, 8);
body.setTextureOffset( 72, 0, true);
body.addBox(-6,-16.1,4, 12, 4, 12);
body.setTextureOffset( 68, 64, true);
body.addBox(-5,-12,10, 12, 0, 20);
body.setTextureOffset( 56, 64, true);
body.addBox(-6,-12,-12, 12, 0, 20);
body.setTextureOffset( 72, 110, true);
body.addBox(-22,-12,4, 20, 0, 12);
body.setTextureOffset( 4, 110, true);
body.addBox(2,-12,4, 20, 0, 12);
body.setTextureOffset( 0, 64, true);
body.addBox(-8,0,10, 16, 0, 32);
body.setTextureOffset( -16, 94, true);
body.addBox(0,0,2, 32, 0, 16);
body.setTextureOffset( 48, 94, true);
body.addBox(-32,0,2, 32, 0, 16);
}
var VenusaurRenderer = Renderer.createHumanoidRenderer();
addVenusaurRenderer(VenusaurRenderer);

function addCharmanderRenderer(renderer){
var model = renderer.getModel();
var head = model.getPart("head").clear();
var body = model.getPart("body").clear();
var rArm = model.getPart("rightArm").clear();
var lArm = model.getPart("leftArm").clear();
var rLeg = model.getPart("rightLeg").clear();
var lLeg = model.getPart("leftLeg").clear();
lLeg.setTextureOffset( 0, 21);
lLeg.addBox(0,7,1, 3, 5, 3);
rLeg.setTextureOffset( 0, 13);
rLeg.addBox(-2,7,1, 3, 5, 3);
body.setTextureOffset( 16, 16);
body.addBox(-2.5,11,0.5, 6, 10, 5);
rArm.setTextureOffset( 56, 0);
rArm.addBox(0.5,10,1, 2, 5, 2);
lArm.setTextureOffset( 56, 0);
lArm.addBox(-1.5,10,1, 2, 5, 2);
head.setTextureOffset( 0, 0);
head.addBox(-2.5,3,0.5, 6, 8, 5);
head.setTextureOffset( 38, 16);
head.addBox(-3,7.5,0, 7, 4, 4);
body.setTextureOffset( 22, 0);
body.addBox(-0.5,18,5.5, 2, 2, 4);
body.setTextureOffset( 22, 6);
body.addBox(0,19,9, 1, 1, 4);
body.setTextureOffset( 35, 0, true);
body.addBox(0.5,15,11, 0, 4, 3);
}
var CharmanderRenderer = Renderer.createHumanoidRenderer();
addCharmanderRenderer(CharmanderRenderer);


function addCharizardRenderer(renderer){
var model = renderer.getModel();
var head = model.getPart("head").clear();
var body = model.getPart("body").clear();
var rArm = model.getPart("rightArm").clear();
var lArm = model.getPart("leftArm").clear();
var rLeg = model.getPart("rightLeg").clear();
var lLeg = model.getPart("leftLeg").clear();
body.setTextureOffset( 0, 8);
body.addBox(-3,9,0, 7, 12, 6);
rLeg.setTextureOffset( 14, 14);
rLeg.addBox(-3,8,-1, 3, 4, 3);
lLeg.setTextureOffset( 14, 14);
lLeg.addBox(1,8,-1, 3, 4, 3);
body.setTextureOffset( 10, 14);
body.addBox(-9,9,1, 6, 2, 2);
body.setTextureOffset( 10, 14);
body.addBox(4,9,1, 6, 2, 2);
body.setTextureOffset( 14, 14);
body.addBox(-1,2,0, 3, 7, 3);
body.setTextureOffset( 0, 0);
body.addBox(-1.5,-1,-1.5, 4, 3, 5);
body.setTextureOffset( 13, 0);
body.addBox(-1,0,-4.5, 3, 2, 3);
body.setTextureOffset( 13, 14);
body.addBox(-1,-2,2, 1, 1, 5);
body.setTextureOffset( 13, 14);
body.addBox(1,-2,2, 1, 1, 5);
body.setTextureOffset( 26, 0, true);
body.addBox(-20,-3,6, 19, 15, 0);
body.setTextureOffset( 26, 15, true);
body.addBox(2,-3,6, 19, 15, 0);
body.setTextureOffset( 13, 14);
body.addBox(-1.5,16,6, 4, 4, 2);
body.setTextureOffset( 13, 14);
body.addBox(-1.5,16,8, 4, 4, 2);
body.setTextureOffset( 13, 14);
body.addBox(-1,16.5,10, 3, 3, 2);
body.setTextureOffset( 13, 14);
body.addBox(-1,16.5,12, 3, 3, 2);
body.setTextureOffset( 13, 14);
body.addBox(-1,16.5,14, 3, 3, 2);
body.setTextureOffset( 13, 14);
body.addBox(-0.5,17,16, 2, 2, 2);
body.setTextureOffset( 13, 14);
body.addBox(-0.5,17,18, 2, 2, 2);
body.setTextureOffset( 20, 2, true);
body.addBox(0.5,9.5,17.5, 0, 8, 4);
}
var CharizardRenderer = Renderer.createHumanoidRenderer();
addCharizardRenderer(CharizardRenderer);

function addBulbasaurRenderer(renderer) {
var model = renderer.getModel(); 
var head = model.getPart("head"); 
var body = model.getPart("body"); 
var rightArm = model.getPart("rightArm"); 
var leftArm = model.getPart("leftArm"); 
var rightLeg = model.getPart("rightLeg");
var leftLeg = model.getPart("leftLeg"); 

head.clear(); 

body.clear(); 
body.setTextureOffset(0, 0);
body.addBox(-3.0, 12.0, -7.0, 2, 3, 2);
body.setTextureOffset(0, 0);
body.addBox(2.0, 12.0, -7.0, 2, 3, 2);
body.setTextureOffset(0, 0);
body.addBox(-2.0, 12.5, -9.0, 5, 1, 4);
body.setTextureOffset(0, 17);
body.addBox(-3.0, 10.0, -3.0, 7, 3, 7);
body.setTextureOffset(0, 17);
body.addBox(-4.0, 12.0, -4.0, 9, 5, 9);
body.setTextureOffset(0, 0);
body.addBox(-5.0, 15.0, -5.0, 11, 6, 11);
body.setTextureOffset(36, 17);
body.addBox(-3.0, 13.0, -10.0, 7, 6, 5);

rightArm.clear(); 

leftArm.clear(); 

rightLeg.clear();
rightLeg.setTextureOffset(44, 0);
rightLeg.addBox(-4.0, 7.0, 3.0, 2, 5, 2);
rightLeg.setTextureOffset(44, 0);
rightLeg.addBox(-4.0, 7.0, -4.0, 2, 5, 2);

leftLeg.clear(); 
leftLeg.setTextureOffset(44, 0);
leftLeg.addBox(3.0, 7.0, 3.0, 2, 5, 2);
leftLeg.setTextureOffset(44, 0);
leftLeg.addBox(3.0, 7.0, -4.0, 2, 5, 2);
} 

var BulbasaurRenderer = Renderer.createHumanoidRenderer(); addBulbasaurRenderer(BulbasaurRenderer);

function addChikoritaRenderer(renderer){

var model = renderer.getModel();
var head = model.getPart("head");
var body = model.getPart("body");
var leftArm = model.getPart("leftArm");
var rightArm = model.getPart("rightArm");
var leftLeg = model.getPart("leftLeg");
var rightLeg = model.getPart("rightLeg");

head.clear();
body.clear();
leftArm.clear();
rightArm.clear();
leftLeg.clear();
rightLeg.clear();

body.setTextureOffset(0,0);
body.addBox(-5,18,-5,9,4,10);
body.setTextureOffset(41,0);
body.addBox(-5,18,-6,1,1,1);
body.setTextureOffset(41,0);
body.addBox(-3,18,-6,1,1,1);
body.setTextureOffset(41,0);
body.addBox(-1,18,-6,1,1,1);
body.setTextureOffset(41,0);
body.addBox(1,18,-6,1,1,1);
body.setTextureOffset(41,0);
body.addBox(3,18,-6,1,1,1);
body.setTextureOffset(0,17);
body.addBox(-5,12,-5,9,6,5);
body.setTextureOffset(46,0);
body.addBox(-1,10,-4,1,2,2);
body.setTextureOffset(46,0);
body.addBox(-1,9,-3,1,2,2);
body.setTextureOffset(46,0);
body.addBox(-1,8,-2,1,2,2);
body.setTextureOffset(46,0);
body.addBox(-1,7,-1,1,2,2);
body.setTextureOffset(46,0);
body.addBox(-1,6,0,1,3,3);

leftLeg.setTextureOffset(41,13);
leftLeg.addBox(0,9,-5,2,2,2);
leftLeg.setTextureOffset(41,13);
leftLeg.addBox(0,9,3,2,2,2);

rightLeg.setTextureOffset(41,13);
rightLeg.addBox(-3,9,-5,2,2,2);
rightLeg.setTextureOffset(41,13);
rightLeg.addBox(-3,9,3,2,2,2);
}

var ChikoritaRenderer = Renderer.createHumanoidRenderer();
addChikoritaRenderer(ChikoritaRenderer);

function addGastlyRenderer(renderer){

var model = renderer.getModel();
var head = model.getPart("head");
var body = model.getPart("body");
var leftArm = model.getPart("leftArm");
var rightArm = model.getPart("rightArm");
var leftLeg = model.getPart("leftLeg");
var rightLeg = model.getPart("rightLeg");

head.clear();
body.clear();
leftArm.clear();
rightArm.clear();
leftLeg.clear();
rightLeg.clear();

body.setTextureOffset(0,0);
body.addBox(-8, 0, -8, 16, 16, 16);
}

var GastlyRenderer = Renderer.createHumanoidRenderer();
addGastlyRenderer(GastlyRenderer);

function addWartortleRenderer(renderer){
var model = renderer.getModel();
var head = model.getPart("head").clear();
var body = model.getPart("body").clear();
var rArm = model.getPart("rightArm").clear();
var lArm = model.getPart("leftArm").clear();
var rLeg = model.getPart("rightLeg").clear();
var lLeg = model.getPart("leftLeg").clear();
rLeg.setTextureOffset( 0, 16, true);
rLeg.addBox(-2,7,0, 3, 5, 3);
lLeg.setTextureOffset( 0, 24, true);
lLeg.addBox(0,7,0, 3, 5, 3);
body.setTextureOffset( 16, 14, true);
body.addBox(-3,10,-1, 7, 11, 7);
body.setTextureOffset( 41, 0, true);
body.addBox(0.5,14,6, 0, 7, 10);
head.setTextureOffset( 0, 0, true);
head.addBox(-3,3,-2, 7, 7, 7);
rArm.setTextureOffset( 52, 0, true);
rArm.addBox(-1,10,0, 3, 5, 3);
lArm.setTextureOffset( 52, 0, true);
lArm.addBox(-1,10,1, 3, 5, 3);
head.setTextureOffset( 29, 0, true);
head.addBox(-3.1,-1,2, 0, 6, 4);
head.setTextureOffset( 29, 0, true);
head.addBox(4.1,-1,2, 0, 6, 4);
}
var WartortleRenderer = Renderer.createHumanoidRenderer();
addWartortleRenderer(WartortleRenderer);

function addBlastoiseRenderer(renderer){
var model = renderer.getModel();
var head = model.getPart("head").clear();
var body = model.getPart("body").clear();
var rArm = model.getPart("rightArm").clear();
var lArm = model.getPart("leftArm").clear();
var rLeg = model.getPart("rightLeg").clear();
var lLeg = model.getPart("leftLeg").clear();
rLeg.setTextureOffset( 0, 12, true);
rLeg.addBox(-4.5,6,-0.5, 4, 6, 4);
lLeg.setTextureOffset( 0, 22, true);
lLeg.addBox(0.5,6,-0.5, 4, 6, 4);
body.setTextureOffset( 16, 8, true);
body.addBox(-6,4,0, 12, 16, 8);
head.setTextureOffset( 0, 0, true);
head.addBox(-3,-2,-1, 6, 6, 6);
head.setTextureOffset( 18, 0, true);
head.addBox(-3,0.5,-1.5, 6, 3, 3);
body.setTextureOffset( 56, 22, true);
body.addBox(-5,0,6, 1, 4, 1);
body.setTextureOffset( 56, 27, true);
body.addBox(-5.5,-3,5.5, 2, 3, 2);
body.setTextureOffset( 56, 22, true);
body.addBox(4,0,6, 1, 4, 1);
body.setTextureOffset( 56, 27, true);
body.addBox(3.5,-3,5.5, 2, 3, 2);
rArm.setTextureOffset( 52, 0, true);
rArm.addBox(-4,4,0, 3, 5, 3);
lArm.setTextureOffset( 52, 0, true);
lArm.addBox(1,4,0, 3, 5, 3);
}
var BlastoiseRenderer = Renderer.createHumanoidRenderer();
addBlastoiseRenderer(BlastoiseRenderer);

function addCaterpieRenderer(renderer){
var model = renderer.getModel();
var head = model.getPart("head").clear();
var body = model.getPart("body").clear();
var rArm = model.getPart("rightArm").clear();
var lArm = model.getPart("leftArm").clear();
var rLeg = model.getPart("rightLeg").clear();
var lLeg = model.getPart("leftLeg").clear();
body.setTextureOffset( 0, 10, true);
body.addBox(0,20,0, 5, 4, 4);
body.setTextureOffset( 0, 0, true);
body.addBox(0,18,-5, 5, 5, 5);
body.setTextureOffset( 0, 18, true);
body.addBox(1,20,4, 3, 3, 3);
body.setTextureOffset( 0, 24, true);
body.addBox(1.5,19,7, 2, 2, 2);
}
var CaterpieRenderer = Renderer.createHumanoidRenderer();
addCaterpieRenderer(CaterpieRenderer);

function addWeepinbellRenderer(renderer) { 
var model = renderer.getModel(); 
var head = model.getPart("head"); 
var body = model.getPart("body"); 
var rightArm = model.getPart("rightArm"); 
var leftArm = model.getPart("leftArm"); 
var rightLeg = model.getPart("rightLeg"); 
var leftLeg = model.getPart("leftLeg"); 

head.clear(); 

body.clear(); 
body.setTextureOffset(1, 0); 
body.addBox(-3.0, 17.0, -5.0, 6, 6, 8); 
body.setTextureOffset(0, 20); 
body.addBox(-2.0, 16.0, -6.0, 4, 1, 1); 
body.setTextureOffset(0, 20); 
body.addBox(2.0, 17.0, -6.0, 1, 1, 1); 
body.setTextureOffset(0, 20); 
body.addBox(-3.0, 17.0, -6.0, 1, 1, 1); 
body.setTextureOffset(0, 20); 
body.addBox(-4.0, 18.0, -6.0, 1, 4, 1); 
body.setTextureOffset(0, 20); 
body.addBox(2.0, 22.0, -6.0, 1, 1, 1); 
body.setTextureOffset(0, 20); 
body.addBox(3.0, 18.0, -6.0, 1, 4, 1); 
body.setTextureOffset(0, 20); 
body.addBox(-2.0, 23.0, -6.0, 4, 1, 1); 
body.setTextureOffset(0, 20); 
body.addBox(-3.0, 22.0, -6.0, 1, 1, 1); 
body.setTextureOffset(1, 0); 
body.addBox(-4.0, 18.0, -5.0, 8, 4, 8); 
body.setTextureOffset(1, 0); 
body.addBox(-2.0, 16.0, -5.0, 4, 8, 8); 
body.setTextureOffset(1, 0); 
body.addBox(-4.0, 9.0, 0.0, 8, 13, 5); 
body.setTextureOffset(20, 0); 
body.addBox(-3.0, 9.0, -1.0, 6, 13, 7); 
body.setTextureOffset(1, 0); 
body.addBox(-3.0, 8.0, 0.0, 6, 1, 5); 
body.setTextureOffset(1, 0); 
body.addBox(-2.0, 7.0, 1.0, 4, 1, 3); 
body.setTextureOffset(39, 0); 
body.addBox(-1.0, 5.0, 1.5, 2, 2, 2); 
body.setTextureOffset(39, 0); 
body.addBox(-1.0, 4.0, 2.0, 2, 2, 3); 
body.setTextureOffset(49, 19); 
body.addBox(-3.0, 18.0, -6.0, 6, 4, 1); 
body.setTextureOffset(49, 19); 
body.addBox(-2.0, 17.0, -6.0, 4, 6, 1); 

rightArm.clear(); 
rightArm.setTextureOffset(49, 0); 
rightArm.addBox(-2.0, 16.0, 1.0, 4, 1, 4); 
rightArm.setTextureOffset(49, 0); 
rightArm.addBox(-3.0, 16.0, 2.0, 4, 1, 2); 

leftArm.clear(); 
leftArm.setTextureOffset(49, 0); 
leftArm.addBox(-1.0, 16.0, 2.0, 4, 1, 2); 
leftArm.setTextureOffset(49, 0); 
leftArm.addBox(-2.0, 16.0, 1.0, 4, 1, 4); 

rightLeg.clear();

leftLeg.clear();
}

var WeepinbellRenderer = Renderer.createHumanoidRenderer();
addWeepinbellRenderer(WeepinbellRenderer);

function addSquirtleRenderer(renderer) { 
var model = renderer.getModel(); 
var head = model.getPart("head"); 
var body = model.getPart("body"); 
var rightArm = model.getPart("rightArm"); 
var leftArm = model.getPart("leftArm"); 
var rightLeg = model.getPart("rightLeg"); 
var leftLeg = model.getPart("leftLeg"); 

head.clear(); 

body.clear(); 
body.setTextureOffset(0, 11); 
body.addBox(-4.0, 12.0, -3.0, 7, 9, 5); 
body.setTextureOffset(21, 0); 
body.addBox(-3.0, 13.0, 2.0, 5, 7, 1); 
body.setTextureOffset(34, 0); 
body.addBox(-4.5, 12.0, -2.0, 1, 8, 3); 
body.setTextureOffset(43, 0); 
body.addBox(2.5, 12.0, -2.0, 1, 8, 3); 
body.setTextureOffset(25, 12); 
body.addBox(-4.0, 5.0, -4.0, 7, 7, 5); 
body.setTextureOffset(0, 0); 
body.addBox(-3.0, 6.0, 0.5, 5, 5, 1); 
body.setTextureOffset(0, 0); 
body.addBox(2.5, 6.0, -3.0, 1, 5, 3); 
body.setTextureOffset(0, 0); 
body.addBox(-4.5, 6.0, -3.0, 1, 5, 3); 
body.setTextureOffset(0, 0); 
body.addBox(-1.0, 19.0, 2.0, 1, 2, 2); 
body.setTextureOffset(0, 0); 
body.addBox(-1.0, 18.0, 4.0, 1, 3, 1); 
body.setTextureOffset(0, 0); 
body.addBox(-1.0, 18.0, 9.0, 1, 2, 1); 
body.setTextureOffset(52, 0); 
body.addBox(-1.0, 17.0, 5.0, 1, 4, 4); 

rightArm.clear(); 
rightArm.setTextureOffset(0, 0); 
rightArm.addBox(-1.0, 11.0, -2.0, 2, 3, 2); 

leftArm.clear(); 
leftArm.setTextureOffset(0, 0); 
leftArm.addBox(-2.0, 11.0, -2.0, 2, 3, 2); 

rightLeg.clear(); 
rightLeg.setTextureOffset(0, 0); 
rightLeg.addBox(-3.0, 8.0, -3.0, 3, 4, 3); 

leftLeg.clear(); 
leftLeg.setTextureOffset(0, 0); 
leftLeg.addBox(-1.0, 8.0, -3.0, 3, 4, 3); 
} 

var SquirtleRenderer = Renderer.createHumanoidRenderer(); addSquirtleRenderer(SquirtleRenderer);

function addDoduoRenderer(renderer) { 
var model = renderer.getModel(); 
var head = model.getPart("head"); 
var body = model.getPart("body"); 
var rightArm = model.getPart("rightArm"); 
var leftArm = model.getPart("leftArm"); 
var rightLeg = model.getPart("rightLeg"); 
var leftLeg = model.getPart("leftLeg"); 

head.clear(); 

body.clear(); 
body.setTextureOffset(0, 0); 
body.addBox(-6.0, 4.0, -2.0, 12, 11, 5); 
body.setTextureOffset(0, 0); 
body.addBox(-5.0, 5.0, -3.0, 10, 9, 1); 
body.setTextureOffset(0, 0); 
body.addBox(-4.0, 6.0, -4.0, 8, 7, 1); 
body.setTextureOffset(0, 0); 
body.addBox(-7.0, 5.0, -1.0, 1, 9, 3); 
body.setTextureOffset(0, 0); 
body.addBox(6.0, 5.0, -1.0, 1, 9, 3); 
body.setTextureOffset(0, 0); 
body.addBox(-5.0, 5.0, 3.0, 10, 9, 1); 
body.setTextureOffset(21, 17); 
body.addBox(-5.0, -2.0, -2.0, 1, 6, 1); 
body.setTextureOffset(21, 17); 
body.addBox(4.0, -1.0, -2.0, 1, 5, 1); 
body.setTextureOffset(21, 17); 
body.addBox(-6.0, -2.0, -2.0, 3, 1, 1); 
body.setTextureOffset(21, 17); 
body.addBox(-5.0, -2.0, -3.0, 1, 1, 3); 
body.setTextureOffset(21, 17); 
body.addBox(3.0, -1.0, -2.0, 3, 1, 1); 
body.setTextureOffset(21, 17); 
body.addBox(4.0, -1.0, -3.0, 1, 1, 3); 
body.setTextureOffset(0, 0); 
body.addBox(7.0, -8.0, -4.0, 1, 7, 5); 
body.setTextureOffset(0, 0); 
body.addBox(1.0, -8.0, -4.0, 1, 7, 5); 
body.setTextureOffset(0, 0); 
body.addBox(0.5, -7.0, -3.0, 1, 5, 3); 
body.setTextureOffset(0, 0); 
body.addBox(7.5, -7.0, -3.0, 1, 5, 3); 
body.setTextureOffset(0, 0); 
body.addBox(2.0, -7.0, 0.5, 5, 5, 1); 
body.setTextureOffset(52, 0); 
body.addBox(3.0, -4.0, -7.0, 3, 1, 3); 
body.setTextureOffset(52, 0); 
body.addBox(3.5, -3.0, -6.0, 2, 1, 2); 
body.setTextureOffset(0, 17); 
body.addBox(2.0, -8.0, -4.0, 5, 7, 5); 
body.setTextureOffset(0, 0); 
body.addBox(2.0, -8.5, -3.0, 5, 1, 3); 
body.setTextureOffset(0, 0); 
body.addBox(-2.0, -9.0, -4.0, 1, 7, 5); 
body.setTextureOffset(0, 0); 
body.addBox(-8.0, -9.0, -4.0, 1, 7, 5); 
body.setTextureOffset(0, 0); 
body.addBox(-8.5, -8.0, -3.0, 1, 5, 3); 
body.setTextureOffset(0, 0); 
body.addBox(-1.5, -8.0, -3.0, 1, 5, 3); 
body.setTextureOffset(0, 0); 
body.addBox(-7.0, -8.0, 0.5, 5, 5, 1); 
body.setTextureOffset(52, 0); 
body.addBox(-6.0, -5.0, -7.0, 3, 1, 3); 
body.setTextureOffset(52, 0); 
body.addBox(-5.5, -4.0, -6.0, 2, 1, 2); 
body.setTextureOffset(0, 17); 
body.addBox(-7.0, -9.0, -4.0, 5, 7, 5); 
body.setTextureOffset(0, 0); 
body.addBox(-7.0, -9.5, -3.0, 5, 1, 3); 

rightArm.clear(); 

leftArm.clear(); 

rightLeg.clear(); 
rightLeg.setTextureOffset(52, 0); 
rightLeg.addBox(-2.0, 3.0, 0.0, 1, 9, 1); 
rightLeg.setTextureOffset(52, 0); 
rightLeg.addBox(-4.0, 11.0, 0.0, 5, 1, 1); rightLeg.setTextureOffset(52, 0); 
rightLeg.addBox(-3.0, 11.0, -2.0, 1, 1, 3); rightLeg.setTextureOffset(52, 0); 
rightLeg.addBox(-2.0, 11.0, -1.0, 1, 1, 3); rightLeg.setTextureOffset(52, 0); 
rightLeg.addBox(-1.0, 11.0, -2.0, 1, 1, 3);

leftLeg.clear(); 
leftLeg.setTextureOffset(52, 0); 
leftLeg.addBox(1.0, 3.0, 0.0, 1, 9, 1); 
leftLeg.setTextureOffset(52, 0); 
leftLeg.addBox(-1.0, 11.0, 0.0, 5, 1, 1); 
leftLeg.setTextureOffset(52, 0); 
leftLeg.addBox(0.0, 11.0, -2.0, 1, 1, 3); 
leftLeg.setTextureOffset(52, 0); 
leftLeg.addBox(1.0, 11.0, -1.0, 1, 1, 3); 
leftLeg.setTextureOffset(52, 0); 
leftLeg.addBox(2.0, 11.0, -2.0, 1, 1, 3); 
} 

var DoduoRenderer = Renderer.createHumanoidRenderer(); addDoduoRenderer(DoduoRenderer); 

function addKrabbyRenderer(renderer) { 
var model = renderer.getModel(); 
var head = model.getPart("head"); 
var body = model.getPart("body"); 
var rightArm = model.getPart("rightArm"); 
var leftArm = model.getPart("leftArm"); 
var rightLeg = model.getPart("rightLeg");
var leftLeg = model.getPart("leftLeg"); 

head.clear(); 

body.clear(); 
body.setTextureOffset(36, 19); 
body.addBox(-2.5, 14, -4.0, 6, 5, 8); 
body.setTextureOffset(0, 0); 
body.addBox(1.5, 19.0, 3.0, 3, 2, 3); 
body.setTextureOffset(0, 0); 
body.addBox(-3.0, 19.0, -5.0, 7.0, 1.0, 10.0); 
body.setTextureOffset(0, 0); 
body.addBox(-3.5, 19.0, -6.0, 3, 2, 3);
body.setTextureOffset(0, 0); 
body.addBox(1.5, 19.0, -6.0, 3, 2, 3);
body.setTextureOffset(0, 0); 
body.addBox(-3.5, 19.0, 3.0, 3, 2, 3);
body.setTextureOffset(52, 0); 
body.addBox(3.0, 15.0, 1.0, 1, 2, 2);
body.setTextureOffset(58, 0); 
body.addBox(3.0, 15.0, -3.0, 1, 2, 2);
body.setTextureOffset(52, 25); 
body.addBox(1.0, 12.0, 1.0, 1, 2, 1);
body.setTextureOffset(46, 27); 
body.addBox(1.0, 12.0, -2.0, 1, 2, 1);
body.setTextureOffset(45, 24); 
body.addBox(0.0, 14.0, 5.0, 2, 1, 4);
body.setTextureOffset(49, 25); 
body.addBox(0.0, 11.0, 7.0, 2, 3, 2);
body.setTextureOffset(0, 0); 
body.addBox(0.5, 17.0, 4.0, 1, 1, 3);
body.setTextureOffset(0, 0); 
body.addBox(0.5, 15.0, 6.5, 1, 3, 1);
body.setTextureOffset(0, 0); 
body.addBox(0.5, 17.0, -7.0, 1, 1, 3);
body.setTextureOffset(0, 0); 
body.addBox(0.5, 15.0, -7.5, 1, 3, 1);
body.setTextureOffset(46, 23); 
body.addBox(0.0, 11.0, -9.0, 2, 3, 2);
body.setTextureOffset(45, 27); 
body.addBox(0.0, 14.0, -9.0, 2, 1, 3);
body.setTextureOffset(42, 27); 
body.addBox(0.0, 12.0, -6.5, 2, 2, 1);

rightArm.clear(); 

leftArm.clear(); 

rightLeg.clear();
rightLeg.setTextureOffset(0, 0); 
rightLeg.addBox(-1.0, 11.0, -7.0, 2, 1, 3); 
rightLeg.setTextureOffset(0, 0); 
rightLeg.addBox(4.0, 11.0, 4.0, 2, 1, 3); 
rightLeg.setTextureOffset(0, 0);
rightLeg.addBox(4.5, 8.0, 4.0, 1, 3, 1);
rightLeg.setTextureOffset(0, 0); 
rightLeg.addBox(-0.5, 8.0, -5.0, 1, 3, 1); 

leftLeg.clear();
leftLeg.setTextureOffset(0, 0); 
leftLeg.addBox(0.0, 11.0, -7.0, 2, 1, 3); 
leftLeg.setTextureOffset(0, 0); 
leftLeg.addBox(-5.0, 11.0, 4.0, 2, 1, 3); 
leftLeg.setTextureOffset(0, 0); 
leftLeg.addBox(-4.5, 8.0, 4.0, 1, 3, 1); 
leftLeg.setTextureOffset(0, 0); 
leftLeg.addBox(0.5, 8.0, -5.0, 1, 3, 1); 
}

var KrabbyRenderer = Renderer.createHumanoidRenderer(); addKrabbyRenderer(KrabbyRenderer);

function addVoltorbRenderer(renderer) { 
var model = renderer.getModel(); 
var head = model.getPart("head"); 
var body = model.getPart("body"); 
var rightArm = model.getPart("rightArm"); 
var leftArm = model.getPart("leftArm"); 
var rightLeg = model.getPart("rightLeg");
var leftLeg = model.getPart("leftLeg"); 

head.clear(); 

body.clear(); 
body.setTextureOffset(0, 0); 
body.addBox(-3.0, 15.0, -5.0, 6, 6, 1); 
body.setTextureOffset(11, 12); 
body.addBox(-3.0, 15.0, 4.0, 6, 6, 1); 
body.setTextureOffset(26, 0); 
body.addBox(4.0, 15.0, -3.0, 1, 6, 6); 
body.setTextureOffset(26, 0); 
body.addBox(-5.0, 15.0, -3.0, 1, 6, 6); 
body.setTextureOffset(0, 8); 
body.addBox(-2.0, 16.0, -6.0, 4, 4, 1); 
body.setTextureOffset(45, 9); 
body.addBox(-2.0, 16.0, 5.0, 4, 4, 1); 
body.setTextureOffset(45, 2); 
body.addBox(-2.0, 12.0, -2.0, 4, 1, 4); 
body.setTextureOffset(0, 27); 
body.addBox(-2.0, 23.0, -2.0, 4, 1, 4); 
body.setTextureOffset(15, 1); 
body.addBox(-6.0, 16.0, -2.0, 1, 4, 4); 
body.setTextureOffset(15, 1); 
body.addBox(5.0, 16.0, -2.0, 1, 4, 4); 
body.setTextureOffset(32, 16); 
body.addBox(-4.0, 14.0, -4.0, 8, 8, 8); 
body.setTextureOffset(40, 0); 
body.addBox(-3.0, 13.0, -3.0, 6, 1, 6); 
body.setTextureOffset(0, 20); 
body.addBox(-3.0, 22.0, -3.0, 6, 1, 6); 

rightArm.clear(); 

leftArm.clear(); 

rightLeg.clear();

leftLeg.clear();
}

var VoltorbRenderer = Renderer.createHumanoidRenderer(); addVoltorbRenderer(VoltorbRenderer);

function addDiglettRenderer(renderer) { 
var model = renderer.getModel(); 
var head = model.getPart("head"); 
var body = model.getPart("body"); 
var rightArm = model.getPart("rightArm"); 
var leftArm = model.getPart("leftArm"); 
var rightLeg = model.getPart("rightLeg");
var leftLeg = model.getPart("leftLeg"); 

head.clear(); 

body.clear(); 
body.setTextureOffset(39, 20); 
body.addBox(-3.0, 17.0, -3.0, 6, 6, 6); 
body.setTextureOffset(43, 13); 
body.addBox(-2.0, 16.0, -2.0, 4, 1, 4); 
body.setTextureOffset(1, 20); 
body.addBox(-1.0, 20.5, -4.0, 2, 1, 1); 
body.setTextureOffset(6, 23); 
body.addBox(-4.0, 23.0, -4.0, 8, 1, 8); 
body.setTextureOffset(11, 17); 
body.addBox(-5.0, 22.0, 3.0, 2, 2, 2); 
body.setTextureOffset(0, 0); 
body.addBox(-5.0, 23.0, -2.0, 1, 1, 1);
body.setTextureOffset(0, 0); 
body.addBox(2.0, 23.0, -5.0, 1, 1, 1); 

rightArm.clear(); 

leftArm.clear(); 

rightLeg.clear();

leftLeg.clear();
}

var DiglettRenderer = Renderer.createHumanoidRenderer(); addDiglettRenderer(DiglettRenderer);

function addMareepRenderer(renderer) {
var model = renderer.getModel(); 
var head = model.getPart("head"); 
var body = model.getPart("body"); 
var rightArm = model.getPart("rightArm"); 
var leftArm = model.getPart("leftArm"); 
var rightLeg = model.getPart("rightLeg");
var leftLeg = model.getPart("leftLeg"); 

head.clear(); 

body.clear(); 
body.setTextureOffset(45, 25);
body.addBox(-4.0, 14.0, 6.0, 8, 6, 1);
body.setTextureOffset(52, 1); 
body.addBox(-1.5, 15.0, 7.0, 3, 3, 2); 
body.setTextureOffset(16, 16); 
body.addBox(-1.0, 15.0, 9.0, 2, 2, 2); 
body.setTextureOffset(28, 21); 
body.addBox(-4.0, 12.0, -5.0, 8, 1, 10); 
body.setTextureOffset(28, 21); 
body.addBox(-4.0, 21.0, -5.0, 8, 1, 10);
body.setTextureOffset(20, 12);
body.addBox(-5.0, 13.0, -6.0, 10, 8, 12);
body.setTextureOffset(56, 3); 
body.addBox(-0.5, 15.0, 11.0, 1, 1, 1); 
body.setTextureOffset(5, 7); 
body.addBox(-1.5, 13.0, 12.0, 3, 3, 3); 
body.setTextureOffset(37, 16); 
body.addBox(-6.0, 14.0, -5.0, 1, 6, 10); 
body.setTextureOffset(35, 16); 
body.addBox(5.0, 14.0, -5.0, 1, 6, 10);
body.setTextureOffset(46, 25);
body.addBox(-4.0, 14.0, -7.0, 8, 6, 1); 
body.setTextureOffset(51, 27); 
body.addBox(-1.5, 12.0, -9.0, 3, 2, 3); 
body.setTextureOffset(26, 0); 
body.addBox(-2.0, 14.0, -10.0, 4, 5, 3); 
body.setTextureOffset(0, 0);
body.addBox(2.0, 14.0, -9.0, 1, 2, 2);
body.setTextureOffset(0, 0); 
body.addBox(-3.0, 14.0, -9.0, 1, 2, 2); 
body.setTextureOffset(55, 3);
body.addBox(-4.0, 14.0, -8.5, 1, 1, 1); 
body.setTextureOffset(56, 3); 
body.addBox(3.0, 14.0, -8.5, 1, 1, 1);

rightArm.clear(); 

leftArm.clear(); 

rightLeg.clear();
rightLeg.setTextureOffset(0, 16);
rightLeg.addBox(-2.0, 10.0, 2.0, 2, 2, 2); 
rightLeg.setTextureOffset(0, 16);
rightLeg.addBox(-2.0, 10.0, -4.0, 2, 2, 2); 

leftLeg.clear(); 
leftLeg.setTextureOffset(0, 16);
leftLeg.addBox(0.0, 10.0, 2.0, 2, 2, 2); 
leftLeg.setTextureOffset(0, 16);
leftLeg.addBox(0.0, 10.0, -4.0, 2, 2, 2); 
} 

var MareepRenderer = Renderer.createHumanoidRenderer(); addMareepRenderer(MareepRenderer);

function addRattataRenderer(renderer) {
var model = renderer.getModel(); 
var head = model.getPart("head"); 
var body = model.getPart("body"); 
var rightArm = model.getPart("rightArm"); 
var leftArm = model.getPart("leftArm"); 
var rightLeg = model.getPart("rightLeg");
var leftLeg = model.getPart("leftLeg"); 

head.clear(); 

body.clear(); 
body.setTextureOffset(12, 0);
body.addBox(-3.0, 16.5, -2.0, 6, 4, 7);
body.setTextureOffset(19, 0);
body.addBox(0.0, 15.5, 5.0, 0, 2, 2);
body.setTextureOffset(19, 0);
body.addBox(0.0, 14.5, 6.0, 0, 2, 2);
body.setTextureOffset(19, 0);
body.addBox(0.0, 10.5, 7.0, 0, 4, 2);
body.setTextureOffset(19, 0);
body.addBox(0.0, 8.5, 7.0, 0, 2, 1);
body.setTextureOffset(19, 0);
body.addBox(0.0, 7.5, 6.0, 0, 2, 1);
body.setTextureOffset(19, 0);
body.addBox(0.0, 6.5, 5.0, 0, 2, 1);
body.setTextureOffset(19, 0);
body.addBox(0.0, 6.5, 3.0, 0, 1, 2);
body.setTextureOffset(19, 0);
body.addBox(0.0, 7.5, 2.0, 0, 2, 2);
body.setTextureOffset(0, 10);
body.addBox(-1.5, 16.5, -7.0, 3, 2, 5);
body.setTextureOffset(0, 17);
body.addBox(-2.0, 14.5, -5.0, 4, 4, 2);
body.setTextureOffset(19, 0);
body.addBox(-2.0, 14.5, -3.0, 4, 2, 2);
body.setTextureOffset(0, 0);
body.addBox(-5.0, 12.5, -2.5, 4, 2, 0);
body.setTextureOffset(0, 2);
body.addBox(1.0, 12.5, -2.5, 4, 2, 0);
body.setTextureOffset(8, 0);
body.addBox(-4.0, 11.5, -2.5, 2, 4, 0);
body.setTextureOffset(8, 4);
body.addBox(2.0, 11.5, -2.5, 2, 4, 0);
body.setTextureOffset(0, 23);
body.addBox(-0.5, 18.5, -6, 2, 1, 0);

rightArm.clear(); 

leftArm.clear(); 

rightLeg.clear();
rightLeg.setTextureOffset(0, 4);
rightLeg.addBox(-1.0, 8.0, -2.0, 2, 4, 2);
rightLeg.setTextureOffset(0, 4);
rightLeg.addBox(3.0, 8.0, -2.0, 2, 4, 2);

leftLeg.clear(); 
leftLeg.setTextureOffset(0, 4);
leftLeg.addBox(-5.0, 8.0, 3.0, 2, 4, 2);
leftLeg.setTextureOffset(0, 4);
leftLeg.addBox(- 1.0, 8.0, 3.0, 2, 4, 2);
} 

var RattataRenderer = Renderer.createHumanoidRenderer(); addRattataRenderer(RattataRenderer);

function addAzurillRenderer(renderer){

var model = renderer.getModel();
var head = model.getPart("head");
var body = model.getPart("body");
var leftArm = model.getPart("leftArm");
var rightArm = model.getPart("rightArm");
var leftLeg = model.getPart("leftLeg");
var rightLeg = model.getPart("rightLeg");

head.clear();
body.clear();
leftArm.clear();
rightArm.clear();
leftLeg.clear();
rightLeg.clear();

//body
body.setTextureOffset(0,0);
body.addBox(-6,16,-5,7,7,5);

//ears
body.setTextureOffset(24,0);
body.addBox(-7,14,-4,3,3,1);
body.addBox(-1,14,-4,3,3,1);

//tail
body.setTextureOffset(25,5);
body.addBox(-3,22,0,1,1,2);
body.addBox(-3,21,2,1,1,2);
body.addBox(-3,22,4,1,1,2);

//ball on the tail
body.setTextureOffset(0,13);
body.addBox(-4,21,6,3,3,3);

//right leg
rightLeg.setTextureOffset(13,13);
rightLeg.addBox(-4,11,-6,2,1,4);

//left leg
leftLeg.setTextureOffset(13,13);
leftLeg.addBox(-3,11,-6,2,1,4);
}
var AzurillRenderer = Renderer.createHumanoidRenderer();
addAzurillRenderer(AzurillRenderer);


function addBellsproutRenderer(renderer){

var model = renderer.getModel();
var head = model.getPart("head");
var body = model.getPart("body");
var leftArm = model.getPart("leftArm");
var rightArm = model.getPart("rightArm");
var leftLeg = model.getPart("leftLeg");
var rightLeg = model.getPart("rightLeg");


head.clear();
body.clear();
leftArm.clear();
rightArm.clear();
leftLeg.clear();
rightLeg.clear();


body.setTextureOffset(0,0);
body.addBox(-3,15,-2,2,9,2);

body.setTextureOffset(10,0);
body.addBox(-4,10,-3,4,4,5);

body.setTextureOffset(29,0);
body.addBox(-4,12,-4,4,3,1);

body.setTextureOffset(40,0);
body.addBox(-5,11,-2,1,2,3);
body.addBox(-3,14,-3,2,1,4);
body.addBox(0,11,-2,1,2,3);
body.addBox(-3,9,-2,2,1,3);
body.addBox(-3,11,2,2,2,1);

leftArm.setTextureOffset(0,12);
leftArm.addBox(-5,15,-4,1,1,3);
leftArm.addBox(-6,15,-3,1,1,3);
leftArm.addBox(-7,15,-2,1,1,2);

rightArm.setTextureOffset(0,12);
rightArm.addBox(2,15,-2,1,1,3);
rightArm.addBox(1,15,-3,1,1,3);
rightArm.addBox(0,15,-4,1,1,2);

leftLeg.setTextureOffset(9,12);
leftLeg.addBox(-3,11,-3,1,1,1);
leftLeg.addBox(-2,11,-4,1,1,1);
leftLeg.addBox(-3,11,-5,1,1,1);
leftLeg.addBox(-1,11,-5,1,1,1);

rightLeg.setTextureOffset(9,12);
rightLeg.addBox(-2,11,-3,1,1,1);
rightLeg.addBox(-3,11,-4,1,1,1);
rightLeg.addBox(-2,11,-5,1,1,1);
rightLeg.addBox(-4,11,-5,1,1,1);
}
var BellsproutRenderer = Renderer.createHumanoidRenderer();
addBellsproutRenderer(BellsproutRenderer);



function addElectrodeRenderer(renderer){

var model = renderer.getModel();
var head = model.getPart("head");
var body = model.getPart("body");
var leftArm = model.getPart("leftArm");
var rightArm = model.getPart("rightArm");
var leftLeg = model.getPart("leftLeg");
var rightLeg = model.getPart("rightLeg");


head.clear();
body.clear();
leftArm.clear();
rightArm.clear();
leftLeg.clear();
rightLeg.clear();

body.setTextureOffset(0,0);
body.addBox(-6,11,-6,14,14,14);

}
var ElectrodeRenderer = Renderer.createHumanoidRenderer();
addElectrodeRenderer(ElectrodeRenderer);


function addGeodudeRenderer(renderer){
var model = renderer.getModel();
var head = model.getPart("head");
var body = model.getPart("body");
var leftArm = model.getPart("leftArm");
var rightArm = model.getPart("rightArm");
var leftLeg = model.getPart("leftLeg");
var rightLeg = model.getPart("rightLeg");

head.clear();
body.clear();
leftArm.clear();
rightArm.clear();
leftLeg.clear();
rightLeg.clear();

//front of body
body.setTextureOffset(0,0);
body.addBox(-3,16,-3,6,5,1);

//back of body
body.setTextureOffset(15,0);
body.addBox(-3,16,4,6,5,1);

//sides
body.setTextureOffset(30,0);
body.addBox(-4,16,-2,1,5,6);
body.addBox(3,16,-2,1,5,6);

//top and bottom of body
body.setTextureOffset(1,12);
body.addBox(-3,21,-2,6,1,6);
body.addBox(-3,15,-2,6,1,6);

//arms
body.setTextureOffset(45,0);
body.addBox(-6,17,0,2,2,2);
body.addBox(-8,18,0,2,2,2);

//hands
body.setTextureOffset(54,0);
body.addBox(-8,16,-2,2,4,2);
body.addBox(6,16,-2,2,4,2);
body.addBox(4,17,0,2,2,2);
body.addBox(6,18,0,2,2,2);



}

var GeodudeRenderer = Renderer.createHumanoidRenderer();
addGeodudeRenderer(GeodudeRenderer);



function addIgglybuffRenderer(renderer){

var model = renderer.getModel();
var head = model.getPart("head");
var body = model.getPart("body");
var leftArm = model.getPart("leftArm");
var rightArm = model.getPart("rightArm");
var leftLeg = model.getPart("leftLeg");
var rightLeg = model.getPart("rightLeg");


head.clear();
body.clear();
leftArm.clear();
rightArm.clear();
leftLeg.clear();
rightLeg.clear();

body.setTextureOffset(0,0);
body.addBox(-3,17,-5,6,6,6);


body.setTextureOffset(25,0);
body.addBox(-2,16,-3,4,1,2);
body.addBox(-1,15,-3,2,1,2);
body.addBox(-5,19,-4,2,2,2);
body.addBox(3,19,-4,2,2,2);

leftLeg.setTextureOffset(25,0);
leftLeg.addBox(-5,11,-6,2,1,3);

rightLeg.setTextureOffset(25,0);
rightLeg.addBox(3,11,-6,2,1,3);


}

var IgglybuffRenderer = Renderer.createHumanoidRenderer();
addIgglybuffRenderer(IgglybuffRenderer);



function addMagikarpRenderer(renderer){
var model = renderer.getModel();
var head = model.getPart("head");
var body = model.getPart("body");
var leftArm = model.getPart("leftArm");
var rightArm = model.getPart("rightArm");
var leftLeg = model.getPart("leftLeg");
var rightLeg = model.getPart("rightLeg");

body.clear();
head.clear();
leftArm.clear();
rightArm.clear();
leftLeg.clear();
rightLeg.clear();

body.setTextureOffset(0,0);
body.addBox(-4,22,-6,1,3,1);

body.setTextureOffset(5,0);
body.addBox(-3,21,-6,1,1,1);

body.setTextureOffset(10,0);
body.addBox(-2,16,-6,5,5,7);

body.setTextureOffset(35,0);
body.addBox(-1,15,-5,3,1,5);

body.setTextureOffset(52,0);
body.addBox(-1,17,-7,3,3,1);

body.setTextureOffset(0,0);
body.addBox(4,22,-6,1,3,1);

body.setTextureOffset(5,0);
body.addBox(3,21,-6,1,1,1);

body.setTextureOffset(0,13);
body.addBox(0,22,-5,1,1,5);

body.setTextureOffset(13,13);
body.addBox(0,16,1,1,5,3);

body.setTextureOffset(22,13);
body.addBox(0,15,4,1,7,2);

body.setTextureOffset(0,13);
body.addBox(0,14,-5,1,1,5);

body.setTextureOffset(35,0);
body.addBox(-1,21,-5,3,1,5);

body.setTextureOffset(5,0);
body.addBox(0,23,-5,1,1,1);
body.addBox(0,23,-3,1,1,1);
body.addBox(0,23,-1,1,1,1);
body.addBox(0,13,-5,1,1,1);
body.addBox(0,13,-3,1,1,1);
body.addBox(0,13,-1,1,1,1);
}

var MagikarpRenderer = Renderer.createHumanoidRenderer();
addMagikarpRenderer(MagikarpRenderer);




function addMarillRenderer(renderer){

var model = renderer.getModel();
var head = model.getPart("head");
var body = model.getPart("body");
var leftArm = model.getPart("leftArm");
var rightArm = model.getPart("rightArm");
var leftLeg = model.getPart("leftLeg");
var rightLeg = model.getPart("rightLeg");

head.clear();
body.clear();
leftArm.clear();
rightArm.clear();
leftLeg.clear();
rightLeg.clear();

//body
body.setTextureOffset(0,0);
body.addBox(-5,16,-5,7,7,5);

//ears
body.setTextureOffset(25,0);
body.addBox(-6,14,-3,2,2,1);
body.addBox(1,14,-3,2,2,1);

//arms

//right arm
body.setTextureOffset(32,0);
body.addBox(-6,19,-5,1,1,2);
body.addBox(-7,19.5,-5,1,2,2);

//left arm
body.addBox(2,19,-5,1,1,2);
body.addBox(3,19.5,-5,1,2,2);

//tail
body.setTextureOffset(44,0);
body.addBox(-2,22,0,1,1,2);
body.addBox(-4,22,2,2,1,1);
body.addBox(-6,22,3,2,1,1);

//ball on tail 
body.setTextureOffset(0,13);
body.addBox(-9,21,2,3,3,3);

//right foot
rightLeg.setTextureOffset(13,13);
rightLeg.addBox(-3,11,-6,2,1,3);

//left foot 
leftLeg.setTextureOffset(13,13);
leftLeg.addBox(-2,11,-6,2,1,3);

}
var MarillRenderer = Renderer.createHumanoidRenderer();
addMarillRenderer(MarillRenderer);




function addZubatRenderer(renderer) { 
var model = renderer.getModel(); 
var head = model.getPart("head"); 
var body = model.getPart("body"); 
var rightArm = model.getPart("rightArm"); 
var leftArm = model.getPart("leftArm"); 
var rightLeg = model.getPart("rightLeg"); 
var leftLeg = model.getPart("leftLeg"); 

head.clear(); 

body.clear(); 
body.setTextureOffset(20, 0, true); 
body.addBox(-8.5,  8.0,  1.5,  17,  10,  0); 
body.setTextureOffset(20, 10, true); 
body.addBox(-8.5,  8.0,  1.6,  17,  10,  0); 
body.setTextureOffset(0, 3); 
body.addBox(-1.5,  12.0,  -0.5,  3,  6,  2); 
body.setTextureOffset(0, 11); 
body.addBox(1.5,  18.0,  0.0,  0,  6,  1); 
body.setTextureOffset(0, 11); 
body.addBox(-1.5,  18.0,  0.0,  0,  6,  1); 

rightArm.clear(); 

leftArm.clear(); 

rightLeg.clear(); 

leftLeg.clear(); 
} 

var ZubatRenderer = Renderer.createHumanoidRenderer(); addZubatRenderer(ZubatRenderer);





function addSudowoodoRenderer(renderer){

var model = renderer.getModel();
var head = model.getPart("head");
var body = model.getPart("body");
var leftArm = model.getPart("leftArm");
var rightArm = model.getPart("rightArm");
var leftLeg = model.getPart("leftLeg");
var rightLeg = model.getPart("rightLeg");


head.clear();
body.clear();
leftArm.clear();
rightArm.clear();
leftLeg.clear();
rightLeg.clear();

//body and head
body.setTextureOffset(0,0);
body.addBox(-3,6,-3,5,16,4);

//headthingys
body.setTextureOffset(18,0);
body.addBox(-2,4,-2,3,1,2);
body.addBox(-1,5,-2,1,1,2);

//rightarm
body.setTextureOffset(32,0);
body.addBox(-7,13,-2,4,2,2);

body.setTextureOffset(45,0);
body.addBox(-7,13,-3,2,2,1);
body.addBox(-7,12,-2,2,1,2);
body.addBox(-7,13,0,2,2,1);
body.addBox(-7,15,-2,2,1,2);

//leftarm
body.setTextureOffset(32,0);
body.addBox(2,13,-2,4,2,2);

body.setTextureOffset(45,0);
body.addBox(4,13,-3,2,2,1);
body.addBox(4,12,-2,2,1,2);
body.addBox(4,13,0,2,2,1);
body.addBox(4,15,-2,2,1,2);

//rightleg
rightLeg.setTextureOffset(18,5);
rightLeg.addBox(-2,9,-2,2,3,2);

rightLeg.setTextureOffset(26,12);
rightLeg.addBox(-2,11,-4,2,1,2);

//leftleg
leftLeg.setTextureOffset(18,5);
leftLeg.addBox(-1,9,-2,2,3,2);

leftLeg.setTextureOffset(26,12);
leftLeg.addBox(-1,11,-4,2,1,2);
}
var SudowoodoRenderer = Renderer.createHumanoidRenderer();
addSudowoodoRenderer(SudowoodoRenderer);


function addAerodactylRenderer(renderer)

{

var model = renderer.getModel();

var head = model.getPart("head");
var body = model.getPart("body");
var rArm = model.getPart("rightArm");
var lArm = model.getPart("leftArm");
var rLeg = model.getPart("rightLeg");
var lLeg = model.getPart("leftLeg");

head.clear();
head.setTextureOffset(0, 0);
head.addBox(0, 0, 0, 5, 5, 5);
head.setTextureOffset(40, 0);
head.addBox(0, -3, 3, 0, 3, 2);
head.setTextureOffset(40, 0);
head.addBox(0, -4, 4, 0, 4, 1);
head.setTextureOffset(40, 0);
head.addBox(5, -3, 3, 0, 3, 2);
head.setTextureOffset(40, 0);
head.addBox(5, -4, 4, 0, 4, 1);
head.setTextureOffset(20, 0);
head.addBox(0, 1, -5, 5, 4, 5);
body.clear();
body.setTextureOffset(40, 0);
body.addBox(0, 1, 5, 5, 4, 3);
body.setTextureOffset(40, 0);
body.addBox(-1, 0, 8, 7, 7, 5);
body.setTextureOffset(40, 0);
body.addBox(-1, 0, 13, 7, 7, 5);
body.setTextureOffset(40, 0);
body.addBox(-1, 0, 18, 7, 7, 5);
body.setTextureOffset(40, 0);
body.addBox(-1, 0, 23, 7, 7, 5);
body.setTextureOffset(40, 0);
body.addBox(-1, 2, 28, 7, 5, 5);
body.setTextureOffset(40, 0);
body.addBox(0, 3, 33, 5, 4, 4);
body.setTextureOffset(40, 0);
body.addBox(-1, -3, 8, 1, 3, 3);
body.setTextureOffset(40, 0);
body.addBox(5, -3, 8, 1, 3, 3);
body.setTextureOffset(40, 0);
body.addBox(-3, 3, 18, 4, 6, 6);
body.setTextureOffset(40, 0);
body.addBox(-5, 3, 24, 2, 8, 2);
body.setTextureOffset(40, 0);
body.addBox(4, 3, 18, 4, 6, 6);
body.setTextureOffset(40, 0);
body.addBox(8, 3, 24, 2, 8, 2);
body.setTextureOffset(0, 22, true);
body.addBox(-25, 2, 13, 24, 0, 10);
body.setTextureOffset(24, 22, true);
body.addBox(6, 2, 13, 24, 0, 10);
lArm.clear();
rArm.clear();
lLeg.clear();
rLeg.clear();

}

var AerodactylRenderer = Renderer.createHumanoidRenderer();
addAerodactylRenderer(AerodactylRenderer);

function addBayleefRenderer(renderer)

{

var model = renderer.getModel();

var head = model.getPart("head");
var body = model.getPart("body");
var rArm = model.getPart("rightArm");
var lArm = model.getPart("leftArm");
var rLeg = model.getPart("rightLeg");
var lLeg = model.getPart("leftLeg");

head.clear();

head.setTextureOffset(0, 0);
head.addBox(-2, 3, -7, 6, 5, 7);

head.setTextureOffset(0, 30, true);
head.addBox(1, -4, -4, 0, 7, 14);

body.clear();

body.setTextureOffset(28, 14);
body.addBox(-2, 11, 0, 7, 7, 11);

body.setTextureOffset(38, 0);
body.addBox(0, 13, 11, 3, 2, 6);

body.setTextureOffset(0, 19);
body.addBox(-1, 5, 0, 5, 8, 5);

rArm.clear();
rArm.setTextureOffset(26, 0);
rArm.addBox(4, 16, 8, 3, 7, 3);

lArm.clear();
lArm.setTextureOffset(26, 0);
lArm.addBox(-4, 16, 8, 3, 7, 3);

rLeg.clear();
rLeg.setTextureOffset(26, 0);
rLeg.addBox(0, 6, 0, 3, 7, 3);

lLeg.clear();
lLeg.setTextureOffset(26, 0);
lLeg.addBox(0, 6, 0, 3, 7, 3);

}

var BayleefRenderer = Renderer.createHumanoidRenderer();
addBayleefRenderer(BayleefRenderer);

function addBeedrillRenderer(renderer)

{

var model = renderer.getModel();

var head = model.getPart("head");
var body = model.getPart("body");
var rArm = model.getPart("rightArm");
var lArm = model.getPart("leftArm");
var rLeg = model.getPart("rightLeg");
var lLeg = model.getPart("leftLeg");

head.clear();

body.clear();
body.setTextureOffset(0, 0);
body.addBox(0, -8, 0, 5, 5, 5);
body.setTextureOffset(38, 0);
body.addBox(0.5, -13, 2, 1, 5, 1);
body.setTextureOffset(38, 0);
body.addBox(3.5, -13, 2, 1, 5, 1);
body.setTextureOffset(42, 0);
body.addBox(1, -3, 1, 3, 3, 4);
body.setTextureOffset(20, 0);
body.addBox(0, 0, 1, 5, 6, 4);

body.setTextureOffset(42, 0);
body.addBox(-6, 3, 2, 6, 1, 1);
body.setTextureOffset(42, 0);
body.addBox(-6, 3, -3, 1, 1, 5);
body.setTextureOffset(24, 10);
body.addBox(-8, 1, -5, 5, 5, 2);
body.setTextureOffset(24, 10);
body.addBox(-7, 2, -10, 3, 3, 5);
body.setTextureOffset(24, 10);
body.addBox(-6, 3, -15, 1, 1, 5);

body.setTextureOffset(42, 0);
body.addBox(5, 3, 2, 6, 1, 1);
body.setTextureOffset(42, 0);
body.addBox(11, 3, -3, 1, 1, 5);
body.setTextureOffset(24, 10);
body.addBox(9, 1, -5, 5, 5, 2);
body.setTextureOffset(24, 10);
body.addBox(10, 2, -10, 3, 3, 5);
body.setTextureOffset(24, 10);
body.addBox(11, 3, -15, 1, 1, 5);

body.setTextureOffset(42, 0);
body.addBox(2, 6, 2, 1, 5, 1);

body.setTextureOffset(0, 12, true);
body.addBox(-8, -13, 5, 12, 20, 0);
body.setTextureOffset(40, 12, true);
body.addBox(2, -13, 5, 12, 20, 0);

rArm.clear();

lArm.clear();

rLeg.clear();

lLeg.clear();

}

var BeedrillRenderer = Renderer.createHumanoidRenderer();
addBeedrillRenderer(BeedrillRenderer);

function addBlazikenRenderer(renderer)

{

var model = renderer.getModel();

var head = model.getPart("head");
var body = model.getPart("body");
var rArm = model.getPart("rightArm");
var lArm = model.getPart("leftArm");
var rLeg = model.getPart("rightLeg");
var lLeg = model.getPart("leftLeg");

head.clear();
head.setTextureOffset(0, 0);
head.addBox(-2, -11, -2, 6, 5, 7);
head.setTextureOffset(19, 8);
head.addBox(-1, -11, 5, 4, 1, 1);
head.setTextureOffset(19, 8);
head.addBox(-1, -10, 6, 4, 1, 1);
head.setTextureOffset(19, 8);
head.addBox(-1, -9, 7, 4, 1, 1);
head.setTextureOffset(19, 8);
head.addBox(-1, -8, 8, 4, 1, 1);
head.setTextureOffset(19, 8);
head.addBox(-1, -7, 9, 4, 1, 1);
head.setTextureOffset(19, 8);
head.addBox(-1, -6, 10, 4, 1, 1);


body.clear();
body.setTextureOffset(0, 12);
body.addBox(-2, -6, -1, 6, 13, 6);

rArm.clear();
rArm.setTextureOffset(41, 0);
rArm.addBox(1, -5, 1, 2, 8, 2);
rArm.setTextureOffset(49, 4);
rArm.addBox(1, 3, 1, 2, 4, 2);

lArm.clear();
lArm.setTextureOffset(41, 0);
lArm.addBox(-1, -5, 1, 2, 8, 2);

lArm.setTextureOffset(49, 4);
lArm.addBox(-1, 3, 1, 2, 4, 2);

rLeg.clear();
rLeg.setTextureOffset(44, 10);
rLeg.addBox(-3, -5, 0, 5, 17, 5);

lLeg.clear();
lLeg.setTextureOffset(44, 10);
lLeg.addBox(0, -5, 0, 5, 17, 5);

}

var BlazikenRenderer = Renderer.createHumanoidRenderer();
addBlazikenRenderer(BlazikenRenderer);

function addCharmeleonRenderer(renderer)

{

var model = renderer.getModel();

var head = model.getPart("head");
var body = model.getPart("body");
var rArm = model.getPart("rightArm");
var lArm = model.getPart("leftArm");
var rLeg = model.getPart("rightLeg");
var lLeg = model.getPart("leftLeg");

head.clear();
head.setTextureOffset(0, 0);
head.addBox(-2, 4, -2, 6, 6, 5);
head.setTextureOffset(38, 17);
head.addBox(-1, 7, -5, 4, 3, 3);
head.setTextureOffset(38, 24);
head.addBox(0, 3, 0, 2, 1, 6);


body.clear();
body.setTextureOffset(16, 16, true);
body.addBox(-2, 10, -2, 6, 10, 5);
body.setTextureOffset(22, 0, true);
body.addBox(0, 18, 3, 2, 2, 4);
body.setTextureOffset(22, 6, true);
body.addBox(0.5, 18.5, 7, 1, 1, 4);
body.setTextureOffset(35, 0, true);
body.addBox(1, 12, 8, 0, 6, 4);

rArm.clear();
rArm.setTextureOffset(56, 0);
rArm.addBox(2, 10, -1, 2, 5, 2);

lArm.clear();
lArm.setTextureOffset(56, 0);
lArm.addBox(-2, 10, -1, 2, 5, 2);

rLeg.clear();
rLeg.setTextureOffset(0, 13);
rLeg.addBox(-1, 7, -1, 3, 5, 3);

lLeg.clear();
lLeg.setTextureOffset(0, 22);
lLeg.addBox(0, 7, -1, 3, 5, 3);

}

var CharmeleonRenderer = Renderer.createHumanoidRenderer();
addCharmeleonRenderer(CharmeleonRenderer);

function addCombuskenRenderer(renderer)

{

var model = renderer.getModel();

var head = model.getPart("head");
var body = model.getPart("body");
var rArm = model.getPart("rightArm");
var lArm = model.getPart("leftArm");
var rLeg = model.getPart("rightLeg");
var lLeg = model.getPart("leftLeg");

head.clear();
head.setTextureOffset(0, 0);
head.addBox(0, -4, -0.5, 7, 7, 7);
head.setTextureOffset(0, 14);
head.addBox(2, -0, -1.5, 3, 1, 1);
head.setTextureOffset(29, 9, true);
head.addBox(0, -9, 3, 7, 5, 0);

body.clear();
body.setTextureOffset(40, 10);
body.addBox(0.5, 3, 0, 6, 14, 6);

rArm.clear();
rArm.setTextureOffset(29, 0);
rArm.addBox(-6, 5, 1, 13, 1, 4);

lArm.clear();
lArm.setTextureOffset(29, 0);
lArm.addBox(-1, 5, 1, 13, 1, 4);

rLeg.clear();
rLeg.setTextureOffset(0, 20);
rLeg.addBox(-2, -1, 0, 5, 6, 6);
rLeg.setTextureOffset(22, 24);
rLeg.addBox(0.5, 5, 2, 2, 6, 2);
rLeg.setTextureOffset(17, 17);
rLeg.addBox(-1, 11, -2, 5, 1, 6);

lLeg.clear();
lLeg.setTextureOffset(0, 20);
lLeg.addBox(3, -1, 0, 5, 6, 6);
lLeg.setTextureOffset(22, 24);
lLeg.addBox(4.5, 5, 2, 2, 6, 2);
lLeg.setTextureOffset(17, 17);
lLeg.addBox(3, 11, -2, 5, 1, 6);

}

var CombuskenRenderer = Renderer.createHumanoidRenderer();
addCombuskenRenderer(CombuskenRenderer);

function addCroconawRenderer(renderer)

{

var model = renderer.getModel();

var head = model.getPart("head");
var body = model.getPart("body");
var rArm = model.getPart("rightArm");
var lArm = model.getPart("leftArm");
var rLeg = model.getPart("rightLeg");
var lLeg = model.getPart("leftLeg");

head.clear();
head.setTextureOffset(0, 0);
head.addBox(0, 1, 0, 8, 7, 8);
head.setTextureOffset(24, 0);
head.addBox(1, 4, -5, 6, 2, 5);
head.setTextureOffset(0, 15);
head.addBox(1, 6, -5, 6, 3, 5);
head.setTextureOffset(0, 14, true);
head.addBox(4, -3, 0, 0, 8, 10);

body.clear();
body.setTextureOffset(32, 12);
body.addBox(0, 8, 0, 8, 12, 8);

rArm.clear();
rArm.setTextureOffset(0, 0);
rArm.addBox(2, 8, 1, 4, 2, 2);

lArm.clear();
lArm.setTextureOffset(0, 0);
lArm.addBox(2, 8, 1, 4, 2, 2);

rLeg.clear();
rLeg.setTextureOffset(40, 0);
rLeg.addBox(1, 6, 2, 2, 4, 4);
rLeg.addBox(1, 10, 3, 2, 2, 2);

lLeg.clear();
lLeg.setTextureOffset(40, 0);
lLeg.addBox(5, 6, 2, 2, 4, 4);
lLeg.addBox(5, 10, 3, 2, 2, 2);

}

var CroconawRenderer = Renderer.createHumanoidRenderer();
addCroconawRenderer(CroconawRenderer);

function addDodrioRenderer(renderer)

{

var model = renderer.getModel();

var head = model.getPart("head");
var body = model.getPart("body");
var rArm = model.getPart("rightArm");
var lArm = model.getPart("leftArm");
var rLeg = model.getPart("rightLeg");
var lLeg = model.getPart("leftLeg");

head.clear();


body.clear();
body.setTextureOffset(5, 20);
body.addBox(-5, -11, 0, 6, 6, 6);
body.setTextureOffset(5, 20);
body.addBox(2, -11, -1, 6, 6, 6);
body.setTextureOffset(5, 20);
body.addBox(9, -11, 0, 6, 6, 6);
body.setTextureOffset(30, 25);
body.addBox(-2.5, -8, -6, 1, 1, 6);
body.setTextureOffset(30, 25);
body.addBox(4.5, -8, -7, 1, 1, 6);
body.setTextureOffset(30, 25);
body.addBox(11.5, -8, -6, 1, 1, 6);
body.setTextureOffset(0, 21);
body.addBox(0, -5, 2, 1, 8, 1);
body.setTextureOffset(0, 21);
body.addBox(4.5, -5, 1, 1, 8, 1);
body.setTextureOffset(0, 21);
body.addBox(9, -5, 2, 1, 8, 1);
body.setTextureOffset(24, 0);
body.addBox(0, 2, -1, 10, 10, 10);
body.setTextureOffset(44, 22);
body.addBox(-1, 4, 9, 4, 1, 6);
body.setTextureOffset(44, 22);
body.addBox(3, 4, 9, 4, 1, 6);
body.setTextureOffset(44, 22);
body.addBox(7, 4, 9, 4, 1, 6);

rArm.clear();

lArm.clear();

rLeg.clear();
rLeg.setTextureOffset(0, 6);
rLeg.addBox(4, -1, 3, 1, 12, 1);
rLeg.setTextureOffset(0, 0);
rLeg.addBox(3, 11, 0, 3, 1, 5);

lLeg.clear();
lLeg.setTextureOffset(0, 6);
lLeg.addBox(5, -1, 3, 1, 12, 1);
lLeg.setTextureOffset(0, 0);
lLeg.addBox(4, 11, 0, 3, 1, 5);

}

var DodrioRenderer = Renderer.createHumanoidRenderer();
addDodrioRenderer(DodrioRenderer);

function addDunsparceRenderer(renderer)

{

var model = renderer.getModel();

var head = model.getPart("head");
var body = model.getPart("body");
var rArm = model.getPart("rightArm");
var lArm = model.getPart("leftArm");
var rLeg = model.getPart("rightLeg");
var lLeg = model.getPart("leftLeg");

head.clear();

body.clear();
body.setTextureOffset(0, 0);
body.addBox(-2, 16, 0, 8, 8, 8);
body.setTextureOffset(20, 14);
body.addBox(-3, 18, 8, 10, 6, 12);
body.setTextureOffset(52, 0);
body.addBox(-6.5, 19, 9, 4, 0, 4);
body.setTextureOffset(52, 0);
body.addBox(6.5, 19, 9, 4, 0, 4);
body.setTextureOffset(0, 16);
body.addBox(0.5, 19.5, 20, 3, 3, 4);
body.setTextureOffset(0, 23);
body.addBox(0, 19, 24, 4, 4, 5);

rArm.clear();

lArm.clear();

rLeg.clear();

lLeg.clear();

}

var DunsparceRenderer = Renderer.createHumanoidRenderer();
addDunsparceRenderer(DunsparceRenderer);

function addEeveeRenderer(renderer)

{

var model = renderer.getModel();

var head = model.getPart("head");
var body = model.getPart("body");
var rArm = model.getPart("rightArm");
var lArm = model.getPart("leftArm");
var rLeg = model.getPart("rightLeg");
var lLeg = model.getPart("leftLeg");

head.clear();

head.setTextureOffset(28, 6);
head.addBox(-2, 10, -2, 5, 5, 4);
head.setTextureOffset(28, 15);
head.addBox(-1.5, 13, -3, 4, 2, 2);
head.setTextureOffset(28, 0);
head.addBox(-3, 6, -1, 2, 4, 1);
head.setTextureOffset(28, 0);
head.addBox(2, 6, -1, 2, 4, 1);


body.clear();
1
body.setTextureOffset(0, 1);
body.addBox(-3, 15, -1, 7, 4, 4);
2
body.setTextureOffset(0, 20);
body.addBox(-2.5, 15, 3, 6, 4, 6);

body.setTextureOffset(28, 22);
body.addBox(0, 13, 7, 1, 4, 6);

rArm.clear();
rArm.setTextureOffset(48, 0);
rArm.addBox(3.5, 17, 0, 2, 5, 2);

lArm.clear();
lArm.setTextureOffset(56, 0);
lArm.addBox(-4.5, 17, 0, 2, 5, 2);

rLeg.clear();
rLeg.setTextureOffset(48, 0);
rLeg.addBox(-0.5, 7, 6, 2, 5, 2);

lLeg.clear();
lLeg.setTextureOffset(56, 0);
lLeg.addBox(-0.5, 7, 6, 2, 5, 2);

}

var EeveeRenderer = Renderer.createHumanoidRenderer();
addEeveeRenderer(EeveeRenderer);

function addEspeonRenderer(renderer)

{

var model = renderer.getModel();

var head = model.getPart("head");
var body = model.getPart("body");
var rArm = model.getPart("rightArm");
var lArm = model.getPart("leftArm");
var rLeg = model.getPart("rightLeg");
var lLeg = model.getPart("leftLeg");

head.clear();

head.setTextureOffset(28, 6);
head.addBox(-2, 10, -2, 5, 5, 4);
1
head.setTextureOffset(0, 0, true);
head.addBox(-7, 9, -1, 5, 3, 0);
1
head.setTextureOffset(10, 0, true);
head.addBox(3, 9, -1, 5, 3, 0);

2
head.setTextureOffset(0, 6, true);
head.addBox(-6, 12, -1, 4, 2, 0);
2
head.setTextureOffset(10, 6, true);
head.addBox(3, 12, -1, 4, 2, 0);

body.clear();

body.setTextureOffset(0, 18);
body.addBox(-2.5, 15, 0, 6, 4, 8);
1
body.setTextureOffset(8, 21);
body.addBox(0, 16, 8, 1, 1, 6);
2
body.setTextureOffset(8, 18);
body.addBox(0, 11, 13, 1, 5, 1);

rArm.clear();
rArm.setTextureOffset(48, 0);
rArm.addBox(3.5, 17, 0, 2, 5, 2);

lArm.clear();
lArm.setTextureOffset(56, 0);
lArm.addBox(-4.5, 17, 0, 2, 5, 2);

rLeg.clear();
rLeg.setTextureOffset(48, 0);
rLeg.addBox(-0.5, 7, 6, 2, 5, 2);

lLeg.clear();
lLeg.setTextureOffset(56, 0);
lLeg.addBox(-0.5, 7, 6, 2, 5, 2);

}

var EspeonRenderer = Renderer.createHumanoidRenderer();
addEspeonRenderer(EspeonRenderer);

function addFeraligatrRenderer(renderer)

{

var model = renderer.getModel();

var head = model.getPart("head");
var body = model.getPart("body");
var rArm = model.getPart("rightArm");
var lArm = model.getPart("leftArm");
var rLeg = model.getPart("rightLeg");
var lLeg = model.getPart("leftLeg");

head.clear();
head.setTextureOffset(0, 0, true);
head.addBox(1, -10, -3, 8, 8, 9);
head.setTextureOffset(40, 10, true);
head.addBox(2, -7, -9, 6, 2, 6);
head.setTextureOffset(38, 0, true);
head.addBox(2, -5, -10, 6, 3, 7);
head.setTextureOffset(48, 18, true);
head.addBox(5, -16, -1, 0, 6, 8);
head.setTextureOffset(48, 18, true);
head.addBox(6, -16, -1, 0, 6, 8);

body.clear();
body.setTextureOffset(0, 17);
body.addBox(0, -2, -3, 5, 6, 9);
body.setTextureOffset(0, 17);
body.addBox(0, 4, -3, 5, 6, 9);
body.setTextureOffset(0, 17);
body.addBox(0, 10, -3, 5, 6, 9);
body.setTextureOffset(0, 17);
body.addBox(5, -2, -3, 5, 6, 9);
body.setTextureOffset(0, 17);
body.addBox(5, 4, -3, 5, 6, 9);
body.setTextureOffset(0, 17);
body.addBox(5, 10, -3, 5, 6, 9);
body.setTextureOffset(0, 17);
body.addBox(2, 10, 6, 6, 5, 4);
body.setTextureOffset(0, 17);
body.addBox(2, 10, 10, 6, 5, 4);
body.setTextureOffset(0, 17);
body.addBox(3, 10, 10, 4, 5, 6);
body.setTextureOffset(48, 18, true);
body.addBox(5, 5, 8, 0, 5, 6);

rArm.clear();
rArm.setTextureOffset(0, 17);
rArm.addBox(-1, 0, 0, 7, 4, 4);
rArm.setTextureOffset(0, 17);
rArm.addBox(-1, 0, -7, 4, 4, 7);

lArm.clear();
lArm.setTextureOffset(0, 17);
lArm.addBox(4, 0, 0, 7, 4, 4);
lArm.setTextureOffset(0, 17);
lArm.addBox(7, 0, -7, 4, 4, 7);

rLeg.clear();
rLeg.setTextureOffset(0, 17);
rLeg.addBox(-2, 2, 0, 4, 6, 6);
rLeg.setTextureOffset(0, 17);
rLeg.addBox(-2, 8, -2, 4, 2, 6);

lLeg.clear();
lLeg.setTextureOffset(0, 17);
lLeg.addBox(8, 2, 0, 4, 6, 6);
lLeg.setTextureOffset(0, 17);
lLeg.addBox(8, 8, -2, 4, 2, 6);

}

var FeraligatrRenderer = Renderer.createHumanoidRenderer();
addFeraligatrRenderer(FeraligatrRenderer);

function addFlareonRenderer(renderer)

{

var model = renderer.getModel();

var head = model.getPart("head");
var body = model.getPart("body");
var rArm = model.getPart("rightArm");
var lArm = model.getPart("leftArm");
var rLeg = model.getPart("rightLeg");
var lLeg = model.getPart("leftLeg");

head.clear();

head.setTextureOffset(28, 6);
head.addBox(-2, 10, -2, 5, 5, 4);

head.setTextureOffset(28, 15);
head.addBox(-1.5, 13, -3, 4, 2, 2);

head.setTextureOffset(28, 0);
head.addBox(-3, 6, -1, 2, 4, 1);

head.setTextureOffset(28, 0);
head.addBox(2, 6, -1, 2, 4, 1);


body.clear();
1
body.setTextureOffset(0, 1, true);
body.addBox(-3, 15, -1, 7, 4, 4);
2
body.setTextureOffset(0, 22, true);
body.addBox(-2.5, 15, 3, 6, 4, 6);

body.setTextureOffset(28, 22, true);
body.addBox(0, 13, 7, 1, 4, 6);

rArm.clear();
rArm.setTextureOffset(48, 0);
rArm.addBox(3.5, 17, 0, 2, 5, 2);

lArm.clear();
lArm.setTextureOffset(56, 0);
lArm.addBox(-4.5, 17, 0, 2, 5, 2);

rLeg.clear();
rLeg.setTextureOffset(48, 0);
rLeg.addBox(-0.5, 7, 6, 2, 5, 2);

lLeg.clear();
lLeg.setTextureOffset(56, 0);
lLeg.addBox(-0.5, 7, 6, 2, 5, 2);

}

var FlareonRenderer = Renderer.createHumanoidRenderer();
addFlareonRenderer(FlareonRenderer);


function addGengarRenderer(renderer)

{

var model = renderer.getModel();

var head = model.getPart("head");
var body = model.getPart("body");
var rArm = model.getPart("rightArm");
var lArm = model.getPart("leftArm");
var rLeg = model.getPart("rightLeg");
var lLeg = model.getPart("leftLeg");

head.clear();

body.clear();
body.setTextureOffset(0, 0);
body.addBox(0, 0, 0, 7, 8, 6, 2);
body.setTextureOffset(8, 14);
body.addBox(8, 3, 2, 3.5, 2, 2, 0.8);
body.setTextureOffset(8, 18);
body.addBox(-4, 3, 2, 3.5, 2, 2, 0.8);
body.setTextureOffset(0, 0);
body.addBox(-1, -6, 2, 1, 4, 2, 0.5);
body.setTextureOffset(0, 0);
body.addBox(7, -6, 2, 1, 4, 2, 0.5);
body.setTextureOffset(0, 14);
body.addBox(-1.5, 9, 2, 2, 4, 2, 1);
body.setTextureOffset(0, 14);
body.addBox(6.5, 9, 2, 2, 4, 2, 1);

rArm.clear();

lArm.clear();

rLeg.clear();

lLeg.clear();

}

var GengarRenderer = Renderer.createHumanoidRenderer();
addGengarRenderer(GengarRenderer);

function addGolbatRenderer(renderer)

{

var model = renderer.getModel();

var head = model.getPart("head");
var body = model.getPart("body");
var rArm = model.getPart("rightArm");
var lArm = model.getPart("leftArm");
var rLeg = model.getPart("rightLeg");
var lLeg = model.getPart("leftLeg");

head.clear();

body.clear();
body.setTextureOffset(32, 0);
body.addBox(0, -2, 0, 10, 12, 6);

body.setTextureOffset(0, 0);
body.addBox(0, -5, 1, 3, 3, 1);
body.setTextureOffset(0, 0);
body.addBox(7, -5, 1, 3, 3, 1);

body.setTextureOffset(48, 6);
body.addBox(0, 10, 2, 1, 4, 1);
body.setTextureOffset(0, 0);
body.addBox(0, 14, -2, 1, 1, 10);

body.setTextureOffset(48, 6);
body.addBox(9, 10, 2, 1, 4, 1);
body.setTextureOffset(0, 0);
body.addBox(9, 14, -2, 1, 1, 10);

body.setTextureOffset(0, 25, true);
body.addBox(-16, 1, 2, 16, 7, 0);

body.setTextureOffset(0, 18, true);
body.addBox(10, 1, 2, 16, 7, 0);

rArm.clear();

lArm.clear();

rLeg.clear();

lLeg.clear();

}

var GolbatRenderer = Renderer.createHumanoidRenderer();
addGolbatRenderer(GolbatRenderer);

function addGolemRenderer(renderer)

{

var model = renderer.getModel();

var head = model.getPart("head");
var body = model.getPart("body");
var rArm = model.getPart("rightArm");
var lArm = model.getPart("leftArm");
var rLeg = model.getPart("rightLeg");
var lLeg = model.getPart("leftLeg");

head.clear();

body.clear();
body.setTextureOffset(0, 5);
body.addBox(2, 12, -5.5, 3, 1, 3);
body.setTextureOffset(10, 5);
body.addBox(2, 13, -6, 3, 2, 3);
body.setTextureOffset(0, 10);
body.addBox(-2, 7, 0, 11, 11, 11, 3);
body.setTextureOffset(0, 0);
body.addBox(-8, 13, 3, 2, 2, 4, 1);
body.setTextureOffset(44, 18);
body.addBox(13, 13, 3, 2, 2, 4, 1);

rArm.clear();

lArm.clear();

rLeg.clear();
rLeg.setTextureOffset(44, 24);
rLeg.addBox(1, 7, 4, 3, 5, 3);

lLeg.clear();
lLeg.setTextureOffset(44, 24);
lLeg.addBox(3, 7, 4, 3, 5, 3);

}

var GolemRenderer = Renderer.createHumanoidRenderer();
addGolemRenderer(GolemRenderer);

function addGravelerRenderer(renderer)

{

var model = renderer.getModel();

var head = model.getPart("head");
var body = model.getPart("body");
var rArm = model.getPart("rightArm");
var lArm = model.getPart("leftArm");
var rLeg = model.getPart("rightLeg");
var lLeg = model.getPart("leftLeg");

head.clear();


body.clear();
body.setTextureOffset(4, 2);
body.addBox(-2, 5, 0, 15, 15, 15);
body.setTextureOffset(19, 2);
body.addBox(-10, 8, 4, 10, 3, 3);
body.setTextureOffset(19, 2);
body.addBox(-10, 14, 4, 10, 3, 3);
body.setTextureOffset(19, 2);
body.addBox(13, 8, 4, 10, 3, 3);
body.setTextureOffset(19, 2);
body.addBox(13, 14, 4, 10, 3, 3);

rArm.clear();

lArm.clear();

rLeg.clear();
rLeg.setTextureOffset(19, 2);
rLeg.addBox(2, 8, 6, 3, 4, 3);

lLeg.clear();
lLeg.setTextureOffset(19, 2);
lLeg.addBox(6, 8, 6, 3, 4, 3);

}

var GravelerRenderer = Renderer.createHumanoidRenderer();
addGravelerRenderer(GravelerRenderer);

function addGrovyleRenderer(renderer)

{

var model = renderer.getModel();

var head = model.getPart("head");
var body = model.getPart("body");
var rArm = model.getPart("rightArm");
var lArm = model.getPart("leftArm");
var rLeg = model.getPart("rightLeg");
var lLeg = model.getPart("leftLeg");

head.clear();
head.setTextureOffset(0, 0);
head.addBox(-2, 0, -2, 5, 4, 8);
head.setTextureOffset(15, 0, true);
head.addBox(0, -0.1, 2, 1, 0, 11);

body.clear();
body.setTextureOffset(48, 23);
body.addBox(-1.5, 4, 1, 4, 3, 4);
body.setTextureOffset(23, 15);
body.addBox(-2.5, 7, 0, 6, 11, 6);

rArm.clear();
rArm.setTextureOffset(34, 0);
rArm.addBox(-2, 6, 2, 6, 2, 2);
rArm.setTextureOffset(34, 0);
rArm.addBox(-2, 6.5, -4, 1, 1, 6);
rArm.setTextureOffset(51, 9, true);
rArm.addBox(-6, 7, -5, 5, 0, 5);

lArm.clear();
lArm.setTextureOffset(34, 0);
lArm.addBox(-2.5, 6, 2, 6, 2, 2);
lArm.setTextureOffset(34, 0);
lArm.addBox(2.5, 6.5, -4, 1, 1, 6);
lArm.setTextureOffset(51, 9, true);
lArm.addBox(2.5, 7, -5, 5, 0, 5);

rLeg.clear();
rLeg.setTextureOffset(34, 0);
rLeg.addBox(0, 6, 3, 1, 6, 1);
rLeg.setTextureOffset(34, 0);
rLeg.addBox(0, 11, 0, 1, 1, 6);

lLeg.clear();
lLeg.setTextureOffset(34, 0);
lLeg.addBox(0, 6, 3, 1, 6, 1);
lLeg.setTextureOffset(34, 0);
lLeg.addBox(0, 11, 0, 1, 1, 6);

}

var GrovyleRenderer = Renderer.createHumanoidRenderer();
addGrovyleRenderer(GrovyleRenderer);

function addHaunterRenderer(renderer)

{

var model = renderer.getModel();

var head = model.getPart("head");
var body = model.getPart("body");
var rArm = model.getPart("rightArm");
var lArm = model.getPart("leftArm");
var rLeg = model.getPart("rightLeg");
var lLeg = model.getPart("leftLeg");

head.clear();

body.clear();
body.setTextureOffset(0, 0);
body.addBox(0, -2, 0, 8, 3, 7);
body.setTextureOffset(30, 12);
body.addBox(-1, -4, 0, 1, 2, 10);
body.setTextureOffset(30, 12);
body.addBox(8, -4, 0, 1, 2, 10);
body.setTextureOffset(0, 10);
body.addBox(0, 2, 0, 8, 3, 7);
body.setTextureOffset(0, 27);
body.addBox(-6, 5, 0, 4, 1, 4);
body.setTextureOffset(0, 27);
body.addBox(10, 5, 0, 4, 1, 4);

body.setTextureOffset(30, 12);
body.addBox(0, -2, 7, 8, 7, 3);

body.setTextureOffset(30, 12);
body.addBox(0, 5, 5, 8, 3, 4);
body.setTextureOffset(30, 12);
body.addBox(0, 7, 7, 8, 3, 4);
body.setTextureOffset(30, 12);
body.addBox(0, 8, 9, 8, 3, 4);
body.setTextureOffset(30, 12);
body.addBox(1, 8, 13, 6, 3, 2);
body.setTextureOffset(30, 12);
body.addBox(2, 7, 15, 4, 3, 2);

rArm.clear();

lArm.clear();

rLeg.clear();

lLeg.clear();

}

var HaunterRenderer = Renderer.createHumanoidRenderer();
addHaunterRenderer(HaunterRenderer);


function addJolteonRenderer(renderer)

{

var model = renderer.getModel();

var head = model.getPart("head");
var body = model.getPart("body");
var rArm = model.getPart("rightArm");
var lArm = model.getPart("leftArm");
var rLeg = model.getPart("rightLeg");
var lLeg = model.getPart("leftLeg");

head.clear();

head.setTextureOffset(28, 6);
head.addBox(-2, 10, -2, 5, 5, 4);

head.setTextureOffset(28, 15);
head.addBox(-1.5, 13, -3, 4, 2, 2);

head.setTextureOffset(28, 0);
head.addBox(-2, 5, -1, 2, 5, 1);

head.setTextureOffset(28, 0);
head.addBox(1, 5, -1, 2, 5, 1);

body.clear();

body.setTextureOffset(0, 18);
body.addBox(-2.5, 15, 0, 6, 4, 8);
body.setTextureOffset(40, 15, true);
body.addBox(-3, 14, -1, 7, 4, 6);

body.setTextureOffset(28, 24, true);
body.addBox(-1, 13, 7, 3, 4, 4);

rArm.clear();
rArm.setTextureOffset(48, 0);
rArm.addBox(3.5, 17, 0, 2, 5, 2);

lArm.clear();
lArm.setTextureOffset(56, 0);
lArm.addBox(-4.5, 17, 0, 2, 5, 2);

rLeg.clear();
rLeg.setTextureOffset(48, 0);
rLeg.addBox(-0.5, 7, 6, 2, 5, 2);

lLeg.clear();
lLeg.setTextureOffset(56, 0);
lLeg.addBox(-0.5, 7, 6, 2, 5, 2);

}

var JolteonRenderer = Renderer.createHumanoidRenderer();
addJolteonRenderer(JolteonRenderer);

function addKakunaRenderer(renderer)

{

var model = renderer.getModel();

var head = model.getPart("head");
var body = model.getPart("body");
var rArm = model.getPart("rightArm");
var lArm = model.getPart("leftArm");
var rLeg = model.getPart("rightLeg");
var lLeg = model.getPart("leftLeg");

head.clear();

body.clear();
body.setTextureOffset(0, 0);
body.addBox(-2, 6, 0, 7, 10, 7);
body.setTextureOffset(44, 20);
body.addBox(-1, 16, 1, 5, 7, 5);

rArm.clear();

lArm.clear();

rLeg.clear();

lLeg.clear();

}

var KakunaRenderer = Renderer.createHumanoidRenderer();
addKakunaRenderer(KakunaRenderer);

function addKoffingRenderer(renderer)

{

var model = renderer.getModel();

var head = model.getPart("head");
var body = model.getPart("body");
var rArm = model.getPart("rightArm");
var lArm = model.getPart("leftArm");
var rLeg = model.getPart("rightLeg");
var lLeg = model.getPart("leftLeg");

head.clear();

body.clear();
body.setTextureOffset(0, 0);
body.addBox(0, -2, 0, 16, 16, 16, -3);

rArm.clear();

lArm.clear();

rLeg.clear();

lLeg.clear();

}

var KoffingRenderer = Renderer.createHumanoidRenderer();
addKoffingRenderer(KoffingRenderer);


function addMetapodRenderer(renderer)

{

var model = renderer.getModel();

var head = model.getPart("head");
var body = model.getPart("body");
var rArm = model.getPart("rightArm");
var lArm = model.getPart("leftArm");
var rLeg = model.getPart("rightLeg");
var lLeg = model.getPart("leftLeg");

head.clear();

body.clear();
body.setTextureOffset(0, 0);
body.addBox(-2, 6, 0, 7, 10, 7);
body.setTextureOffset(44, 20);
body.addBox(-1, 16, 1, 5, 7, 5);

rArm.clear();

lArm.clear();

rLeg.clear();

lLeg.clear();

}

var MetapodRenderer = Renderer.createHumanoidRenderer();
addMetapodRenderer(MetapodRenderer);



function addMarshtompRenderer(renderer)

{

var model = renderer.getModel();

var head = model.getPart("head");
var body = model.getPart("body");
var rArm = model.getPart("rightArm");
var lArm = model.getPart("leftArm");
var rLeg = model.getPart("rightLeg");
var lLeg = model.getPart("leftLeg");

head.clear();
head.setTextureOffset(0, 0);
head.addBox(-2, 4, -2, 7, 7, 7);
head.setTextureOffset(23, 0);
head.addBox(-5, 9, -1, 3, 1, 1);
head.setTextureOffset(23, 0);
head.addBox(5, 9, -1, 3, 1, 1);
head.setTextureOffset(50, 0, true);
head.addBox(1.5, -1, 0, 0, 10, 7);

body.clear();
body.setTextureOffset(0, 14);
body.addBox(-1.5, 11, -1.5, 6, 8, 6);

rArm.clear();
rArm.setTextureOffset(27, 27);
rArm.addBox(-3, 10, 0, 9, 1, 4);

lArm.clear();
lArm.setTextureOffset(27, 27);
lArm.addBox(-3, 10, 0, 9, 1, 4);

rLeg.clear();
rLeg.setTextureOffset(30, 15);
rLeg.addBox(-1, 6, 0, 3, 6, 3);

lLeg.clear();
lLeg.setTextureOffset(30, 15);
lLeg.addBox(1, 6, 0, 3, 6, 3);

}

var MarshtompRenderer = Renderer.createHumanoidRenderer();
addMarshtompRenderer(MarshtompRenderer);

function addMankeyRenderer(renderer)

{

var model = renderer.getModel();

var head = model.getPart("head");
var body = model.getPart("body");
var rArm = model.getPart("rightArm");
var lArm = model.getPart("leftArm");
var rLeg = model.getPart("rightLeg");
var lLeg = model.getPart("leftLeg");

head.clear();

body.clear();
body.setTextureOffset(0, 0);
body.addBox(0, 10, 0, 9, 9, 9);
body.setTextureOffset(0, 0);
body.addBox(0, 7, 4, 3, 3, 1);
body.setTextureOffset(0, 0);
body.addBox(6, 7, 4, 3, 3, 1);
body.setTextureOffset(0, 5);
body.addBox(3, 14, -0.5, 3, 3, 1);

rArm.clear();
rArm.setTextureOffset(44, 0);
rArm.addBox(3.5, 10, 3, 2, 6, 2);
rArm.setTextureOffset(52, 0);
rArm.addBox(4, 16, 3.5, 1, 4, 1);
rArm.setTextureOffset(56, 0);
rArm.addBox(3.5, 20, 3, 2, 3, 2);

lArm.clear();
lArm.setTextureOffset(44, 0);
lArm.addBox(3.5, 10, 3, 2, 6, 2);
lArm.setTextureOffset(52, 0);
lArm.addBox(4, 16, 3.5, 1, 4, 1);
lArm.setTextureOffset(56, 0);
lArm.addBox(3.5, 20, 3, 2, 3, 2);

rLeg.clear();
rLeg.setTextureOffset(56, 18);
rLeg.addBox(2, 7, 3, 2, 4, 2);
rLeg.setTextureOffset(48, 25);
rLeg.addBox(1.5, 11, 0, 3, 2, 5);

lLeg.clear();
lLeg.setTextureOffset(56, 18);
lLeg.addBox(4, 7, 3, 2, 4, 2);
lLeg.setTextureOffset(48, 25);
lLeg.addBox(3.5, 11, 0, 3, 2, 5);

}

var MankeyRenderer = Renderer.createHumanoidRenderer();
addMankeyRenderer(MankeyRenderer);


function addMudkipRenderer(renderer)

{

var model = renderer.getModel();

var head = model.getPart("head");
var body = model.getPart("body");
var rArm = model.getPart("rightArm");
var lArm = model.getPart("leftArm");
var rLeg = model.getPart("rightLeg");
var lLeg = model.getPart("leftLeg");

head.clear();
head.setTextureOffset(0, 0);
head.addBox(-2, 10, -8, 6, 6, 6);
head.setTextureOffset(0, 13);
head.addBox(0.5, 5, -7, 1, 5, 4);

head.setTextureOffset(0, 23);
head.addBox(-3, 11.5, -6.5, 2, 3, 3);
head.setTextureOffset(0, 30);
head.addBox(-5, 12.5, -6.5, 2, 1, 1);
head.setTextureOffset(0, 30);
head.addBox(-5, 12.5, -4.5, 2, 1, 1);

head.setTextureOffset(0, 23);
head.addBox(3, 11.5, -6.5, 2, 3, 3);
head.setTextureOffset(0, 30);
head.addBox(5, 12.5, -6.5, 2, 1, 1);
head.setTextureOffset(0, 30);
head.addBox(5, 12.5, -4.5, 2, 1, 1);

body.clear();
body.setTextureOffset(25, 0);
body.addBox(-1.5, 15, -4, 5, 5, 7);
body.setTextureOffset(54, 24);
body.addBox(0, 13, 2, 2, 5, 3);

rArm.clear();
rArm.setTextureOffset(18, 26);
rArm.addBox(4, 17, 1, 2, 4, 2);

lArm.clear();
lArm.setTextureOffset(18, 26);
lArm.addBox(-4, 17, 1, 2, 4, 2);

rLeg.clear();
rLeg.setTextureOffset(18, 26);
rLeg.addBox(0, 7, -4, 2, 4, 2);

lLeg.clear();
lLeg.setTextureOffset(18, 26);
lLeg.addBox(0, 7, -4, 2, 4, 2);

}

var MudkipRenderer = Renderer.createHumanoidRenderer();
addMudkipRenderer(MudkipRenderer);

function addMeganiumRenderer(renderer)

{

var model = renderer.getModel();

var head = model.getPart("head");
var body = model.getPart("body");
var rArm = model.getPart("rightArm");
var lArm = model.getPart("leftArm");
var rLeg = model.getPart("rightLeg");
var lLeg = model.getPart("leftLeg");

head.clear();
//head
head.setTextureOffset(0, 0);
head.addBox(-2, 3, -7, 6, 5, 7);
//yellow part left
head.setTextureOffset(49, 14);
head.addBox(3, 2, -7, 1, 1, 6);
//yellow part right
head.setTextureOffset(49, 14);
head.addBox(-2, 2, -7, 1, 1, 6);

body.clear();
//body
body.setTextureOffset(24, 14);
body.addBox(-2, 11, 0, 7, 7, 11);
//tail
body.setTextureOffset(38, 0);
body.addBox(0, 13, 11, 3, 2, 6);
//neck
body.setTextureOffset(34, 21);
body.addBox(-1, 5, 0, 5, 8, 5);
//flower on the neck
body.setTextureOffset(-12, 20, true);
body.addBox(-5, 10, -4, 12, 0, 12);

rArm.clear();
rArm.setTextureOffset(26, 0);
rArm.addBox(4, 16, 8, 3, 7, 3);

lArm.clear();
lArm.setTextureOffset(26, 0);
lArm.addBox(-4, 16, 8, 3, 7, 3);

rLeg.clear();
rLeg.setTextureOffset(26, 0);
rLeg.addBox(0, 6, 0, 3, 7, 3);

lLeg.clear();
lLeg.setTextureOffset(26, 0);
lLeg.addBox(0, 6, 0, 3, 7, 3);

}

var MeganiumRenderer = Renderer.createHumanoidRenderer();
addMeganiumRenderer(MeganiumRenderer);



function addWailmerRenderer(renderer)

{

var model = renderer.getModel();

var head = model.getPart("head");
var body = model.getPart("body");
var rArm = model.getPart("rightArm");
var lArm = model.getPart("leftArm");
var rLeg = model.getPart("rightLeg");
var lLeg = model.getPart("leftLeg");

head.clear();

body.clear();
body.setTextureOffset(0, 0);
body.addBox(0, 20, 0, 10, 10, 10);
body.setTextureOffset(0, 20);
body.addBox(10, 24, 3, 4, 1, 5);
body.setTextureOffset(0, 20);
body.addBox(-4, 24, 3, 4, 1, 5);

rArm.clear();

lArm.clear();

rLeg.clear();

lLeg.clear();

}

var WailmerRenderer = Renderer.createHumanoidRenderer();
addWailmerRenderer(WailmerRenderer);

function addWailordRenderer(renderer)

{

var model = renderer.getModel();

var head = model.getPart("head");
var body = model.getPart("body");
var rArm = model.getPart("rightArm");
var lArm = model.getPart("leftArm");
var rLeg = model.getPart("rightLeg");
var lLeg = model.getPart("leftLeg");

head.clear();

body.clear();
body.setTextureOffset(0, 0, true);
body.addBox(0, 16, 0, 7, 3, 24, 16);
body.setTextureOffset(0, 0, true);
body.addBox(-25, 20, 9, 5, 1, 3, 4);
body.setTextureOffset(0, 0, true);
body.addBox(-25, 20, 12, 5, 1, 3, 4);
body.setTextureOffset(0, 0, true);
body.addBox(27, 20, 9, 5, 1, 3, 4);
body.setTextureOffset(0, 0, true);
body.addBox(27, 20, 12, 5, 1, 3, 4);

rArm.clear();

lArm.clear();

rLeg.clear();

lLeg.clear();

}

var WailordRenderer = Renderer.createHumanoidRenderer();
addWailordRenderer(WailordRenderer);



function addWeedleRenderer(renderer)

{

var model = renderer.getModel();

var head = model.getPart("head");
var body = model.getPart("body");
var rArm = model.getPart("rightArm");
var lArm = model.getPart("leftArm");
var rLeg = model.getPart("rightLeg");
var lLeg = model.getPart("leftLeg");

head.clear();

body.clear();
body.setTextureOffset(0, 0);
body.addBox(-2, 16, 0, 5, 5, 5);
body.setTextureOffset(46, 0);
body.addBox(-2, 18, 5, 5, 4, 4);
body.setTextureOffset(0, 26);
body.addBox(-1, 19, 9, 3, 3, 3);
body.setTextureOffset(56, 28);
body.addBox(-0.5, 18, 12, 2, 2, 2);

rArm.clear();

lArm.clear();

rLeg.clear();

lLeg.clear();

}

var WeedleRenderer = Renderer.createHumanoidRenderer();
addWeedleRenderer(WeedleRenderer);

function addWeezingRenderer(renderer)

{

var model = renderer.getModel();

var head = model.getPart("head");
var body = model.getPart("body");
var rArm = model.getPart("rightArm");
var lArm = model.getPart("leftArm");
var rLeg = model.getPart("rightLeg");
var lLeg = model.getPart("leftLeg");

head.clear();

body.clear();
body.setTextureOffset(0, 0);
body.addBox(0, -2, 0, 10, 10, 10);
body.setTextureOffset(36, 18);
body.addBox(10, -2, 8, 7, 7, 7);
body.setTextureOffset(0, 24);
body.addBox(10, 4, 4, 4, 4, 4);

rArm.clear();

lArm.clear();

rLeg.clear();

lLeg.clear();

}

var WeezingRenderer = Renderer.createHumanoidRenderer();
addWeezingRenderer(WeezingRenderer);

function addWobbuffetRenderer(renderer)

{

var model = renderer.getModel();

var head = model.getPart("head");
var body = model.getPart("body");
var rArm = model.getPart("rightArm");
var lArm = model.getPart("leftArm");
var rLeg = model.getPart("rightLeg");
var lLeg = model.getPart("leftLeg");

head.clear();
head.setTextureOffset(0, 0);
head.addBox(0, -2, -1, 8, 8, 6);

body.clear();
body.setTextureOffset(40, 16);
body.addBox(0, 6, 0, 8, 12, 4);

rArm.clear();
rArm.setTextureOffset(0, 25);
rArm.addBox(4, 16, 4, 4, 3, 4);

lArm.clear();
lArm.setTextureOffset(0, 25);
lArm.addBox(0, 16, 4, 4, 3, 4);

rLeg.clear();
rLeg.setTextureOffset(0, 25);
rLeg.addBox(1, 6, -4, 4, 3, 4);

lLeg.clear();
lLeg.setTextureOffset(0, 25);
lLeg.addBox(3, 6, -4, 4, 3, 4);

}

var WobbuffetRenderer = Renderer.createHumanoidRenderer();
addWobbuffetRenderer(WobbuffetRenderer);



function addCelebiRenderer(renderer)

{

var model = renderer.getModel();

var head = model.getPart("head");
var body = model.getPart("body");
var rArm = model.getPart("rightArm");
var lArm = model.getPart("leftArm");
var rLeg = model.getPart("rightLeg");
var lLeg = model.getPart("leftLeg");

head.clear();

body.clear();
body.setTextureOffset(0, 0);
body.addBox(-2, 0, 0, 8, 8, 8);

body.setTextureOffset(0, 16);
body.addBox(-0.5, 8, 1.5, 5, 7, 5);

body.setTextureOffset(44, 22);
body.addBox(-1, -1, 1, 1, 1, 9);

body.setTextureOffset(44, 22);
body.addBox(4, -1, 1, 1, 1, 9);

rArm.clear();
rArm.setTextureOffset(0, 28);
rArm.addBox(-2, 8, 2.5, 8, 1, 3);

lArm.clear();
lArm.setTextureOffset(0, 28);
lArm.addBox(-2, 8, 2.5, 8, 1, 3);

rLeg.clear();
rLeg.setTextureOffset(28, 22);
rLeg.addBox(2, 2, 4, 1, 4, 1);

lLeg.clear();
lLeg.setTextureOffset(28, 22);
lLeg.addBox(1, 2, 4, 1, 4, 1);

}

var CelebiRenderer = Renderer.createHumanoidRenderer();
addCelebiRenderer(CelebiRenderer);

function addEnteiRenderer(renderer)

{

var model = renderer.getModel();

var head = model.getPart("head");
var body = model.getPart("body");
var rArm = model.getPart("rightArm");
var lArm = model.getPart("leftArm");
var rLeg = model.getPart("rightLeg");
var lLeg = model.getPart("leftLeg");

head.clear();


body.clear();
body.setTextureOffset(0, 0, true);
body.addBox(-2, 1, -4, 5, 5, 5, 2);
body.setTextureOffset(20, 0, true);
body.addBox(-2.5, -4.5, -5.5, 6, 4, 0);
body.setTextureOffset(11, 13, true);
body.addBox(-7.5, 1.5, -5.5, 4, 5, 0);
body.setTextureOffset(0, 13, true);
body.addBox(4.5, 1.5, -5.5, 4, 5, 0);
body.setTextureOffset(41, 16, true);
body.addBox(-2.5, 10, -3, 6, 6, 4, 2);
body.setTextureOffset(32, 0, true);
body.addBox(-2.5, 11, 5, 6, 5, 10, 2);
body.setTextureOffset(12, 21, true);
body.addBox(-2, 7, 5, 5, 3, 5, 2);
body.setTextureOffset(12, 21, true);
body.addBox(-2, 7, 8, 5, 3, 5, 2);
body.setTextureOffset(12, 21, true);
body.addBox(-1.5, 7, 13, 4, 3, 6, 2);

rArm.clear();
rArm.setTextureOffset(0, 22);
rArm.addBox(1, 15.5, -2, 3, 7, 3);

lArm.clear();
lArm.setTextureOffset(0, 22);
lArm.addBox(-3, 15.5, -2, 3, 7, 3);

rLeg.clear();
rLeg.setTextureOffset(0, 22);
rLeg.addBox(-3, 5.5, 11, 3, 7, 3);

lLeg.clear();
lLeg.setTextureOffset(0, 22);
lLeg.addBox(1, 5.5, 11, 3, 7, 3);

}

var EnteiRenderer = Renderer.createHumanoidRenderer();
addEnteiRenderer(EnteiRenderer);

function addMewtwoRenderer(renderer)

{

var model = renderer.getModel();

var head = model.getPart("head");
var body = model.getPart("body");
var rArm = model.getPart("rightArm");
var lArm = model.getPart("leftArm");
var rLeg = model.getPart("rightLeg");
var lLeg = model.getPart("leftLeg");

head.clear();
head.setTextureOffset(0, 0);
head.addBox(-2, -4, -2, 6, 6, 5);
head.setTextureOffset(50, 0);
head.addBox(-2, -6, 0, 2, 2, 2);
head.setTextureOffset(50, 0);
head.addBox(2, -6, 0, 2, 2, 2);

body.clear();
body.setTextureOffset(0, 11);
body.addBox(0.5, 0, 1, 1, 5, 1);
body.setTextureOffset(0, 20);
body.addBox(-1.5, 3, 1, 5, 9, 3);
body.setTextureOffset(22, 0);
body.addBox(-0.5, 7, -0.5, 3, 5, 3);
body.setTextureOffset(22, 9);
body.addBox(-0.5, 7.5, 2, 3, 4, 5);
body.setTextureOffset(34, 0);
body.addBox(-0.5, 8, 7, 3, 3, 5);
body.setTextureOffset(38, 9);
body.addBox(0, 8.5, 12, 2, 2, 5);

rArm.clear();
rArm.setTextureOffset(60, 0);
rArm.addBox(2.5, 2, 1, 1, 8, 1);
rArm.setTextureOffset(56, 9);
rArm.addBox(1, 8, 0, 2, 2, 2);

lArm.clear();
lArm.setTextureOffset(60, 0);
lArm.addBox(-1.5, 2, 1, 1, 8, 1);
lArm.setTextureOffset(56, 9);
lArm.addBox(-3, 8, 0, 2, 2, 2);

rLeg.clear();
rLeg.setTextureOffset(22, 23);
rLeg.addBox(-1, 0, -0.5, 3, 5, 4);
rLeg.setTextureOffset(48, 23);
rLeg.addBox(-0.5, 5, 0.5, 2, 7, 2);

lLeg.clear();
lLeg.setTextureOffset(22, 23);
lLeg.addBox(0, 0, -0.5, 3, 5, 4);
lLeg.setTextureOffset(48, 23);
lLeg.addBox(0.5, 5, 0.5, 2, 7, 2);

}

var MewtwoRenderer = Renderer.createHumanoidRenderer();
addMewtwoRenderer(MewtwoRenderer);

function addNidoranFRenderer(renderer)

{

var model = renderer.getModel();

var head = model.getPart("head");
var body = model.getPart("body");
var rArm = model.getPart("rightArm");
var lArm = model.getPart("leftArm");
var rLeg = model.getPart("rightLeg");
var lLeg = model.getPart("leftLeg");

head.clear();
head.setTextureOffset(0, 0);
head.addBox(0, 14, 0, 6, 6, 5);
head.setTextureOffset(22, 0);
head.addBox(1.5, 16, -2, 3, 3, 2);
head.setTextureOffset(32, 0);
head.addBox(0, 10, 1, 1, 4, 4);
head.setTextureOffset(32, 0);
head.addBox(5, 10, 1, 1, 4, 4);

body.clear();
body.setTextureOffset(32, 16);
body.addBox(0, 16, 5, 6, 6, 10);

rArm.clear();
rArm.setTextureOffset(0, 26);
rArm.addBox(4, 17, 13, 2, 4, 2);

lArm.clear();
lArm.setTextureOffset(0, 26);
lArm.addBox(0, 17, 13, 2, 4, 2);

rLeg.clear();
rLeg.setTextureOffset(0, 26);
rLeg.addBox(0, 7, 5, 2, 4, 2);

lLeg.clear();
lLeg.setTextureOffset(0, 26);
lLeg.addBox(4, 7, 5, 2, 4, 2);

}

var NidoranFRenderer = Renderer.createHumanoidRenderer();
addNidoranFRenderer(NidoranFRenderer);

function addNidoranMRenderer(renderer)

{

var model = renderer.getModel();

var head = model.getPart("head");
var body = model.getPart("body");
var rArm = model.getPart("rightArm");
var lArm = model.getPart("leftArm");
var rLeg = model.getPart("rightLeg");
var lLeg = model.getPart("leftLeg");

head.clear();
head.setTextureOffset(0, 0);
head.addBox(0, 14, 0, 6, 6, 5);
head.setTextureOffset(22, 0);
head.addBox(1.5, 16, -2, 3, 3, 2);
head.setTextureOffset(32, 0);
head.addBox(0, 10, 1, 1, 4, 4);
head.setTextureOffset(32, 0);
head.addBox(5, 10, 1, 1, 4, 4);

body.clear();
body.setTextureOffset(32, 20);
body.addBox(0, 16, 5, 6, 6, 10);

rArm.clear();
rArm.setTextureOffset(0, 26);
rArm.addBox(6, 17, 9, 2, 4, 2);

lArm.clear();
lArm.setTextureOffset(0, 26);
lArm.addBox(-2, 17, 9, 2, 4, 2);

rLeg.clear();
rLeg.setTextureOffset(0, 26);
rLeg.addBox(2, 7, 4, 2, 4, 2);

lLeg.clear();
lLeg.setTextureOffset(0, 26);
lLeg.addBox(2, 7, 4, 2, 4, 2);

}

var NidoranMRenderer = Renderer.createHumanoidRenderer();
addNidoranMRenderer(NidoranMRenderer);

function addNidorinaRenderer(renderer)

{

var model = renderer.getModel();

var head = model.getPart("head");
var body = model.getPart("body");
var rArm = model.getPart("rightArm");
var lArm = model.getPart("leftArm");
var rLeg = model.getPart("rightLeg");
var lLeg = model.getPart("leftLeg");

head.clear();
head.setTextureOffset(0, 0);
head.addBox(0, 14, 0, 8, 8, 7);
head.setTextureOffset(30, 0);
head.addBox(1, 18, -2, 6, 4, 4);
head.setTextureOffset(0, 15);
head.addBox(0, 8, 1, 1, 6, 6);
head.setTextureOffset(0, 15);
head.addBox(7, 8, 1, 1, 6, 6);

body.clear();
body.setTextureOffset(26, 8);
body.addBox(0, 14, 7, 8, 8, 10);

rArm.clear();
rArm.setTextureOffset(14, 15);
rArm.addBox(4, 18, 14, 3, 7, 3);

lArm.clear();
lArm.setTextureOffset(14, 15);
lArm.addBox(1, 18, 14, 3, 7, 3);

rLeg.clear();
rLeg.setTextureOffset(14, 15);
rLeg.addBox(0, 8, 6, 3, 7, 3);

lLeg.clear();
lLeg.setTextureOffset(14, 15);
lLeg.addBox(5, 8, 6, 3, 7, 3);

}

var NidorinaRenderer = Renderer.createHumanoidRenderer();
addNidorinaRenderer(NidorinaRenderer);

function addNidorinoRenderer(renderer)

{

var model = renderer.getModel();

var head = model.getPart("head");
var body = model.getPart("body");
var rArm = model.getPart("rightArm");
var lArm = model.getPart("leftArm");
var rLeg = model.getPart("rightLeg");
var lLeg = model.getPart("leftLeg");

head.clear();
head.setTextureOffset(0, 0);
head.addBox(0, 14, 0, 8, 8, 7);
head.setTextureOffset(30, 0);
head.addBox(1, 18, -2, 6, 4, 4);
head.setTextureOffset(0, 15);
head.addBox(0, 8, 1, 1, 6, 6);
head.setTextureOffset(0, 15);
head.addBox(7, 8, 1, 1, 6, 6);

body.clear();
body.setTextureOffset(26, 8);
body.addBox(0, 14, 7, 8, 8, 10);

rArm.clear();
rArm.setTextureOffset(14, 15);
rArm.addBox(4, 18, 14, 3, 7, 3);

lArm.clear();
lArm.setTextureOffset(14, 15);
lArm.addBox(1, 18, 14, 3, 7, 3);

rLeg.clear();
rLeg.setTextureOffset(14, 15);
rLeg.addBox(0, 8, 6, 3, 7, 3);

lLeg.clear();
lLeg.setTextureOffset(14, 15);
lLeg.addBox(5, 8, 6, 3, 7, 3);

}

var NidorinoRenderer = Renderer.createHumanoidRenderer();
addNidorinoRenderer(NidorinoRenderer);


function addPidgeotRenderer(renderer)

{

var model = renderer.getModel();

var head = model.getPart("head");
var body = model.getPart("body");
var rArm = model.getPart("rightArm");
var lArm = model.getPart("leftArm");
var rLeg = model.getPart("rightLeg");
var lLeg = model.getPart("leftLeg");

head.clear();
head.setTextureOffset(0, 0);
head.addBox(-2, 9, -2, 4, 6, 3);
head.setTextureOffset(14, 0);
head.addBox(-1.5, 11, -4, 3, 2, 2);


body.clear();
body.setTextureOffset(0, 18, true);
body.addBox(-3, 14, 0, 6, 6, 8);
body.setTextureOffset(46, 0, true);
body.addBox(-3, 14, 8, 6, 0, 6);

rArm.clear();
rArm.setTextureOffset(28, 16, true);
rArm.addBox(2, 11, 1, 1, 6, 10);

lArm.clear();
lArm.setTextureOffset(28, 16, true);
lArm.addBox(-3, 11, 1, 1, 6, 10);

rLeg.clear();
rLeg.setTextureOffset(36, 3, true);
rLeg.addBox(0, 7, 4, 1, 5, 0);
rLeg.setTextureOffset(29, 0, true);
rLeg.addBox(-1, 11.9, 1, 3, 0, 3);

lLeg.clear();
lLeg.setTextureOffset(36, 3, true);
lLeg.addBox(-1, 7, 4, 1, 5, 0);
lLeg.setTextureOffset(29, 0, true);
lLeg.addBox(-2, 11.9, 1, 3, 0, 3);

}

var PidgeotRenderer = Renderer.createHumanoidRenderer();
addPidgeotRenderer(PidgeotRenderer);

function addPidgeottoRenderer(renderer)

{

var model = renderer.getModel();

var head = model.getPart("head");
var body = model.getPart("body");
var rArm = model.getPart("rightArm");
var lArm = model.getPart("leftArm");
var rLeg = model.getPart("rightLeg");
var lLeg = model.getPart("leftLeg");

head.clear();
head.setTextureOffset(0, 0);
head.addBox(-2, 10, -2, 4, 6, 3);
head.setTextureOffset(14, 0);
head.addBox(-1.5, 12, -4, 3, 2, 2);


body.clear();
body.setTextureOffset(0, 18, true);
body.addBox(-3, 14, 0, 6, 6, 8);
body.setTextureOffset(46, 0, true);
body.addBox(-3, 14, 8, 6, 0, 6);

rArm.clear();
rArm.setTextureOffset(28, 18, true);
rArm.addBox(2, 13, 1, 1, 4, 10);

lArm.clear();
lArm.setTextureOffset(28, 18, true);
lArm.addBox(-3, 13, 1, 1, 4, 10);

rLeg.clear();
rLeg.setTextureOffset(36, 3, true);
rLeg.addBox(0, 7, 4, 1, 5, 0);
rLeg.setTextureOffset(29, 0, true);
rLeg.addBox(-1, 11.9, 1, 3, 0, 3);

lLeg.clear();
lLeg.setTextureOffset(36, 3, true);
lLeg.addBox(-1, 7, 4, 1, 5, 0);
lLeg.setTextureOffset(29, 0, true);
lLeg.addBox(-2, 11.9, 1, 3, 0, 3);

}

var PidgeottoRenderer = Renderer.createHumanoidRenderer();
addPidgeottoRenderer(PidgeottoRenderer);


function addQuilavaRenderer(renderer)

{

var model = renderer.getModel();

var head = model.getPart("head");
var body = model.getPart("body");
var rArm = model.getPart("rightArm");
var lArm = model.getPart("leftArm");
var rLeg = model.getPart("rightLeg");
var lLeg = model.getPart("leftLeg");

head.clear();
//head
head.setTextureOffset(0, 0);
head.addBox(0, 15, -6, 5, 5, 6);

body.clear();
//body
body.setTextureOffset(0, 16);
body.addBox(0, 15, 0, 6, 5, 11);
//fire on the body
body.setTextureOffset(37, 0, true);
body.addBox(-1, 9, 11, 8, 6, 0);

rArm.clear();
//arm
rArm.setTextureOffset(37, 24);
rArm.addBox(6, 18, 9, 2, 4, 2);

lArm.clear();
//arm
lArm.setTextureOffset(37, 24);
lArm.addBox(-2, 18, 9, 2, 4, 2);

rLeg.clear();
//leg
rLeg.setTextureOffset(37, 24);
rLeg.addBox(2, 8, 0, 2, 4, 2);

lLeg.clear();
//leg
lLeg.setTextureOffset(37, 24);
lLeg.addBox(2, 8, 0, 2, 4, 2);

}

var QuilavaRenderer = Renderer.createHumanoidRenderer();
addQuilavaRenderer(QuilavaRenderer);


function addSlowpokeRenderer(renderer)

{

var model = renderer.getModel();

var head = model.getPart("head");
var body = model.getPart("body");
var rArm = model.getPart("rightArm");
var lArm = model.getPart("leftArm");
var rLeg = model.getPart("rightLeg");
var lLeg = model.getPart("leftLeg");

head.clear();
head.setTextureOffset(0, 0);
head.addBox(-2, 10, -2, 8, 8, 8);

body.clear();
body.setTextureOffset(12, 8);
body.addBox(-3, 12, 4, 10, 8, 16);
body.setTextureOffset(18, 14);
body.addBox(0.5, 12, 18, 3, 3, 10);

rArm.clear();
rArm.setTextureOffset(0, 16);
rArm.addBox(3, 18, 4, 4, 4, 4);

lArm.clear();
lArm.setTextureOffset(0, 16);
lArm.addBox(-3, 18, 4, 4, 4, 4);

rLeg.clear();
rLeg.setTextureOffset(0, 16);
rLeg.addBox(-1, 8, 16, 4, 4, 4);

lLeg.clear();
lLeg.setTextureOffset(0, 16);
lLeg.addBox(1, 8, 16, 4, 4, 4);

}

var SlowpokeRenderer = Renderer.createHumanoidRenderer();
addSlowpokeRenderer(SlowpokeRenderer);

function addSpearowRenderer(renderer)

{

var model = renderer.getModel();

var head = model.getPart("head");
var body = model.getPart("body");
var rArm = model.getPart("rightArm");
var lArm = model.getPart("leftArm");
var rLeg = model.getPart("rightLeg");
var lLeg = model.getPart("leftLeg");

head.clear();
head.setTextureOffset(0, 0, true);
head.addBox(-2, 10, -2, 4, 6, 3);
head.setTextureOffset(14, 0, true);
head.addBox(-1.5, 12, -4, 3, 2, 2);
head.setTextureOffset(50, 0, true);
head.addBox(-2, 10, 1, 4, 6, 3);


body.clear();
body.setTextureOffset(0, 18);
body.addBox(-3, 14, 0, 6, 6, 8);

rArm.clear();
rArm.setTextureOffset(24, 13, true);
rArm.addBox(1.5, 13, 1, 1, 4, 6);

lArm.clear();
lArm.setTextureOffset(38, 13, true);
lArm.addBox(-2.5, 13, 1, 1, 4, 6);

rLeg.clear();
rLeg.setTextureOffset(36, 3, true);
rLeg.addBox(0, 7, 4, 1, 5, 0);
rLeg.setTextureOffset(29, 0, true);
rLeg.addBox(-1, 11.9, 1, 3, 0, 3);

lLeg.clear();
lLeg.setTextureOffset(36, 3, true);
lLeg.addBox(-1, 7, 4, 1, 5, 0);
lLeg.setTextureOffset(29, 0, true);
lLeg.addBox(-2, 11.9, 1, 3, 0, 3);

}

var SpearowRenderer = Renderer.createHumanoidRenderer();
addSpearowRenderer(SpearowRenderer);



function addSunfloraRenderer(renderer)

{

var model = renderer.getModel();

var head = model.getPart("head");
var body = model.getPart("body");
var rArm = model.getPart("rightArm");
var lArm = model.getPart("leftArm");
var rLeg = model.getPart("rightLeg");
var lLeg = model.getPart("leftLeg");

head.clear();
head.setTextureOffset(0, 0, true);
head.addBox(-2, 3, -2, 7, 7, 5);
head.setTextureOffset(24, 0, true);
head.addBox(-4, 1, 1, 11, 11, 0);

body.clear();
body.setTextureOffset(0, 19);
body.addBox(-1.5, 10, -1, 6, 8, 5);

rArm.clear();
rArm.setTextureOffset(44, 20, true);
rArm.addBox(-4, 10, 0, 10, 4, 0);

lArm.clear();
lArm.setTextureOffset(44, 16, true);
lArm.addBox(-3, 10, 0, 10, 4, 0);

rLeg.clear();
rLeg.setTextureOffset(20, 17, true);
rLeg.addBox(1, 6, 0, 2, 5, 2);
rLeg.setTextureOffset(22, 22, true);
rLeg.addBox(0, 11, -4, 3, 1, 6);

lLeg.clear();
lLeg.setTextureOffset(20, 17, true);
lLeg.addBox(0, 6, 0, 2, 5, 2);
lLeg.setTextureOffset(22, 22, true);
lLeg.addBox(0, 11, -4, 3, 1, 6);

}

var SunfloraRenderer = Renderer.createHumanoidRenderer();
addSunfloraRenderer(SunfloraRenderer);


function addSunkernRenderer(renderer)

{

var model = renderer.getModel();

var head = model.getPart("head");
var body = model.getPart("body");
var rArm = model.getPart("rightArm");
var lArm = model.getPart("leftArm");
var rLeg = model.getPart("rightLeg");
var lLeg = model.getPart("leftLeg");

head.clear();


body.clear();
body.setTextureOffset(0, 0, true);
body.addBox(-2, 14, 0, 8, 10, 7);
body.setTextureOffset(0, 0, true);
body.addBox(1.5, 11, 3, 1, 3, 1);
body.setTextureOffset(-14, 17, true);
body.addBox(-7, 11, 1.5, 9, 0, 5);
body.setTextureOffset(-14, 22, true);
body.addBox(2, 11, 1.5, 9, 0, 5);

rArm.clear();

lArm.clear();

rLeg.clear();

lLeg.clear();

}

var SunkernRenderer = Renderer.createHumanoidRenderer();
addSunkernRenderer(SunkernRenderer);

function addSwellowRenderer(renderer)

{

var model = renderer.getModel();

var head = model.getPart("head");
var body = model.getPart("body");
var rArm = model.getPart("rightArm");
var lArm = model.getPart("leftArm");
var rLeg = model.getPart("rightLeg");
var lLeg = model.getPart("leftLeg");

head.clear();
head.setTextureOffset(0, 0);
head.addBox(-2, -4, -2, 6, 5, 5);
head.setTextureOffset(0, 10);
head.addBox(-1, -4, 2, 4, 4, 5);
head.setTextureOffset(16, 22);
head.addBox(-0.5, -2, -5, 3, 1, 3);
head.setTextureOffset(20, 19);
head.addBox(0, -1, -4, 2, 1, 2);

body.clear();
body.setTextureOffset(0, 22, true);
body.addBox(-2, 1, 0, 6, 6, 4);
body.setTextureOffset(22, 0, true);
body.addBox(-2.5, 2, 4, 7, 5, 10);
body.setTextureOffset(46, 15, true);
body.addBox(-2, 2, 14, 1, 1, 8);
body.setTextureOffset(46, 15, true);
body.addBox(3, 2, 14, 1, 1, 8);
body.setTextureOffset(23, 22, true);
body.addBox(-15, 3, 6, 13, 0, 5);
body.setTextureOffset(23, 27, true);
body.addBox(4, 3, 6, 13, 0, 5);

rArm.clear();

lArm.clear();

rLeg.clear();
rLeg.setTextureOffset(22, 28);
rLeg.addBox(0, -5, 6, 2, 3, 1);

lLeg.clear();
lLeg.setTextureOffset(22, 28);
lLeg.addBox(0, -5, 6, 2, 3, 1);

}

var SwellowRenderer = Renderer.createHumanoidRenderer();
addSwellowRenderer(SwellowRenderer);

function addTaillowRenderer(renderer)

{

var model = renderer.getModel();

var head = model.getPart("head");
var body = model.getPart("body");
var rArm = model.getPart("rightArm");
var lArm = model.getPart("leftArm");
var rLeg = model.getPart("rightLeg");
var lLeg = model.getPart("leftLeg");

head.clear();
head.setTextureOffset(0, 0);
head.addBox(-2, -4, -2, 3, 3, 3);
head.setTextureOffset(0, 6);
head.addBox(-2, -2, -3, 3, 1, 1);

body.clear();
body.setTextureOffset(0, 8, true);
body.addBox(-2, -3, 1, 3, 3, 5);
body.setTextureOffset(-3, 16, true);
body.addBox(-9, -3, 2, 7, 0, 3);
body.setTextureOffset(-3, 19, true);
body.addBox(1, -3, 2, 7, 0, 3);
body.setTextureOffset(21, 0, true);
body.addBox(-2, -3, 6, 1, 1, 5);
body.setTextureOffset(21, 0, true);
body.addBox(0, -3, 6, 1, 1, 5);

rArm.clear();

lArm.clear();

rLeg.clear();

lLeg.clear();

}

var TaillowRenderer = Renderer.createHumanoidRenderer();
addTaillowRenderer(TaillowRenderer);

function addTentacoolRenderer(renderer)

{

var model = renderer.getModel();

var head = model.getPart("head");
var body = model.getPart("body");
var rArm = model.getPart("rightArm");
var lArm = model.getPart("leftArm");
var rLeg = model.getPart("rightLeg");
var lLeg = model.getPart("leftLeg");

head.clear();

body.clear();
body.setTextureOffset(0, 0);
body.addBox(0, 6, 0, 12, 16, 12);
body.setTextureOffset(56, 0);
body.addBox(0, 22, 6, 2, 18, 2);
body.setTextureOffset(56, 0);
body.addBox(10, 22, 6, 2, 18, 2);

rArm.clear();

lArm.clear();

rLeg.clear();

lLeg.clear();

}

var TentacoolRenderer = Renderer.createHumanoidRenderer();
addTentacoolRenderer(TentacoolRenderer);

function addTentacruelRenderer(renderer)

{

var model = renderer.getModel();

var head = model.getPart("head");
var body = model.getPart("body");
var rArm = model.getPart("rightArm");
var lArm = model.getPart("leftArm");
var rLeg = model.getPart("rightLeg");
var lLeg = model.getPart("leftLeg");

head.clear();

body.clear();
body.setTextureOffset(0, 0, true);
body.addBox(0, 5, 0, 6, 12, 6);
body.setTextureOffset(24, 10, true);
body.addBox(-1.5, 6, -1.5, 9, 10, 9);
body.setTextureOffset(52, 0, true);
body.addBox(0, 17, 1, 1, 9, 1);
body.setTextureOffset(52, 0, true);
body.addBox(2, 17, 0, 1, 9, 1);
body.setTextureOffset(52, 0, true);
body.addBox(4, 17, 1, 1, 9, 1);
body.setTextureOffset(52, 0, true);
body.addBox(5, 17, 2, 1, 9, 1);
body.setTextureOffset(52, 0, true);
body.addBox(5, 17, 4, 1, 9, 1);
body.setTextureOffset(52, 0, true);
body.addBox(3, 17, 5, 1, 9, 1);
body.setTextureOffset(52, 0, true);
body.addBox(1, 17, 5, 1, 9, 1);
body.setTextureOffset(52, 0, true);
body.addBox(0, 17, 3, 1, 9, 1);

rArm.clear();

lArm.clear();

rLeg.clear();

lLeg.clear();

}

var TentacruelRenderer = Renderer.createHumanoidRenderer();
addTentacruelRenderer(TentacruelRenderer);

function addTogepiRenderer(renderer)

{

var model = renderer.getModel();

var head = model.getPart("head");
var body = model.getPart("body");
var rArm = model.getPart("rightArm");
var lArm = model.getPart("leftArm");
var rLeg = model.getPart("rightLeg");
var lLeg = model.getPart("leftLeg");

head.clear();


body.clear();
body.setTextureOffset(0, 0);
body.addBox(0, 8, 0, 7, 4, 7);
body.setTextureOffset(0, 18);
body.addBox(0, 12, 0, 7, 7, 7);
body.setTextureOffset(34, 10, true);
body.addBox(0, 6, 0, 7, 2, 0);

rArm.clear();
rArm.setTextureOffset(33, 27);
rArm.addBox(3, 10, 2, 4, 2, 3);

lArm.clear();
lArm.setTextureOffset(33, 27);
lArm.addBox(0, 10, 2, 4, 2, 3);

rLeg.clear();
rLeg.setTextureOffset(33, 20);
rLeg.addBox(2, 6, 2, 2, 3, 2);

lLeg.clear();
lLeg.setTextureOffset(33, 20);
lLeg.addBox(3, 6, 2, 2, 3, 2);

}

var TogepiRenderer = Renderer.createHumanoidRenderer();
addTogepiRenderer(TogepiRenderer);

function addTorchicRenderer(renderer)

{

var model = renderer.getModel();

var head = model.getPart("head");
var body = model.getPart("body");
var rArm = model.getPart("rightArm");
var lArm = model.getPart("leftArm");
var rLeg = model.getPart("rightLeg");
var lLeg = model.getPart("leftLeg");

head.clear();
head.setTextureOffset(0, 0);
head.addBox(-0.5, 3, 0, 7, 7, 7);
head.setTextureOffset(0, 15);
head.addBox(1, 7, -2, 4, 1, 2);
head.setTextureOffset(34, 16, true);
head.addBox(0, -1, 4, 6, 4, 0);

body.clear();
body.setTextureOffset(30, 0);
body.addBox(0, 10, 0, 6, 7, 6);
body.setTextureOffset(46, 23, true);
body.addBox(-1.5, 9.9, -1.5, 9, 0, 9);

rArm.clear();

lArm.clear();

rLeg.clear();
rLeg.setTextureOffset(0, 20);
rLeg.addBox(2, 5, 3, 1, 5, 1);
rLeg.setTextureOffset(0, 26);
rLeg.addBox(1, 10, 0, 3, 1, 4);

lLeg.clear();
lLeg.setTextureOffset(0, 20);
lLeg.addBox(3, 5, 3, 1, 5, 1);
lLeg.setTextureOffset(0, 26);
lLeg.addBox(2, 10, 0, 3, 1, 4);

}

var TorchicRenderer = Renderer.createHumanoidRenderer();
addTorchicRenderer(TorchicRenderer);

function addTreeckoRenderer(renderer)

{

var model = renderer.getModel();

var head = model.getPart("head");
var body = model.getPart("body");
var rArm = model.getPart("rightArm");
var lArm = model.getPart("leftArm");
var rLeg = model.getPart("rightLeg");
var lLeg = model.getPart("leftLeg");

head.clear();
head.setTextureOffset(0, 0);
head.addBox(0, 5, 0, 5, 6, 5);
head.setTextureOffset(20, 0);
head.addBox(1, 8, -4, 3, 3, 4);

body.clear();
body.setTextureOffset(29, 9);
body.addBox(0, 11, 0.5, 5, 7, 4);
body.setTextureOffset(4, 16);
body.addBox(2, 15, 4.5, 2, 3, 7);

body.setTextureOffset(0, 24);
body.addBox(-1, 13, 2.5, 1, 5, 1);
body.setTextureOffset(40, 13);
body.addBox(-2, 18, 1.5, 2, 2, 2);

body.setTextureOffset(0, 24);
body.addBox(5, 13, 2.5, 1, 5, 1);
body.setTextureOffset(40, 13);
body.addBox(5, 18, 1.5, 2, 2, 2);

rArm.clear();

lArm.clear();

rLeg.clear();
rLeg.setTextureOffset(0, 24);
rLeg.addBox(2, 5, 2, 1, 5, 1);
rLeg.setTextureOffset(1, 27);
rLeg.addBox(1, 10, -1, 3, 1, 4);

lLeg.clear();
lLeg.setTextureOffset(0, 24);
lLeg.addBox(2, 5, 2, 1, 5, 1);
lLeg.setTextureOffset(1, 27);
lLeg.addBox(1, 10, -1, 3, 1, 4);

}

var TreeckoRenderer = Renderer.createHumanoidRenderer();
addTreeckoRenderer(TreeckoRenderer);

function addTyphlosionRenderer(renderer)

{

var model = renderer.getModel();

var head = model.getPart("head");
var body = model.getPart("body");
var rArm = model.getPart("rightArm");
var lArm = model.getPart("leftArm");
var rLeg = model.getPart("rightLeg");
var lLeg = model.getPart("leftLeg");

head.clear();
head.setTextureOffset(0, 0, true);
head.addBox(1, 0, -3, 6, 5, 8);
head.setTextureOffset(38, 21, true);
head.addBox(-1, 5, 3, 10, 0, 8);
head.setTextureOffset(26, 0, true);
head.addBox(1, -2, 3, 1, 2, 3);
head.addBox(6, -2, 3, 1, 2, 3);

body.clear();
body.setTextureOffset(34, 0);
body.addBox(0, 5, 0, 8, 14, 7);

rArm.clear();
rArm.setTextureOffset(0, 14);
rArm.addBox(3, 7, 1, 2, 2, 5);

lArm.clear();
lArm.setTextureOffset(0, 14);
lArm.addBox(2, 7, 1, 2, 2, 5);

rLeg.clear();
rLeg.setTextureOffset(0, 14);
rLeg.addBox(1, 5, 2, 2, 6, 4);
rLeg.addBox(1, 9, 3, 2, 3, 2);

lLeg.clear();
lLeg.setTextureOffset(0, 14);
lLeg.addBox(5, 5, 2, 2, 6, 4);
lLeg.addBox(5, 9, 3, 2, 3, 2);

}

var TyphlosionRenderer = Renderer.createHumanoidRenderer();
addTyphlosionRenderer(TyphlosionRenderer);

function addUmbreonRenderer(renderer)

{

var model = renderer.getModel();

var head = model.getPart("head");
var body = model.getPart("body");
var rArm = model.getPart("rightArm");
var lArm = model.getPart("leftArm");
var rLeg = model.getPart("rightLeg");
var lLeg = model.getPart("leftLeg");

head.clear();
//head
head.setTextureOffset(28, 6);
head.addBox(-2, 10, -2, 5, 5, 4);
//mouth
head.setTextureOffset(28, 15);
head.addBox(-1.5, 13, -3, 4, 2, 2);
//right ear
head.setTextureOffset(2, 14);
head.addBox(-2, 6, -1, 1, 4, 1);
//left ear
head.setTextureOffset(2, 14);
head.addBox(2, 6, -1, 1, 4, 1);

body.clear();
//body
body.setTextureOffset(0, 18);
body.addBox(-2.5, 15, 0, 6, 4, 8);
//tail
body.setTextureOffset(29, 22);
body.addBox(0, 13, 7, 1, 3, 7);

rArm.clear();
rArm.setTextureOffset(48, 0);
rArm.addBox(3.5, 17, 0, 2, 5, 2);

lArm.clear();
lArm.setTextureOffset(56, 0);
lArm.addBox(-4.5, 17, 0, 2, 5, 2);

rLeg.clear();
rLeg.setTextureOffset(48, 0);
rLeg.addBox(-0.5, 7, 6, 2, 5, 2);

lLeg.clear();
lLeg.setTextureOffset(56, 0);
lLeg.addBox(-0.5, 7, 6, 2, 5, 2);

}

var UmbreonRenderer = Renderer.createHumanoidRenderer();
addUmbreonRenderer(UmbreonRenderer);

function addVaporeonRenderer(renderer)

{

var model = renderer.getModel();

var head = model.getPart("head");
var body = model.getPart("body");
var rArm = model.getPart("rightArm");
var lArm = model.getPart("leftArm");
var rLeg = model.getPart("rightLeg");
var lLeg = model.getPart("leftLeg");

head.clear();
//head
head.setTextureOffset(28, 6);
head.addBox(-2, 12, -4, 5, 5, 4);
//mouth
head.setTextureOffset(28, 15);
head.addBox(-1.5, 15, -5, 4, 2, 2);
//right ear
head.setTextureOffset(0, 0, true);
head.addBox(-8, 11, -3, 6, 3, 0);
//left ear
head.setTextureOffset(12, 0, true);
head.addBox(3, 11, -3, 6, 3, 0);

body.clear();
//body 1
body.setTextureOffset(0, 18);
body.addBox(-2.5, 15, 0, 6, 4, 8);
//body 2
body.setTextureOffset(28, 24, true);
body.addBox(-3.5, 12, -0.1, 8, 8, 0);
//tail 1
body.setTextureOffset(6, 18);
body.addBox(0, 16, 8, 1, 1, 10);
//tail 2
body.setTextureOffset(0, 8);
body.addBox(0.5, 14, 9, 0, 2, 8);

rArm.clear();
rArm.setTextureOffset(48, 0);
rArm.addBox(3.5, 17, 0, 2, 5, 2);

lArm.clear();
lArm.setTextureOffset(56, 0);
lArm.addBox(-4.5, 17, 0, 2, 5, 2);

rLeg.clear();
rLeg.setTextureOffset(48, 0);
rLeg.addBox(-0.5, 7, 6, 2, 5, 2);

lLeg.clear();
lLeg.setTextureOffset(56, 0);
lLeg.addBox(-0.5, 7, 6, 2, 5, 2);

}

var VaporeonRenderer = Renderer.createHumanoidRenderer();
addVaporeonRenderer(VaporeonRenderer);



